
F446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000394  08007ad8  08007ad8  00008ad8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e6c  08007e6c  00009218  2**0
                  CONTENTS
  4 .ARM          00000008  08007e6c  08007e6c  00008e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e74  08007e74  00009218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e78  08007e78  00008e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08007e7c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bac  20000218  08008094  00009218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000dc4  08008094  00009dc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a7c6  00000000  00000000  00009248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e69  00000000  00000000  00023a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000bfbd  00000000  00000000  00027877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b0  00000000  00000000  00033838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d66  00000000  00000000  000349e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027110  00000000  00000000  0003574e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdaa  00000000  00000000  0005c85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0a8b  00000000  00000000  0007c608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015d093  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003eb8  00000000  00000000  0015d0d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000048  00000000  00000000  00160f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000218 	.word	0x20000218
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007abc 	.word	0x08007abc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000021c 	.word	0x2000021c
 800020c:	08007abc 	.word	0x08007abc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b988 	b.w	8000fb0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	468e      	mov	lr, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	4688      	mov	r8, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d962      	bls.n	8000d94 <__udivmoddi4+0xdc>
 8000cce:	fab2 f682 	clz	r6, r2
 8000cd2:	b14e      	cbz	r6, 8000ce8 <__udivmoddi4+0x30>
 8000cd4:	f1c6 0320 	rsb	r3, r6, #32
 8000cd8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cdc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ce0:	40b7      	lsls	r7, r6
 8000ce2:	ea43 0808 	orr.w	r8, r3, r8
 8000ce6:	40b4      	lsls	r4, r6
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	fa1f fc87 	uxth.w	ip, r7
 8000cf0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cf4:	0c23      	lsrs	r3, r4, #16
 8000cf6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cfa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfe:	fb01 f20c 	mul.w	r2, r1, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d0c:	f080 80ea 	bcs.w	8000ee4 <__udivmoddi4+0x22c>
 8000d10:	429a      	cmp	r2, r3
 8000d12:	f240 80e7 	bls.w	8000ee4 <__udivmoddi4+0x22c>
 8000d16:	3902      	subs	r1, #2
 8000d18:	443b      	add	r3, r7
 8000d1a:	1a9a      	subs	r2, r3, r2
 8000d1c:	b2a3      	uxth	r3, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d2a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2e:	459c      	cmp	ip, r3
 8000d30:	d909      	bls.n	8000d46 <__udivmoddi4+0x8e>
 8000d32:	18fb      	adds	r3, r7, r3
 8000d34:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d38:	f080 80d6 	bcs.w	8000ee8 <__udivmoddi4+0x230>
 8000d3c:	459c      	cmp	ip, r3
 8000d3e:	f240 80d3 	bls.w	8000ee8 <__udivmoddi4+0x230>
 8000d42:	443b      	add	r3, r7
 8000d44:	3802      	subs	r0, #2
 8000d46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4a:	eba3 030c 	sub.w	r3, r3, ip
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11d      	cbz	r5, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40f3      	lsrs	r3, r6
 8000d54:	2200      	movs	r2, #0
 8000d56:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d905      	bls.n	8000d6e <__udivmoddi4+0xb6>
 8000d62:	b10d      	cbz	r5, 8000d68 <__udivmoddi4+0xb0>
 8000d64:	e9c5 0100 	strd	r0, r1, [r5]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4608      	mov	r0, r1
 8000d6c:	e7f5      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d6e:	fab3 f183 	clz	r1, r3
 8000d72:	2900      	cmp	r1, #0
 8000d74:	d146      	bne.n	8000e04 <__udivmoddi4+0x14c>
 8000d76:	4573      	cmp	r3, lr
 8000d78:	d302      	bcc.n	8000d80 <__udivmoddi4+0xc8>
 8000d7a:	4282      	cmp	r2, r0
 8000d7c:	f200 8105 	bhi.w	8000f8a <__udivmoddi4+0x2d2>
 8000d80:	1a84      	subs	r4, r0, r2
 8000d82:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d86:	2001      	movs	r0, #1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	2d00      	cmp	r5, #0
 8000d8c:	d0e5      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d8e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d92:	e7e2      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f000 8090 	beq.w	8000eba <__udivmoddi4+0x202>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	f040 80a4 	bne.w	8000eec <__udivmoddi4+0x234>
 8000da4:	1a8a      	subs	r2, r1, r2
 8000da6:	0c03      	lsrs	r3, r0, #16
 8000da8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dac:	b280      	uxth	r0, r0
 8000dae:	b2bc      	uxth	r4, r7
 8000db0:	2101      	movs	r1, #1
 8000db2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000db6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dbe:	fb04 f20c 	mul.w	r2, r4, ip
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d907      	bls.n	8000dd6 <__udivmoddi4+0x11e>
 8000dc6:	18fb      	adds	r3, r7, r3
 8000dc8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x11c>
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	f200 80e0 	bhi.w	8000f94 <__udivmoddi4+0x2dc>
 8000dd4:	46c4      	mov	ip, r8
 8000dd6:	1a9b      	subs	r3, r3, r2
 8000dd8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ddc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000de0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000de4:	fb02 f404 	mul.w	r4, r2, r4
 8000de8:	429c      	cmp	r4, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x144>
 8000dec:	18fb      	adds	r3, r7, r3
 8000dee:	f102 30ff 	add.w	r0, r2, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x142>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2d6>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	1b1b      	subs	r3, r3, r4
 8000dfe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e02:	e7a5      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e04:	f1c1 0620 	rsb	r6, r1, #32
 8000e08:	408b      	lsls	r3, r1
 8000e0a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e0e:	431f      	orrs	r7, r3
 8000e10:	fa0e f401 	lsl.w	r4, lr, r1
 8000e14:	fa20 f306 	lsr.w	r3, r0, r6
 8000e18:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e1c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e20:	4323      	orrs	r3, r4
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	fa1f fc87 	uxth.w	ip, r7
 8000e2a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e2e:	0c1c      	lsrs	r4, r3, #16
 8000e30:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e34:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e38:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e42:	d909      	bls.n	8000e58 <__udivmoddi4+0x1a0>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e4a:	f080 809c 	bcs.w	8000f86 <__udivmoddi4+0x2ce>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f240 8099 	bls.w	8000f86 <__udivmoddi4+0x2ce>
 8000e54:	3802      	subs	r0, #2
 8000e56:	443c      	add	r4, r7
 8000e58:	eba4 040e 	sub.w	r4, r4, lr
 8000e5c:	fa1f fe83 	uxth.w	lr, r3
 8000e60:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e64:	fb09 4413 	mls	r4, r9, r3, r4
 8000e68:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e6c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e70:	45a4      	cmp	ip, r4
 8000e72:	d908      	bls.n	8000e86 <__udivmoddi4+0x1ce>
 8000e74:	193c      	adds	r4, r7, r4
 8000e76:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e7a:	f080 8082 	bcs.w	8000f82 <__udivmoddi4+0x2ca>
 8000e7e:	45a4      	cmp	ip, r4
 8000e80:	d97f      	bls.n	8000f82 <__udivmoddi4+0x2ca>
 8000e82:	3b02      	subs	r3, #2
 8000e84:	443c      	add	r4, r7
 8000e86:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e8a:	eba4 040c 	sub.w	r4, r4, ip
 8000e8e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e92:	4564      	cmp	r4, ip
 8000e94:	4673      	mov	r3, lr
 8000e96:	46e1      	mov	r9, ip
 8000e98:	d362      	bcc.n	8000f60 <__udivmoddi4+0x2a8>
 8000e9a:	d05f      	beq.n	8000f5c <__udivmoddi4+0x2a4>
 8000e9c:	b15d      	cbz	r5, 8000eb6 <__udivmoddi4+0x1fe>
 8000e9e:	ebb8 0203 	subs.w	r2, r8, r3
 8000ea2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ea6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eaa:	fa22 f301 	lsr.w	r3, r2, r1
 8000eae:	431e      	orrs	r6, r3
 8000eb0:	40cc      	lsrs	r4, r1
 8000eb2:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	e74f      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000eba:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ebe:	0c01      	lsrs	r1, r0, #16
 8000ec0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ec4:	b280      	uxth	r0, r0
 8000ec6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eca:	463b      	mov	r3, r7
 8000ecc:	4638      	mov	r0, r7
 8000ece:	463c      	mov	r4, r7
 8000ed0:	46b8      	mov	r8, r7
 8000ed2:	46be      	mov	lr, r7
 8000ed4:	2620      	movs	r6, #32
 8000ed6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eda:	eba2 0208 	sub.w	r2, r2, r8
 8000ede:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ee2:	e766      	b.n	8000db2 <__udivmoddi4+0xfa>
 8000ee4:	4601      	mov	r1, r0
 8000ee6:	e718      	b.n	8000d1a <__udivmoddi4+0x62>
 8000ee8:	4610      	mov	r0, r2
 8000eea:	e72c      	b.n	8000d46 <__udivmoddi4+0x8e>
 8000eec:	f1c6 0220 	rsb	r2, r6, #32
 8000ef0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ef4:	40b7      	lsls	r7, r6
 8000ef6:	40b1      	lsls	r1, r6
 8000ef8:	fa20 f202 	lsr.w	r2, r0, r2
 8000efc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f00:	430a      	orrs	r2, r1
 8000f02:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f06:	b2bc      	uxth	r4, r7
 8000f08:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f0c:	0c11      	lsrs	r1, r2, #16
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb08 f904 	mul.w	r9, r8, r4
 8000f16:	40b0      	lsls	r0, r6
 8000f18:	4589      	cmp	r9, r1
 8000f1a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f1e:	b280      	uxth	r0, r0
 8000f20:	d93e      	bls.n	8000fa0 <__udivmoddi4+0x2e8>
 8000f22:	1879      	adds	r1, r7, r1
 8000f24:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f28:	d201      	bcs.n	8000f2e <__udivmoddi4+0x276>
 8000f2a:	4589      	cmp	r9, r1
 8000f2c:	d81f      	bhi.n	8000f6e <__udivmoddi4+0x2b6>
 8000f2e:	eba1 0109 	sub.w	r1, r1, r9
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fb09 f804 	mul.w	r8, r9, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f44:	4542      	cmp	r2, r8
 8000f46:	d229      	bcs.n	8000f9c <__udivmoddi4+0x2e4>
 8000f48:	18ba      	adds	r2, r7, r2
 8000f4a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f4e:	d2c4      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f50:	4542      	cmp	r2, r8
 8000f52:	d2c2      	bcs.n	8000eda <__udivmoddi4+0x222>
 8000f54:	f1a9 0102 	sub.w	r1, r9, #2
 8000f58:	443a      	add	r2, r7
 8000f5a:	e7be      	b.n	8000eda <__udivmoddi4+0x222>
 8000f5c:	45f0      	cmp	r8, lr
 8000f5e:	d29d      	bcs.n	8000e9c <__udivmoddi4+0x1e4>
 8000f60:	ebbe 0302 	subs.w	r3, lr, r2
 8000f64:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f68:	3801      	subs	r0, #1
 8000f6a:	46e1      	mov	r9, ip
 8000f6c:	e796      	b.n	8000e9c <__udivmoddi4+0x1e4>
 8000f6e:	eba7 0909 	sub.w	r9, r7, r9
 8000f72:	4449      	add	r1, r9
 8000f74:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f78:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7c:	fb09 f804 	mul.w	r8, r9, r4
 8000f80:	e7db      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f82:	4673      	mov	r3, lr
 8000f84:	e77f      	b.n	8000e86 <__udivmoddi4+0x1ce>
 8000f86:	4650      	mov	r0, sl
 8000f88:	e766      	b.n	8000e58 <__udivmoddi4+0x1a0>
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	e6fd      	b.n	8000d8a <__udivmoddi4+0xd2>
 8000f8e:	443b      	add	r3, r7
 8000f90:	3a02      	subs	r2, #2
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x144>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	443b      	add	r3, r7
 8000f9a:	e71c      	b.n	8000dd6 <__udivmoddi4+0x11e>
 8000f9c:	4649      	mov	r1, r9
 8000f9e:	e79c      	b.n	8000eda <__udivmoddi4+0x222>
 8000fa0:	eba1 0109 	sub.w	r1, r1, r9
 8000fa4:	46c4      	mov	ip, r8
 8000fa6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000faa:	fb09 f804 	mul.w	r8, r9, r4
 8000fae:	e7c4      	b.n	8000f3a <__udivmoddi4+0x282>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <calculate_checksum>:
uint8_t broadcast_addr[6] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
uint8_t heartTxData[1] = {0xDD};
uint8_t heartRxData[1] = {0xEE};
// 计算和校验
// L、Ctrl、Cmd、Data 所有字节算术和，不考虑溢出
uint8_t calculate_checksum(const uint8_t *checkFrame, uint8_t length) {
 8000fb4:	4684      	mov	ip, r0
    uint8_t sum = 0;
    uint8_t i;
    for ( i = 0; i < length; i++) {
 8000fb6:	2300      	movs	r3, #0
    uint8_t sum = 0;
 8000fb8:	4618      	mov	r0, r3
    for ( i = 0; i < length; i++) {
 8000fba:	e005      	b.n	8000fc8 <calculate_checksum+0x14>
        sum += checkFrame[i];
 8000fbc:	f81c 2003 	ldrb.w	r2, [ip, r3]
 8000fc0:	4410      	add	r0, r2
 8000fc2:	b2c0      	uxtb	r0, r0
    for ( i = 0; i < length; i++) {
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d3f7      	bcc.n	8000fbc <calculate_checksum+0x8>
    }
    return sum;
}
 8000fcc:	4770      	bx	lr

08000fce <calculate_xor>:

// 计算异或校验
uint8_t calculate_xor(const uint8_t *checkFrame, uint8_t length) {
 8000fce:	4684      	mov	ip, r0
    uint8_t xor = 0;
    uint8_t i;
    for ( i = 0; i < length; i++) {
 8000fd0:	2300      	movs	r3, #0
    uint8_t xor = 0;
 8000fd2:	4618      	mov	r0, r3
    for ( i = 0; i < length; i++) {
 8000fd4:	e004      	b.n	8000fe0 <calculate_xor+0x12>
        xor ^= checkFrame[i];
 8000fd6:	f81c 2003 	ldrb.w	r2, [ip, r3]
 8000fda:	4050      	eors	r0, r2
    for ( i = 0; i < length; i++) {
 8000fdc:	3301      	adds	r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	428b      	cmp	r3, r1
 8000fe2:	d3f8      	bcc.n	8000fd6 <calculate_xor+0x8>
    }
    return xor;
}
 8000fe4:	4770      	bx	lr

08000fe6 <build_data_frame>:
    const uint8_t *user_data, 
    uint16_t user_data_len,
    uint8_t relay_depth,
    uint8_t *buffer, 
    uint16_t buffer_size) 
{
 8000fe6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fea:	4615      	mov	r5, r2
 8000fec:	9c08      	ldr	r4, [sp, #32]
    // 计算需要的总空间
    uint16_t data_field_len = 2 + 6 + 2 + user_data_len; // Data Ctrl + Dst Addr + User Data Len + User Data
    uint16_t total_frame_len = 1 + 1 + 1 + 1 + data_field_len + 1 + 1; // Header + L + Ctrl + Cmd + Data + CSUM + CXOR
 8000fee:	f102 0c10 	add.w	ip, r2, #16
 8000ff2:	fa1f fc8c 	uxth.w	ip, ip
    uint8_t *ptr = buffer;
    uint16_t check_len;
    uint8_t csum;
    uint8_t cxor;
    // 检查缓冲区是否足够
    if (buffer_size < total_frame_len) {
 8000ff6:	f8bd 6024 	ldrh.w	r6, [sp, #36]	@ 0x24
 8000ffa:	45b4      	cmp	ip, r6
 8000ffc:	d902      	bls.n	8001004 <build_data_frame+0x1e>
        return 0;
 8000ffe:	2000      	movs	r0, #0
    
    *ptr++ = csum;  // CSUM
    *ptr++ = cxor;  // CXOR
    
    return ptr - buffer; // 返回实际帧长度
}
 8001000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001004:	320a      	adds	r2, #10
 8001006:	b292      	uxth	r2, r2
    *ptr++ = FRAME_HEADER;  // 79H
 8001008:	2679      	movs	r6, #121	@ 0x79
 800100a:	7026      	strb	r6, [r4, #0]
    *ptr++ = (uint8_t)(data_field_len & 0xFF);    // 低字节
 800100c:	7062      	strb	r2, [r4, #1]
    *ptr++ = (uint8_t)(data_field_len >> 8);      // 高字节
 800100e:	0a12      	lsrs	r2, r2, #8
 8001010:	70a2      	strb	r2, [r4, #2]
    *ptr++ = 0x58;  // Ctrl (Prm=1表示主动发起)
 8001012:	2258      	movs	r2, #88	@ 0x58
 8001014:	70e2      	strb	r2, [r4, #3]
    *ptr++ = CMD_SEND_DATA;  // 14H
 8001016:	2214      	movs	r2, #20
 8001018:	7122      	strb	r2, [r4, #4]
    data_ctrl = (relay_depth << 12); // D12-D15为中继深度
 800101a:	031b      	lsls	r3, r3, #12
 800101c:	b29b      	uxth	r3, r3
    *ptr++ = 0x44;                            // 低字节(RSV)
 800101e:	2244      	movs	r2, #68	@ 0x44
 8001020:	7162      	strb	r2, [r4, #5]
    *ptr++ = (uint8_t)(data_ctrl >> 8);       // 高字节
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	71a3      	strb	r3, [r4, #6]
    memcpy(ptr, dst_addr, 6);
 8001026:	6803      	ldr	r3, [r0, #0]
 8001028:	f8c4 3007 	str.w	r3, [r4, #7]
 800102c:	8883      	ldrh	r3, [r0, #4]
 800102e:	f8a4 300b 	strh.w	r3, [r4, #11]
    *ptr++ = (uint8_t)(user_data_len & 0xFF);  // 低字节
 8001032:	7365      	strb	r5, [r4, #13]
    *ptr++ = (uint8_t)(user_data_len >> 8);    // 高字节
 8001034:	f104 080f 	add.w	r8, r4, #15
 8001038:	0a2b      	lsrs	r3, r5, #8
 800103a:	73a3      	strb	r3, [r4, #14]
    memcpy(ptr, user_data, user_data_len);
 800103c:	462a      	mov	r2, r5
 800103e:	4640      	mov	r0, r8
 8001040:	f004 fe95 	bl	8005d6e <memcpy>
    ptr += user_data_len;
 8001044:	eb08 0705 	add.w	r7, r8, r5
    check_len = ptr - (buffer + 1);
 8001048:	f104 0a01 	add.w	sl, r4, #1
 800104c:	eba7 060a 	sub.w	r6, r7, sl
    csum = calculate_checksum(buffer + 1, check_len);
 8001050:	b2f6      	uxtb	r6, r6
 8001052:	4631      	mov	r1, r6
 8001054:	4650      	mov	r0, sl
 8001056:	f7ff ffad 	bl	8000fb4 <calculate_checksum>
 800105a:	4681      	mov	r9, r0
    cxor = calculate_xor(buffer + 1, check_len);
 800105c:	4631      	mov	r1, r6
 800105e:	4650      	mov	r0, sl
 8001060:	f7ff ffb5 	bl	8000fce <calculate_xor>
    *ptr++ = csum;  // CSUM
 8001064:	f808 9005 	strb.w	r9, [r8, r5]
    *ptr++ = cxor;  // CXOR
 8001068:	1cbb      	adds	r3, r7, #2
 800106a:	7078      	strb	r0, [r7, #1]
    return ptr - buffer; // 返回实际帧长度
 800106c:	1b18      	subs	r0, r3, r4
 800106e:	b280      	uxth	r0, r0
 8001070:	e7c6      	b.n	8001000 <build_data_frame+0x1a>

08001072 <parse_received_data_frame>:
    uint8_t *src_addr,
    uint8_t *user_data,
    uint16_t user_data_buffer_size,
    uint16_t *user_data_len
) 
{
 8001072:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001076:	4699      	mov	r9, r3
    uint8_t csum;
    uint8_t cxor;
    uint8_t *datafield;
    uint16_t received_user_data_len;
    // 检查帧头
    if (frame[0] != FRAME_HEADER) return 1; // 无效帧头
 8001078:	7803      	ldrb	r3, [r0, #0]
 800107a:	2b79      	cmp	r3, #121	@ 0x79
 800107c:	d141      	bne.n	8001102 <parse_received_data_frame+0x90>
 800107e:	4604      	mov	r4, r0
 8001080:	4688      	mov	r8, r1
 8001082:	4692      	mov	sl, r2
    
    // 获取数据域Data长度
    data_field_len = frame[1] | (frame[2] << 8);
 8001084:	7846      	ldrb	r6, [r0, #1]
 8001086:	7883      	ldrb	r3, [r0, #2]
 8001088:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 800108c:	b235      	sxth	r5, r6
 800108e:	4637      	mov	r7, r6
    
    // 计算校验
    csum = calculate_checksum(frame + 1, 4 + data_field_len ); // L + Ctrl + Cmd + Data
 8001090:	1c46      	adds	r6, r0, #1
 8001092:	3504      	adds	r5, #4
 8001094:	b2ed      	uxtb	r5, r5
 8001096:	4629      	mov	r1, r5
 8001098:	4630      	mov	r0, r6
 800109a:	f7ff ff8b 	bl	8000fb4 <calculate_checksum>
 800109e:	4683      	mov	fp, r0
    cxor = calculate_xor(frame + 1, 4 + data_field_len );
 80010a0:	4629      	mov	r1, r5
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff ff93 	bl	8000fce <calculate_xor>
    
    // 验证校验
    if (frame[5 + data_field_len] != csum || frame[5 + data_field_len + 1] != cxor) {
 80010a8:	1d7b      	adds	r3, r7, #5
 80010aa:	5ce3      	ldrb	r3, [r4, r3]
 80010ac:	455b      	cmp	r3, fp
 80010ae:	d12b      	bne.n	8001108 <parse_received_data_frame+0x96>
 80010b0:	19e3      	adds	r3, r4, r7
 80010b2:	799b      	ldrb	r3, [r3, #6]
 80010b4:	4283      	cmp	r3, r0
 80010b6:	d001      	beq.n	80010bc <parse_received_data_frame+0x4a>
        return 2; // 校验失败
 80010b8:	2002      	movs	r0, #2
 80010ba:	e023      	b.n	8001104 <parse_received_data_frame+0x92>
    
    // 解析数据域
    datafield = frame + 5;
    // 解析Data Ctrl (3字节)(模块通知设备时为3字节)
    // 解析源地址    (6字节)
    memcpy(src_addr, datafield + 2, 6);
 80010bc:	f8d4 3007 	ldr.w	r3, [r4, #7]
 80010c0:	f8c8 3000 	str.w	r3, [r8]
 80010c4:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 80010c8:	f8a8 3004 	strh.w	r3, [r8, #4]
    
    // 解析用户数据长度 (2字节)
    received_user_data_len = datafield[8] | (datafield[9] << 8);
 80010cc:	7b62      	ldrb	r2, [r4, #13]
 80010ce:	7ba3      	ldrb	r3, [r4, #14]
 80010d0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    
    // 检查用户数据长度是否合理
    if (2 + 6 + 2 + received_user_data_len != data_field_len) return 3; // 用户数据长度错误
 80010d4:	f102 030a 	add.w	r3, r2, #10
 80010d8:	429f      	cmp	r7, r3
 80010da:	d117      	bne.n	800110c <parse_received_data_frame+0x9a>

    // 检查用户缓冲区是否足够
    if (received_user_data_len > user_data_buffer_size) {
 80010dc:	454a      	cmp	r2, r9
 80010de:	d804      	bhi.n	80010ea <parse_received_data_frame+0x78>
        *user_data_len = 0;
        return 4; // 用户缓冲区不足
    }
    
    // 获取用户数据
    *user_data_len = received_user_data_len;
 80010e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80010e2:	801a      	strh	r2, [r3, #0]
    if (received_user_data_len > 0) {
 80010e4:	b932      	cbnz	r2, 80010f4 <parse_received_data_frame+0x82>
        memcpy(user_data, datafield + 2 + 6 +2, received_user_data_len);
    }
    
    return 0; // 成功
 80010e6:	2000      	movs	r0, #0
 80010e8:	e00c      	b.n	8001104 <parse_received_data_frame+0x92>
        *user_data_len = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80010ee:	8013      	strh	r3, [r2, #0]
        return 4; // 用户缓冲区不足
 80010f0:	2004      	movs	r0, #4
 80010f2:	e007      	b.n	8001104 <parse_received_data_frame+0x92>
        memcpy(user_data, datafield + 2 + 6 +2, received_user_data_len);
 80010f4:	f104 010f 	add.w	r1, r4, #15
 80010f8:	4650      	mov	r0, sl
 80010fa:	f004 fe38 	bl	8005d6e <memcpy>
    return 0; // 成功
 80010fe:	2000      	movs	r0, #0
 8001100:	e000      	b.n	8001104 <parse_received_data_frame+0x92>
    if (frame[0] != FRAME_HEADER) return 1; // 无效帧头
 8001102:	2001      	movs	r0, #1
}
 8001104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return 2; // 校验失败
 8001108:	2002      	movs	r0, #2
 800110a:	e7fb      	b.n	8001104 <parse_received_data_frame+0x92>
    if (2 + 6 + 2 + received_user_data_len != data_field_len) return 3; // 用户数据长度错误
 800110c:	2003      	movs	r0, #3
 800110e:	e7f9      	b.n	8001104 <parse_received_data_frame+0x92>

08001110 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
//ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001110:	b510      	push	{r4, lr}
 8001112:	b084      	sub	sp, #16

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001114:	2300      	movs	r3, #0
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	9301      	str	r3, [sp, #4]
 800111a:	9302      	str	r3, [sp, #8]
 800111c:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800111e:	4833      	ldr	r0, [pc, #204]	@ (80011ec <MX_ADC1_Init+0xdc>)
 8001120:	4a33      	ldr	r2, [pc, #204]	@ (80011f0 <MX_ADC1_Init+0xe0>)
 8001122:	6002      	str	r2, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001124:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001128:	6042      	str	r2, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800112a:	6083      	str	r3, [r0, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800112c:	2201      	movs	r2, #1
 800112e:	6102      	str	r2, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001130:	7602      	strb	r2, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001132:	f880 3020 	strb.w	r3, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001136:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001138:	492e      	ldr	r1, [pc, #184]	@ (80011f4 <MX_ADC1_Init+0xe4>)
 800113a:	6281      	str	r1, [r0, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113c:	60c3      	str	r3, [r0, #12]
  hadc1.Init.NbrOfConversion = 5;
 800113e:	2305      	movs	r3, #5
 8001140:	61c3      	str	r3, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001142:	f880 2030 	strb.w	r2, [r0, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001146:	6142      	str	r2, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001148:	f001 fde4 	bl	8002d14 <HAL_ADC_Init>
 800114c:	2800      	cmp	r0, #0
 800114e:	d13a      	bne.n	80011c6 <MX_ADC1_Init+0xb6>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001150:	2300      	movs	r3, #0
 8001152:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 1;
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001158:	2303      	movs	r3, #3
 800115a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115c:	4669      	mov	r1, sp
 800115e:	4823      	ldr	r0, [pc, #140]	@ (80011ec <MX_ADC1_Init+0xdc>)
 8001160:	f001 ff1e 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 8001164:	bb90      	cbnz	r0, 80011cc <MX_ADC1_Init+0xbc>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001166:	2301      	movs	r3, #1
 8001168:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 2;
 800116a:	2302      	movs	r3, #2
 800116c:	9301      	str	r3, [sp, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116e:	4669      	mov	r1, sp
 8001170:	481e      	ldr	r0, [pc, #120]	@ (80011ec <MX_ADC1_Init+0xdc>)
 8001172:	f001 ff15 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 8001176:	bb60      	cbnz	r0, 80011d2 <MX_ADC1_Init+0xc2>
    Error_Handler();
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001178:	2302      	movs	r3, #2
 800117a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 3;
 800117c:	2303      	movs	r3, #3
 800117e:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001180:	4669      	mov	r1, sp
 8001182:	481a      	ldr	r0, [pc, #104]	@ (80011ec <MX_ADC1_Init+0xdc>)
 8001184:	f001 ff0c 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 8001188:	bb30      	cbnz	r0, 80011d8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
  }
  sConfig.Channel = ADC_CHANNEL_3;      // 改为实际硬件连接的通道
 800118a:	2303      	movs	r3, #3
 800118c:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 4;
 800118e:	2304      	movs	r3, #4
 8001190:	9301      	str	r3, [sp, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES; // 根据信号阻抗调整
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001192:	4c16      	ldr	r4, [pc, #88]	@ (80011ec <MX_ADC1_Init+0xdc>)
 8001194:	4669      	mov	r1, sp
 8001196:	4620      	mov	r0, r4
 8001198:	f001 ff02 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119c:	4669      	mov	r1, sp
 800119e:	4620      	mov	r0, r4
 80011a0:	f001 fefe 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 80011a4:	b9d8      	cbnz	r0, 80011de <MX_ADC1_Init+0xce>
  {
    Error_Handler();
  }
  sConfig.Channel = ADC_CHANNEL_4;      // 改为实际硬件连接的通道
 80011a6:	2304      	movs	r3, #4
 80011a8:	9300      	str	r3, [sp, #0]
  sConfig.Rank = 5;
 80011aa:	2305      	movs	r3, #5
 80011ac:	9301      	str	r3, [sp, #4]
//  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES; // 根据信号阻抗调整
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80011ae:	4c0f      	ldr	r4, [pc, #60]	@ (80011ec <MX_ADC1_Init+0xdc>)
 80011b0:	4669      	mov	r1, sp
 80011b2:	4620      	mov	r0, r4
 80011b4:	f001 fef4 	bl	8002fa0 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	4669      	mov	r1, sp
 80011ba:	4620      	mov	r0, r4
 80011bc:	f001 fef0 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 80011c0:	b980      	cbnz	r0, 80011e4 <MX_ADC1_Init+0xd4>
    }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011c2:	b004      	add	sp, #16
 80011c4:	bd10      	pop	{r4, pc}
    Error_Handler();
 80011c6:	f000 f921 	bl	800140c <Error_Handler>
 80011ca:	e7c1      	b.n	8001150 <MX_ADC1_Init+0x40>
    Error_Handler();
 80011cc:	f000 f91e 	bl	800140c <Error_Handler>
 80011d0:	e7c9      	b.n	8001166 <MX_ADC1_Init+0x56>
    Error_Handler();
 80011d2:	f000 f91b 	bl	800140c <Error_Handler>
 80011d6:	e7cf      	b.n	8001178 <MX_ADC1_Init+0x68>
    Error_Handler();
 80011d8:	f000 f918 	bl	800140c <Error_Handler>
 80011dc:	e7d5      	b.n	800118a <MX_ADC1_Init+0x7a>
    Error_Handler();
 80011de:	f000 f915 	bl	800140c <Error_Handler>
 80011e2:	e7e0      	b.n	80011a6 <MX_ADC1_Init+0x96>
      Error_Handler();
 80011e4:	f000 f912 	bl	800140c <Error_Handler>
}
 80011e8:	e7eb      	b.n	80011c2 <MX_ADC1_Init+0xb2>
 80011ea:	bf00      	nop
 80011ec:	20000294 	.word	0x20000294
 80011f0:	40012000 	.word	0x40012000
 80011f4:	0f000001 	.word	0x0f000001

080011f8 <HAL_ADC_MspInit>:
//  /* USER CODE BEGIN ADC2_Init 1 */
//  /* USER CODE END ADC2_Init 1 */
//}

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80011f8:	b530      	push	{r4, r5, lr}
 80011fa:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	2300      	movs	r3, #0
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	9304      	str	r3, [sp, #16]
 8001202:	9305      	str	r3, [sp, #20]
 8001204:	9306      	str	r3, [sp, #24]
 8001206:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 8001208:	6802      	ldr	r2, [r0, #0]
 800120a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800120e:	f503 3390 	add.w	r3, r3, #73728	@ 0x12000
 8001212:	429a      	cmp	r2, r3
 8001214:	d001      	beq.n	800121a <HAL_ADC_MspInit+0x22>
//
//
//
//    }

}
 8001216:	b009      	add	sp, #36	@ 0x24
 8001218:	bd30      	pop	{r4, r5, pc}
 800121a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800121c:	2500      	movs	r5, #0
 800121e:	9501      	str	r5, [sp, #4]
 8001220:	f503 338c 	add.w	r3, r3, #71680	@ 0x11800
 8001224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001226:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800122a:	645a      	str	r2, [r3, #68]	@ 0x44
 800122c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800122e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8001232:	9201      	str	r2, [sp, #4]
 8001234:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	9502      	str	r5, [sp, #8]
 8001238:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	9302      	str	r3, [sp, #8]
 8001248:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800124a:	231f      	movs	r3, #31
 800124c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001252:	a903      	add	r1, sp, #12
 8001254:	4811      	ldr	r0, [pc, #68]	@ (800129c <HAL_ADC_MspInit+0xa4>)
 8001256:	f002 fa53 	bl	8003700 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800125a:	4811      	ldr	r0, [pc, #68]	@ (80012a0 <HAL_ADC_MspInit+0xa8>)
 800125c:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_ADC_MspInit+0xac>)
 800125e:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001260:	6045      	str	r5, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001262:	6085      	str	r5, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001264:	60c5      	str	r5, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800126a:	6103      	str	r3, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001270:	6143      	str	r3, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001272:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001276:	6183      	str	r3, [r0, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127c:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800127e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001282:	6203      	str	r3, [r0, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001284:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001286:	f002 f855 	bl	8003334 <HAL_DMA_Init>
 800128a:	b918      	cbnz	r0, 8001294 <HAL_ADC_MspInit+0x9c>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800128c:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <HAL_ADC_MspInit+0xa8>)
 800128e:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001290:	639c      	str	r4, [r3, #56]	@ 0x38
}
 8001292:	e7c0      	b.n	8001216 <HAL_ADC_MspInit+0x1e>
      Error_Handler();
 8001294:	f000 f8ba 	bl	800140c <Error_Handler>
 8001298:	e7f8      	b.n	800128c <HAL_ADC_MspInit+0x94>
 800129a:	bf00      	nop
 800129c:	40020000 	.word	0x40020000
 80012a0:	20000234 	.word	0x20000234
 80012a4:	40026470 	.word	0x40026470

080012a8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  */
void MX_DMA_Init(void)
{
 80012a8:	b500      	push	{lr}
 80012aa:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012ac:	2300      	movs	r3, #0
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	4a20      	ldr	r2, [pc, #128]	@ (8001334 <MX_DMA_Init+0x8c>)
 80012b2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80012b4:	f441 0180 	orr.w	r1, r1, #4194304	@ 0x400000
 80012b8:	6311      	str	r1, [r2, #48]	@ 0x30
 80012ba:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80012bc:	f402 0280 	and.w	r2, r2, #4194304	@ 0x400000
 80012c0:	9201      	str	r2, [sp, #4]
 80012c2:	9a01      	ldr	r2, [sp, #4]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 80012c4:	481c      	ldr	r0, [pc, #112]	@ (8001338 <MX_DMA_Init+0x90>)
 80012c6:	4a1d      	ldr	r2, [pc, #116]	@ (800133c <MX_DMA_Init+0x94>)
 80012c8:	6002      	str	r2, [r0, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 80012ca:	6043      	str	r3, [r0, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 80012cc:	2280      	movs	r2, #128	@ 0x80
 80012ce:	6082      	str	r2, [r0, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 80012d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d4:	60c2      	str	r2, [r0, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 80012d6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012da:	6102      	str	r2, [r0, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012dc:	6143      	str	r3, [r0, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012de:	6183      	str	r3, [r0, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 80012e0:	61c3      	str	r3, [r0, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_LOW;
 80012e2:	6203      	str	r3, [r0, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80012e4:	2204      	movs	r2, #4
 80012e6:	6242      	str	r2, [r0, #36]	@ 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80012e8:	2203      	movs	r2, #3
 80012ea:	6282      	str	r2, [r0, #40]	@ 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 80012ec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80012ee:	6303      	str	r3, [r0, #48]	@ 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 80012f0:	f002 f820 	bl	8003334 <HAL_DMA_Init>
 80012f4:	b9d0      	cbnz	r0, 800132c <MX_DMA_Init+0x84>
    Error_Handler();
  }

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	4611      	mov	r1, r2
 80012fa:	203a      	movs	r0, #58	@ 0x3a
 80012fc:	f001 ff6c 	bl	80031d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001300:	203a      	movs	r0, #58	@ 0x3a
 8001302:	f001 ff79 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	4611      	mov	r1, r2
 800130a:	203c      	movs	r0, #60	@ 0x3c
 800130c:	f001 ff64 	bl	80031d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001310:	203c      	movs	r0, #60	@ 0x3c
 8001312:	f001 ff71 	bl	80031f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001316:	2200      	movs	r2, #0
 8001318:	4611      	mov	r1, r2
 800131a:	2046      	movs	r0, #70	@ 0x46
 800131c:	f001 ff5c 	bl	80031d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001320:	2046      	movs	r0, #70	@ 0x46
 8001322:	f001 ff69 	bl	80031f8 <HAL_NVIC_EnableIRQ>

}
 8001326:	b003      	add	sp, #12
 8001328:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 800132c:	f000 f86e 	bl	800140c <Error_Handler>
 8001330:	e7e1      	b.n	80012f6 <MX_DMA_Init+0x4e>
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800
 8001338:	200002e8 	.word	0x200002e8
 800133c:	40026410 	.word	0x40026410

08001340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001340:	b570      	push	{r4, r5, r6, lr}
 8001342:	b08a      	sub	sp, #40	@ 0x28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	2400      	movs	r4, #0
 8001346:	9405      	str	r4, [sp, #20]
 8001348:	9406      	str	r4, [sp, #24]
 800134a:	9407      	str	r4, [sp, #28]
 800134c:	9408      	str	r4, [sp, #32]
 800134e:	9409      	str	r4, [sp, #36]	@ 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001350:	9401      	str	r4, [sp, #4]
 8001352:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <MX_GPIO_Init+0xbc>)
 8001354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001356:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
 800135c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800135e:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001366:	9402      	str	r4, [sp, #8]
 8001368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800136a:	f042 0204 	orr.w	r2, r2, #4
 800136e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001370:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001372:	f002 0204 	and.w	r2, r2, #4
 8001376:	9202      	str	r2, [sp, #8]
 8001378:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	9403      	str	r4, [sp, #12]
 800137c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	631a      	str	r2, [r3, #48]	@ 0x30
 8001384:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001386:	f002 0201 	and.w	r2, r2, #1
 800138a:	9203      	str	r2, [sp, #12]
 800138c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	9404      	str	r4, [sp, #16]
 8001390:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001392:	f042 0202 	orr.w	r2, r2, #2
 8001396:	631a      	str	r2, [r3, #48]	@ 0x30
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_13, GPIO_PIN_RESET);
 80013a2:	4e17      	ldr	r6, [pc, #92]	@ (8001400 <MX_GPIO_Init+0xc0>)
 80013a4:	4622      	mov	r2, r4
 80013a6:	f242 0183 	movw	r1, #8323	@ 0x2083
 80013aa:	4630      	mov	r0, r6
 80013ac:	f002 fa9f 	bl	80038ee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_13;
 80013b0:	f242 0383 	movw	r3, #8323	@ 0x2083
 80013b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b6:	2501      	movs	r5, #1
 80013b8:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013be:	a905      	add	r1, sp, #20
 80013c0:	4630      	mov	r0, r6
 80013c2:	f002 f99d 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013c6:	23e0      	movs	r3, #224	@ 0xe0
 80013c8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013cc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	a905      	add	r1, sp, #20
 80013d0:	480c      	ldr	r0, [pc, #48]	@ (8001404 <MX_GPIO_Init+0xc4>)
 80013d2:	f002 f995 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80013d6:	2330      	movs	r3, #48	@ 0x30
 80013d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013da:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013dc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	a905      	add	r1, sp, #20
 80013e0:	4630      	mov	r0, r6
 80013e2:	f002 f98d 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB12 PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_12|GPIO_PIN_13;
 80013e6:	f243 0303 	movw	r3, #12291	@ 0x3003
 80013ea:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013ee:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	a905      	add	r1, sp, #20
 80013f2:	4805      	ldr	r0, [pc, #20]	@ (8001408 <MX_GPIO_Init+0xc8>)
 80013f4:	f002 f984 	bl	8003700 <HAL_GPIO_Init>

}
 80013f8:	b00a      	add	sp, #40	@ 0x28
 80013fa:	bd70      	pop	{r4, r5, r6, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400

0800140c <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140e:	e7fe      	b.n	800140e <Error_Handler+0x2>

08001410 <SystemClock_Config>:
{
 8001410:	b500      	push	{lr}
 8001412:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001414:	2234      	movs	r2, #52	@ 0x34
 8001416:	2100      	movs	r1, #0
 8001418:	a807      	add	r0, sp, #28
 800141a:	f004 fc28 	bl	8005c6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800141e:	2300      	movs	r3, #0
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	9303      	str	r3, [sp, #12]
 8001424:	9304      	str	r3, [sp, #16]
 8001426:	9305      	str	r3, [sp, #20]
 8001428:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	4a22      	ldr	r2, [pc, #136]	@ (80014b8 <SystemClock_Config+0xa8>)
 800142e:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8001430:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8001434:	6411      	str	r1, [r2, #64]	@ 0x40
 8001436:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001438:	f002 5280 	and.w	r2, r2, #268435456	@ 0x10000000
 800143c:	9200      	str	r2, [sp, #0]
 800143e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	4a1e      	ldr	r2, [pc, #120]	@ (80014bc <SystemClock_Config+0xac>)
 8001444:	6811      	ldr	r1, [r2, #0]
 8001446:	f441 4140 	orr.w	r1, r1, #49152	@ 0xc000
 800144a:	6011      	str	r1, [r2, #0]
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8001452:	9201      	str	r2, [sp, #4]
 8001454:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001456:	2202      	movs	r2, #2
 8001458:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145a:	2101      	movs	r1, #1
 800145c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145e:	2110      	movs	r1, #16
 8001460:	910b      	str	r1, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001462:	920d      	str	r2, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001464:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001466:	2308      	movs	r3, #8
 8001468:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800146a:	23b4      	movs	r3, #180	@ 0xb4
 800146c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800146e:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001470:	9212      	str	r2, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001472:	9213      	str	r2, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001474:	a807      	add	r0, sp, #28
 8001476:	f002 fc25 	bl	8003cc4 <HAL_RCC_OscConfig>
 800147a:	b9b0      	cbnz	r0, 80014aa <SystemClock_Config+0x9a>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800147c:	f002 fa46 	bl	800390c <HAL_PWREx_EnableOverDrive>
 8001480:	b9a8      	cbnz	r0, 80014ae <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001482:	230f      	movs	r3, #15
 8001484:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001486:	2302      	movs	r3, #2
 8001488:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800148e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001492:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001498:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800149a:	2105      	movs	r1, #5
 800149c:	a802      	add	r0, sp, #8
 800149e:	f002 fa73 	bl	8003988 <HAL_RCC_ClockConfig>
 80014a2:	b930      	cbnz	r0, 80014b2 <SystemClock_Config+0xa2>
}
 80014a4:	b015      	add	sp, #84	@ 0x54
 80014a6:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80014aa:	f7ff ffaf 	bl	800140c <Error_Handler>
    Error_Handler();
 80014ae:	f7ff ffad 	bl	800140c <Error_Handler>
    Error_Handler();
 80014b2:	f7ff ffab 	bl	800140c <Error_Handler>
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40007000 	.word	0x40007000

080014c0 <main>:
{
 80014c0:	b500      	push	{lr}
 80014c2:	b083      	sub	sp, #12
  HAL_Init();
 80014c4:	f001 fb4c 	bl	8002b60 <HAL_Init>
  SystemClock_Config();
 80014c8:	f7ff ffa2 	bl	8001410 <SystemClock_Config>
  SysTick_Config(SystemCoreClock / 1000);
 80014cc:	4b41      	ldr	r3, [pc, #260]	@ (80015d4 <main+0x114>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a41      	ldr	r2, [pc, #260]	@ (80015d8 <main+0x118>)
 80014d2:	fba2 2303 	umull	r2, r3, r2, r3
 80014d6:	099b      	lsrs	r3, r3, #6
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	3b01      	subs	r3, #1
 80014da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014de:	d20a      	bcs.n	80014f6 <main+0x36>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80014e4:	6153      	str	r3, [r2, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	4b3d      	ldr	r3, [pc, #244]	@ (80015dc <main+0x11c>)
 80014e8:	21f0      	movs	r1, #240	@ 0xf0
 80014ea:	f883 1023 	strb.w	r1, [r3, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ee:	2300      	movs	r3, #0
 80014f0:	6193      	str	r3, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	2307      	movs	r3, #7
 80014f4:	6113      	str	r3, [r2, #16]
  delay_init();
 80014f6:	f001 f8f1 	bl	80026dc <delay_init>
  MX_DMA_Init();
 80014fa:	f7ff fed5 	bl	80012a8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014fe:	f000 fff3 	bl	80024e8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001502:	f7ff fe05 	bl	8001110 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001506:	f000 fd21 	bl	8001f4c <MX_TIM1_Init>
  MX_TIM3_Init();
 800150a:	f000 fd59 	bl	8001fc0 <MX_TIM3_Init>
	MX_TIM2_Init();
 800150e:	f000 fe0b 	bl	8002128 <MX_TIM2_Init>
	MX_GPIO_Init();
 8001512:	f7ff ff15 	bl	8001340 <MX_GPIO_Init>
  StateMachine_Init(&stateMach);
 8001516:	4c32      	ldr	r4, [pc, #200]	@ (80015e0 <main+0x120>)
 8001518:	4620      	mov	r0, r4
 800151a:	f000 fb1b 	bl	8001b54 <StateMachine_Init>
  OLED_Init();
 800151e:	f001 f9f5 	bl	800290c <OLED_Init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)AdcBuf, 5);
 8001522:	2205      	movs	r2, #5
 8001524:	492f      	ldr	r1, [pc, #188]	@ (80015e4 <main+0x124>)
 8001526:	4830      	ldr	r0, [pc, #192]	@ (80015e8 <main+0x128>)
 8001528:	f001 fc20 	bl	8002d6c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim1);
 800152c:	482f      	ldr	r0, [pc, #188]	@ (80015ec <main+0x12c>)
 800152e:	f002 feb3 	bl	8004298 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001532:	482f      	ldr	r0, [pc, #188]	@ (80015f0 <main+0x130>)
 8001534:	f002 feb0 	bl	8004298 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,(uint8_t *)stateMach.bt_rx_buffer, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	f504 71b0 	add.w	r1, r4, #352	@ 0x160
 800153e:	482d      	ldr	r0, [pc, #180]	@ (80015f4 <main+0x134>)
 8001540:	f003 fe1f 	bl	8005182 <HAL_UART_Receive_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001544:	4c2c      	ldr	r4, [pc, #176]	@ (80015f8 <main+0x138>)
 8001546:	2108      	movs	r1, #8
 8001548:	4620      	mov	r0, r4
 800154a:	f003 f9a9 	bl	80048a0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800154e:	210c      	movs	r1, #12
 8001550:	4620      	mov	r0, r4
 8001552:	f003 f9a5 	bl	80048a0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_3,duty1);
 8001556:	6823      	ldr	r3, [r4, #0]
 8001558:	4a28      	ldr	r2, [pc, #160]	@ (80015fc <main+0x13c>)
 800155a:	6812      	ldr	r2, [r2, #0]
 800155c:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty2);
 800155e:	4a28      	ldr	r2, [pc, #160]	@ (8001600 <main+0x140>)
 8001560:	6812      	ldr	r2, [r2, #0]
 8001562:	641a      	str	r2, [r3, #64]	@ 0x40
  frame_length = build_data_frame(broadcast_addr,heartRxData,sizeof(heartRxData),1,ES1642_frame,sizeof(ES1642_frame));
 8001564:	2320      	movs	r3, #32
 8001566:	9301      	str	r3, [sp, #4]
 8001568:	4b26      	ldr	r3, [pc, #152]	@ (8001604 <main+0x144>)
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2301      	movs	r3, #1
 800156e:	461a      	mov	r2, r3
 8001570:	4925      	ldr	r1, [pc, #148]	@ (8001608 <main+0x148>)
 8001572:	4826      	ldr	r0, [pc, #152]	@ (800160c <main+0x14c>)
 8001574:	f7ff fd37 	bl	8000fe6 <build_data_frame>
 8001578:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <main+0x150>)
 800157a:	7018      	strb	r0, [r3, #0]
  delay_ms(3000);
 800157c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001580:	f001 f8c6 	bl	8002710 <delay_ms>
  MX_USART3_UART_Init();
 8001584:	f000 ffca 	bl	800251c <MX_USART3_UART_Init>
  HAL_UART_Receive_IT(&huart3, RX_data, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	4922      	ldr	r1, [pc, #136]	@ (8001614 <main+0x154>)
 800158c:	4822      	ldr	r0, [pc, #136]	@ (8001618 <main+0x158>)
 800158e:	f003 fdf8 	bl	8005182 <HAL_UART_Receive_IT>
 8001592:	e002      	b.n	800159a <main+0xda>
		uart_tx_enabled = 1;
 8001594:	4b21      	ldr	r3, [pc, #132]	@ (800161c <main+0x15c>)
 8001596:	2201      	movs	r2, #1
 8001598:	701a      	strb	r2, [r3, #0]
    __HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_3,duty1);
 800159a:	4b17      	ldr	r3, [pc, #92]	@ (80015f8 <main+0x138>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a17      	ldr	r2, [pc, #92]	@ (80015fc <main+0x13c>)
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SetCompare(&htim2,TIM_CHANNEL_4,duty2);
 80015a4:	4a16      	ldr	r2, [pc, #88]	@ (8001600 <main+0x140>)
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	641a      	str	r2, [r3, #64]	@ 0x40
	if (stateMach.v_in_filtered>83)
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <main+0x120>)
 80015ac:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80015b0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8001620 <main+0x160>
 80015b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015bc:	dd02      	ble.n	80015c4 <main+0x104>
		uart_tx_enabled = 0;
 80015be:	4b17      	ldr	r3, [pc, #92]	@ (800161c <main+0x15c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	if (stateMach.v_in_filtered<81)
 80015c4:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001624 <main+0x164>
 80015c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015d0:	d5e3      	bpl.n	800159a <main+0xda>
 80015d2:	e7df      	b.n	8001594 <main+0xd4>
 80015d4:	2000003c 	.word	0x2000003c
 80015d8:	10624dd3 	.word	0x10624dd3
 80015dc:	e000ed00 	.word	0xe000ed00
 80015e0:	2000034c 	.word	0x2000034c
 80015e4:	200002dc 	.word	0x200002dc
 80015e8:	20000294 	.word	0x20000294
 80015ec:	20000640 	.word	0x20000640
 80015f0:	200005b0 	.word	0x200005b0
 80015f4:	2000078c 	.word	0x2000078c
 80015f8:	200005f8 	.word	0x200005f8
 80015fc:	20000598 	.word	0x20000598
 8001600:	20000594 	.word	0x20000594
 8001604:	200004d8 	.word	0x200004d8
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
 8001610:	200004d7 	.word	0x200004d7
 8001614:	20000510 	.word	0x20000510
 8001618:	20000748 	.word	0x20000748
 800161c:	20000348 	.word	0x20000348
 8001620:	42a60000 	.word	0x42a60000
 8001624:	42a20000 	.word	0x42a20000

08001628 <StateMachine_OPEN>:
    if(sm->start_mode<0 || sm->start_mode>1)
    	sm->start_mode = AUTO_START; //自动启动
    sm->remote_lock = 1;
}

void StateMachine_OPEN() {
 8001628:	b508      	push	{r3, lr}
	if(stateMach.currentState == WAITTING && stateMach.v_in>3){
 800162a:	4b0c      	ldr	r3, [pc, #48]	@ (800165c <StateMachine_OPEN+0x34>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b94b      	cbnz	r3, 8001644 <StateMachine_OPEN+0x1c>
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <StateMachine_OPEN+0x34>)
 8001632:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001636:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800163a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	dc00      	bgt.n	8001646 <StateMachine_OPEN+0x1e>
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_SET);//自己加的
		stateMach.currentState = PRELOAD;
//		stateMach.currentState = OPEN;
		stateMach.counter = 0;
	}   //wait且vin大于3状态时PC0为高电平，改目前状态为PRELOAD,counter重置为0
}
 8001644:	bd08      	pop	{r3, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
 8001646:	2201      	movs	r2, #1
 8001648:	4611      	mov	r1, r2
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <StateMachine_OPEN+0x38>)
 800164c:	f002 f94f 	bl	80038ee <HAL_GPIO_WritePin>
		stateMach.currentState = PRELOAD;
 8001650:	4b02      	ldr	r3, [pc, #8]	@ (800165c <StateMachine_OPEN+0x34>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
		stateMach.counter = 0;
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
}
 800165a:	e7f3      	b.n	8001644 <StateMachine_OPEN+0x1c>
 800165c:	2000034c 	.word	0x2000034c
 8001660:	40020800 	.word	0x40020800

08001664 <StateMachine_OFF>:

void StateMachine_OFF(){
 8001664:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8001666:	4c09      	ldr	r4, [pc, #36]	@ (800168c <StateMachine_OFF+0x28>)
 8001668:	2200      	movs	r2, #0
 800166a:	2101      	movs	r1, #1
 800166c:	4620      	mov	r0, r4
 800166e:	f002 f93e 	bl	80038ee <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 8001672:	2200      	movs	r2, #0
 8001674:	2102      	movs	r1, #2
 8001676:	4620      	mov	r0, r4
 8001678:	f002 f939 	bl	80038ee <HAL_GPIO_WritePin>
	stateMach.error = NO_ERROR;
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <StateMachine_OFF+0x2c>)
 800167e:	2200      	movs	r2, #0
 8001680:	f883 217f 	strb.w	r2, [r3, #383]	@ 0x17f
	stateMach.currentState = WAITTING;
 8001684:	701a      	strb	r2, [r3, #0]
	stateMach.counter = 0;
 8001686:	605a      	str	r2, [r3, #4]
	// stateMach.remote_lock = 0; 定义关闭状态：PC0、PC1为低电平，无错误、等待状态、置0.
}
 8001688:	bd10      	pop	{r4, pc}
 800168a:	bf00      	nop
 800168c:	40020800 	.word	0x40020800
 8001690:	2000034c 	.word	0x2000034c

08001694 <StateMachine_alive_test>:

void StateMachine_alive_test() {
	stateMach.alive_counter++;
 8001694:	4a05      	ldr	r2, [pc, #20]	@ (80016ac <StateMachine_alive_test+0x18>)
 8001696:	6893      	ldr	r3, [r2, #8]
 8001698:	3301      	adds	r3, #1
 800169a:	6093      	str	r3, [r2, #8]
	if(stateMach.alive_counter == 500) {
 800169c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016a0:	d000      	beq.n	80016a4 <StateMachine_alive_test+0x10>
		stateMach.alive_counter = 0;
		// HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); 检测系统是否正常运行，判断时间为500ms
	}
}
 80016a2:	4770      	bx	lr
		stateMach.alive_counter = 0;
 80016a4:	4613      	mov	r3, r2
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
}
 80016aa:	e7fa      	b.n	80016a2 <StateMachine_alive_test+0xe>
 80016ac:	2000034c 	.word	0x2000034c

080016b0 <StateMachine_timer1_test>:

void StateMachine_timer1_test() {
 80016b0:	b508      	push	{r3, lr}
	stateMach.I_counter++;
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <StateMachine_timer1_test+0x24>)
 80016b4:	6913      	ldr	r3, [r2, #16]
 80016b6:	3301      	adds	r3, #1
 80016b8:	6113      	str	r3, [r2, #16]
    if(stateMach.I_counter == 500) {
 80016ba:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016be:	d000      	beq.n	80016c2 <StateMachine_timer1_test+0x12>
        stateMach.I_counter = 0;
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //电流计数器计算500后重新从0开始计数
    }
}
 80016c0:	bd08      	pop	{r3, pc}
        stateMach.I_counter = 0;
 80016c2:	4613      	mov	r3, r2
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
        HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7); //电流计数器计算500后重新从0开始计数
 80016c8:	2180      	movs	r1, #128	@ 0x80
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <StateMachine_timer1_test+0x28>)
 80016cc:	f002 f915 	bl	80038fa <HAL_GPIO_TogglePin>
}
 80016d0:	e7f6      	b.n	80016c0 <StateMachine_timer1_test+0x10>
 80016d2:	bf00      	nop
 80016d4:	2000034c 	.word	0x2000034c
 80016d8:	40020800 	.word	0x40020800
 80016dc:	00000000 	.word	0x00000000

080016e0 <StateMachine_messure>:

void StateMachine_messure(){
 80016e0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
	stateMach.v_in = (double)AdcBuf[2]/4096*3.3/0.026;
 80016e4:	4e2e      	ldr	r6, [pc, #184]	@ (80017a0 <StateMachine_messure+0xc0>)
 80016e6:	88b0      	ldrh	r0, [r6, #4]
 80016e8:	f7fe ff2c 	bl	8000544 <__aeabi_ui2d>
 80016ec:	2200      	movs	r2, #0
 80016ee:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <StateMachine_messure+0xc4>)
 80016f0:	f7fe ffa2 	bl	8000638 <__aeabi_dmul>
 80016f4:	a322      	add	r3, pc, #136	@ (adr r3, 8001780 <StateMachine_messure+0xa0>)
 80016f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016fa:	f7fe ff9d 	bl	8000638 <__aeabi_dmul>
 80016fe:	4680      	mov	r8, r0
 8001700:	4689      	mov	r9, r1
 8001702:	a321      	add	r3, pc, #132	@ (adr r3, 8001788 <StateMachine_messure+0xa8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7ff f8c0 	bl	800088c <__aeabi_ddiv>
 800170c:	f7ff fa6c 	bl	8000be8 <__aeabi_d2f>
 8001710:	4c25      	ldr	r4, [pc, #148]	@ (80017a8 <StateMachine_messure+0xc8>)
 8001712:	63a0      	str	r0, [r4, #56]	@ 0x38
	stateMach.v_out = (double)AdcBuf[1]/4096*3.3/0.026;
 8001714:	8870      	ldrh	r0, [r6, #2]
 8001716:	f7fe ff15 	bl	8000544 <__aeabi_ui2d>
 800171a:	2200      	movs	r2, #0
 800171c:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <StateMachine_messure+0xc4>)
 800171e:	f7fe ff8b 	bl	8000638 <__aeabi_dmul>
 8001722:	a317      	add	r3, pc, #92	@ (adr r3, 8001780 <StateMachine_messure+0xa0>)
 8001724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001728:	f7fe ff86 	bl	8000638 <__aeabi_dmul>
 800172c:	a316      	add	r3, pc, #88	@ (adr r3, 8001788 <StateMachine_messure+0xa8>)
 800172e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001732:	f7ff f8ab 	bl	800088c <__aeabi_ddiv>
 8001736:	f7ff fa57 	bl	8000be8 <__aeabi_d2f>
 800173a:	6360      	str	r0, [r4, #52]	@ 0x34
	stateMach.v_in_filtered = stateMach.v_in_filtered* 0.9999 + 0.0001*((double)AdcBuf[2]/4096*3.3)/0.026;
 800173c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800173e:	f7fe ff23 	bl	8000588 <__aeabi_f2d>
 8001742:	a313      	add	r3, pc, #76	@ (adr r3, 8001790 <StateMachine_messure+0xb0>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff76 	bl	8000638 <__aeabi_dmul>
 800174c:	4606      	mov	r6, r0
 800174e:	460f      	mov	r7, r1
 8001750:	a311      	add	r3, pc, #68	@ (adr r3, 8001798 <StateMachine_messure+0xb8>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	4640      	mov	r0, r8
 8001758:	4649      	mov	r1, r9
 800175a:	f7fe ff6d 	bl	8000638 <__aeabi_dmul>
 800175e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001788 <StateMachine_messure+0xa8>)
 8001760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001764:	f7ff f892 	bl	800088c <__aeabi_ddiv>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4630      	mov	r0, r6
 800176e:	4639      	mov	r1, r7
 8001770:	f7fe fdac 	bl	80002cc <__adddf3>
 8001774:	f7ff fa38 	bl	8000be8 <__aeabi_d2f>
 8001778:	63e0      	str	r0, [r4, #60]	@ 0x3c
} //计算输入电压和输出电压
 800177a:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 800177e:	bf00      	nop
 8001780:	66666666 	.word	0x66666666
 8001784:	400a6666 	.word	0x400a6666
 8001788:	76c8b439 	.word	0x76c8b439
 800178c:	3f9a9fbe 	.word	0x3f9a9fbe
 8001790:	48e8a71e 	.word	0x48e8a71e
 8001794:	3fefff2e 	.word	0x3fefff2e
 8001798:	eb1c432d 	.word	0xeb1c432d
 800179c:	3f1a36e2 	.word	0x3f1a36e2
 80017a0:	200002dc 	.word	0x200002dc
 80017a4:	3f300000 	.word	0x3f300000
 80017a8:	2000034c 	.word	0x2000034c

080017ac <StateMachine_BT_cnt_add>:

void StateMachine_BT_cnt_add(){
	if(stateMach.bt_counter < 100) //蓝牙计数器0到100计数，100时停止
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <StateMachine_BT_cnt_add+0x10>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b63      	cmp	r3, #99	@ 0x63
 80017b2:	d802      	bhi.n	80017ba <StateMachine_BT_cnt_add+0xe>
		stateMach.bt_counter++;
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a01      	ldr	r2, [pc, #4]	@ (80017bc <StateMachine_BT_cnt_add+0x10>)
 80017b8:	60d3      	str	r3, [r2, #12]
	
}
 80017ba:	4770      	bx	lr
 80017bc:	2000034c 	.word	0x2000034c

080017c0 <StateMachine_remote_check>:
//		stateMach.bt_rx_buffer[0] = 0;
//	}
//}


void StateMachine_remote_check(){
 80017c0:	b508      	push	{r3, lr}
	uint8_t remote = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80017c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c6:	4811      	ldr	r0, [pc, #68]	@ (800180c <StateMachine_remote_check+0x4c>)
 80017c8:	f002 f88a 	bl	80038e0 <HAL_GPIO_ReadPin>
	if(remote == GPIO_PIN_SET && stateMach.currentState == WAITTING && stateMach.v_in>VIN_OPEN && stateMach.remote_lock==0){
 80017cc:	2801      	cmp	r0, #1
 80017ce:	d001      	beq.n	80017d4 <StateMachine_remote_check+0x14>
		// HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_SET);
		// stateMach.currentState = PRELOAD;
		// stateMach.counter = 0;
		StateMachine_OPEN();//状态机打开
	}
	else if(remote == GPIO_PIN_RESET){
 80017d0:	b1a8      	cbz	r0, 80017fe <StateMachine_remote_check+0x3e>
		StateMachine_OFF();
		stateMach.remote_lock = 0;//遥控器关闭则解锁遥控器开启
	}
}
 80017d2:	bd08      	pop	{r3, pc}
	if(remote == GPIO_PIN_SET && stateMach.currentState == WAITTING && stateMach.v_in>VIN_OPEN && stateMach.remote_lock==0){
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <StateMachine_remote_check+0x50>)
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1f9      	bne.n	80017d0 <StateMachine_remote_check+0x10>
 80017dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <StateMachine_remote_check+0x50>)
 80017de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80017e2:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 80017e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ee:	ddef      	ble.n	80017d0 <StateMachine_remote_check+0x10>
 80017f0:	f893 3185 	ldrb.w	r3, [r3, #389]	@ 0x185
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1eb      	bne.n	80017d0 <StateMachine_remote_check+0x10>
		StateMachine_OPEN();//状态机打开
 80017f8:	f7ff ff16 	bl	8001628 <StateMachine_OPEN>
 80017fc:	e7e9      	b.n	80017d2 <StateMachine_remote_check+0x12>
		StateMachine_OFF();
 80017fe:	f7ff ff31 	bl	8001664 <StateMachine_OFF>
		stateMach.remote_lock = 0;//遥控器关闭则解锁遥控器开启
 8001802:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <StateMachine_remote_check+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
}
 800180a:	e7e2      	b.n	80017d2 <StateMachine_remote_check+0x12>
 800180c:	40020400 	.word	0x40020400
 8001810:	2000034c 	.word	0x2000034c

08001814 <StateMachine_auto_start>:

void StateMachine_auto_start(){
 8001814:	b508      	push	{r3, lr}
	if(stateMach.currentState == WAITTING && stateMach.v_in>VIN_OPEN && stateMach.start_mode == AUTO_START && stateMach.auto_start_cnt<AUTO_START_TIME){
 8001816:	4b12      	ldr	r3, [pc, #72]	@ (8001860 <StateMachine_auto_start+0x4c>)
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	b9a3      	cbnz	r3, 8001846 <StateMachine_auto_start+0x32>
 800181c:	4b10      	ldr	r3, [pc, #64]	@ (8001860 <StateMachine_auto_start+0x4c>)
 800181e:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001822:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	dd0a      	ble.n	8001846 <StateMachine_auto_start+0x32>
 8001830:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8001834:	b93b      	cbnz	r3, 8001846 <StateMachine_auto_start+0x32>
 8001836:	4b0a      	ldr	r3, [pc, #40]	@ (8001860 <StateMachine_auto_start+0x4c>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800183a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800183e:	d202      	bcs.n	8001846 <StateMachine_auto_start+0x32>
		stateMach.auto_start_cnt ++;
 8001840:	3301      	adds	r3, #1
 8001842:	4a07      	ldr	r2, [pc, #28]	@ (8001860 <StateMachine_auto_start+0x4c>)
 8001844:	6253      	str	r3, [r2, #36]	@ 0x24
	} //充电充两秒
	if(stateMach.auto_start_cnt == AUTO_START_TIME){	//在系统稳定条件下，3秒钟后自启动
 8001846:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <StateMachine_auto_start+0x4c>)
 8001848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800184e:	d000      	beq.n	8001852 <StateMachine_auto_start+0x3e>
		StateMachine_OPEN();
		stateMach.auto_start_cnt = AUTO_START_TIME + 1;
	}
}
 8001850:	bd08      	pop	{r3, pc}
		StateMachine_OPEN();
 8001852:	f7ff fee9 	bl	8001628 <StateMachine_OPEN>
		stateMach.auto_start_cnt = AUTO_START_TIME + 1;
 8001856:	4b02      	ldr	r3, [pc, #8]	@ (8001860 <StateMachine_auto_start+0x4c>)
 8001858:	f240 72d1 	movw	r2, #2001	@ 0x7d1
 800185c:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800185e:	e7f7      	b.n	8001850 <StateMachine_auto_start+0x3c>
 8001860:	2000034c 	.word	0x2000034c

08001864 <StateMachine_vin_low_protect>:

void StateMachine_vin_low_protect(){
 8001864:	b508      	push	{r3, lr}
	if(stateMach.v_in < VIN_OPEN){
 8001866:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <StateMachine_vin_low_protect+0x2c>)
 8001868:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800186c:	eef1 7a0c 	vmov.f32	s15, #28	@ 0x40e00000  7.0
 8001870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	d400      	bmi.n	800187c <StateMachine_vin_low_protect+0x18>
		StateMachine_OFF();
		stateMach.auto_start_cnt = 0;
		stateMach.remote_lock = 1;
	}
}
 800187a:	bd08      	pop	{r3, pc}
		StateMachine_OFF();
 800187c:	f7ff fef2 	bl	8001664 <StateMachine_OFF>
		stateMach.auto_start_cnt = 0;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <StateMachine_vin_low_protect+0x2c>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	@ 0x24
		stateMach.remote_lock = 1;
 8001886:	2201      	movs	r2, #1
 8001888:	f883 2185 	strb.w	r2, [r3, #389]	@ 0x185
}
 800188c:	e7f5      	b.n	800187a <StateMachine_vin_low_protect+0x16>
 800188e:	bf00      	nop
 8001890:	2000034c 	.word	0x2000034c
 8001894:	00000000 	.word	0x00000000

08001898 <StateMachine_preload_protect>:

void StateMachine_preload_protect(){
 8001898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(stateMach.currentState == PRELOAD){// 处理预加载状态,控制预充和主开关
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <StateMachine_preload_protect+0x100>)
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d000      	beq.n	80018a4 <StateMachine_preload_protect+0xc>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
//            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);//自己加的
            stateMach.currentState = OPEN;
        }
    }
}
 80018a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        stateMach.counter ++;
 80018a4:	4c3c      	ldr	r4, [pc, #240]	@ (8001998 <StateMachine_preload_protect+0x100>)
 80018a6:	6865      	ldr	r5, [r4, #4]
 80018a8:	3501      	adds	r5, #1
 80018aa:	6065      	str	r5, [r4, #4]
        if ((stateMach.v_out < (stateMach.v_in * 0.1)) && (stateMach.counter == stateMach.short_cnt)) {//检查输出电压是否不足输入电压的10%
 80018ac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80018ae:	f7fe fe6b 	bl	8000588 <__aeabi_f2d>
 80018b2:	4606      	mov	r6, r0
 80018b4:	460f      	mov	r7, r1
 80018b6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	a332      	add	r3, pc, #200	@ (adr r3, 8001988 <StateMachine_preload_protect+0xf0>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe feb9 	bl	8000638 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4630      	mov	r0, r6
 80018cc:	4639      	mov	r1, r7
 80018ce:	f7ff f925 	bl	8000b1c <__aeabi_dcmplt>
 80018d2:	b110      	cbz	r0, 80018da <StateMachine_preload_protect+0x42>
 80018d4:	6963      	ldr	r3, [r4, #20]
 80018d6:	429d      	cmp	r5, r3
 80018d8:	d031      	beq.n	800193e <StateMachine_preload_protect+0xa6>
		if ((stateMach.v_out < (stateMach.v_in * 0.85)) && (stateMach.counter == stateMach.cap_cnt)) {//电容充满电后检查输出电压是否不足输入电压的85%
 80018da:	4e2f      	ldr	r6, [pc, #188]	@ (8001998 <StateMachine_preload_protect+0x100>)
 80018dc:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 80018de:	f7fe fe53 	bl	8000588 <__aeabi_f2d>
 80018e2:	4604      	mov	r4, r0
 80018e4:	460d      	mov	r5, r1
 80018e6:	6bb0      	ldr	r0, [r6, #56]	@ 0x38
 80018e8:	f7fe fe4e 	bl	8000588 <__aeabi_f2d>
 80018ec:	a328      	add	r3, pc, #160	@ (adr r3, 8001990 <StateMachine_preload_protect+0xf8>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea1 	bl	8000638 <__aeabi_dmul>
 80018f6:	4606      	mov	r6, r0
 80018f8:	460f      	mov	r7, r1
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7ff f90b 	bl	8000b1c <__aeabi_dcmplt>
 8001906:	b120      	cbz	r0, 8001912 <StateMachine_preload_protect+0x7a>
 8001908:	4b23      	ldr	r3, [pc, #140]	@ (8001998 <StateMachine_preload_protect+0x100>)
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	699b      	ldr	r3, [r3, #24]
 800190e:	429a      	cmp	r2, r3
 8001910:	d027      	beq.n	8001962 <StateMachine_preload_protect+0xca>
		else if (stateMach.v_out >= (stateMach.v_in * 0.85) && stateMach.counter >= stateMach.main_power_cnt) {
 8001912:	4632      	mov	r2, r6
 8001914:	463b      	mov	r3, r7
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7ff f913 	bl	8000b44 <__aeabi_dcmpge>
 800191e:	2800      	cmp	r0, #0
 8001920:	d0bf      	beq.n	80018a2 <StateMachine_preload_protect+0xa>
 8001922:	4b1d      	ldr	r3, [pc, #116]	@ (8001998 <StateMachine_preload_protect+0x100>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3ba      	bcc.n	80018a2 <StateMachine_preload_protect+0xa>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800192c:	2201      	movs	r2, #1
 800192e:	2102      	movs	r1, #2
 8001930:	481a      	ldr	r0, [pc, #104]	@ (800199c <StateMachine_preload_protect+0x104>)
 8001932:	f001 ffdc 	bl	80038ee <HAL_GPIO_WritePin>
            stateMach.currentState = OPEN;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <StateMachine_preload_protect+0x100>)
 8001938:	2202      	movs	r2, #2
 800193a:	701a      	strb	r2, [r3, #0]
}
 800193c:	e7b1      	b.n	80018a2 <StateMachine_preload_protect+0xa>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 800193e:	4c17      	ldr	r4, [pc, #92]	@ (800199c <StateMachine_preload_protect+0x104>)
 8001940:	2200      	movs	r2, #0
 8001942:	2101      	movs	r1, #1
 8001944:	4620      	mov	r0, r4
 8001946:	f001 ffd2 	bl	80038ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET); 
 800194a:	2200      	movs	r2, #0
 800194c:	2102      	movs	r1, #2
 800194e:	4620      	mov	r0, r4
 8001950:	f001 ffcd 	bl	80038ee <HAL_GPIO_WritePin>
			stateMach.currentState = STATE_ERROR;
 8001954:	4b10      	ldr	r3, [pc, #64]	@ (8001998 <StateMachine_preload_protect+0x100>)
 8001956:	2203      	movs	r2, #3
 8001958:	701a      	strb	r2, [r3, #0]
			stateMach.error = PRELOAD_SHORT;
 800195a:	2202      	movs	r2, #2
 800195c:	f883 217f 	strb.w	r2, [r3, #383]	@ 0x17f
 8001960:	e7bb      	b.n	80018da <StateMachine_preload_protect+0x42>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0,GPIO_PIN_RESET);
 8001962:	4c0e      	ldr	r4, [pc, #56]	@ (800199c <StateMachine_preload_protect+0x104>)
 8001964:	2200      	movs	r2, #0
 8001966:	2101      	movs	r1, #1
 8001968:	4620      	mov	r0, r4
 800196a:	f001 ffc0 	bl	80038ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1,GPIO_PIN_RESET);
 800196e:	2200      	movs	r2, #0
 8001970:	2102      	movs	r1, #2
 8001972:	4620      	mov	r0, r4
 8001974:	f001 ffbb 	bl	80038ee <HAL_GPIO_WritePin>
			stateMach.currentState = STATE_ERROR;
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <StateMachine_preload_protect+0x100>)
 800197a:	2203      	movs	r2, #3
 800197c:	701a      	strb	r2, [r3, #0]
            stateMach.error = PRELOAD_CAP; //报错充电失败
 800197e:	f883 217f 	strb.w	r2, [r3, #383]	@ 0x17f
 8001982:	e78e      	b.n	80018a2 <StateMachine_preload_protect+0xa>
 8001984:	f3af 8000 	nop.w
 8001988:	9999999a 	.word	0x9999999a
 800198c:	3fb99999 	.word	0x3fb99999
 8001990:	33333333 	.word	0x33333333
 8001994:	3feb3333 	.word	0x3feb3333
 8001998:	2000034c 	.word	0x2000034c
 800199c:	40020800 	.word	0x40020800

080019a0 <StateMachine_overcurrent_protect>:


void StateMachine_overcurrent_protect() {
 80019a0:	b510      	push	{r4, lr}
	float current_raw = ((double)AdcBuf[0] - 2048) / 4096 * 3.3 / 50 / 0.3 * 1000;
 80019a2:	4b2d      	ldr	r3, [pc, #180]	@ (8001a58 <StateMachine_overcurrent_protect+0xb8>)
 80019a4:	8818      	ldrh	r0, [r3, #0]
 80019a6:	f7fe fdcd 	bl	8000544 <__aeabi_ui2d>
 80019aa:	2200      	movs	r2, #0
 80019ac:	4b2b      	ldr	r3, [pc, #172]	@ (8001a5c <StateMachine_overcurrent_protect+0xbc>)
 80019ae:	f7fe fc8b 	bl	80002c8 <__aeabi_dsub>
 80019b2:	2200      	movs	r2, #0
 80019b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001a60 <StateMachine_overcurrent_protect+0xc0>)
 80019b6:	f7fe fe3f 	bl	8000638 <__aeabi_dmul>
 80019ba:	a323      	add	r3, pc, #140	@ (adr r3, 8001a48 <StateMachine_overcurrent_protect+0xa8>)
 80019bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c0:	f7fe fe3a 	bl	8000638 <__aeabi_dmul>
 80019c4:	2200      	movs	r2, #0
 80019c6:	4b27      	ldr	r3, [pc, #156]	@ (8001a64 <StateMachine_overcurrent_protect+0xc4>)
 80019c8:	f7fe ff60 	bl	800088c <__aeabi_ddiv>
 80019cc:	a320      	add	r3, pc, #128	@ (adr r3, 8001a50 <StateMachine_overcurrent_protect+0xb0>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe ff5b 	bl	800088c <__aeabi_ddiv>
 80019d6:	2200      	movs	r2, #0
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <StateMachine_overcurrent_protect+0xc8>)
 80019da:	f7fe fe2d 	bl	8000638 <__aeabi_dmul>
 80019de:	f7ff f903 	bl	8000be8 <__aeabi_d2f>
 80019e2:	ee07 0a90 	vmov	s15, r0
	stateMach.current = stateMach.alpha * current_raw + (1 - stateMach.alpha) * stateMach.current;//低通滤波
 80019e6:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <StateMachine_overcurrent_protect+0xcc>)
 80019e8:	edd3 6a60 	vldr	s13, [r3, #384]	@ 0x180
 80019ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80019f4:	ee37 7a66 	vsub.f32	s14, s14, s13
 80019f8:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80019fc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8001a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a04:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
    if (fabs(stateMach.current) > stateMach.maxcurrent) { // 过流保护
 8001a08:	eef0 7ae7 	vabs.f32	s15, s15
 8001a0c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a18:	dc00      	bgt.n	8001a1c <StateMachine_overcurrent_protect+0x7c>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
        stateMach.currentState = STATE_ERROR;
        stateMach.error = OVERCURRENT;
        stateMach.counter = 0;
    }
}
 8001a1a:	bd10      	pop	{r4, pc}
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001a1c:	4c14      	ldr	r4, [pc, #80]	@ (8001a70 <StateMachine_overcurrent_protect+0xd0>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2101      	movs	r1, #1
 8001a22:	4620      	mov	r0, r4
 8001a24:	f001 ff63 	bl	80038ee <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2102      	movs	r1, #2
 8001a2c:	4620      	mov	r0, r4
 8001a2e:	f001 ff5e 	bl	80038ee <HAL_GPIO_WritePin>
        stateMach.currentState = STATE_ERROR;
 8001a32:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <StateMachine_overcurrent_protect+0xcc>)
 8001a34:	2203      	movs	r2, #3
 8001a36:	701a      	strb	r2, [r3, #0]
        stateMach.error = OVERCURRENT;
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 217f 	strb.w	r2, [r3, #383]	@ 0x17f
        stateMach.counter = 0;
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
}
 8001a42:	e7ea      	b.n	8001a1a <StateMachine_overcurrent_protect+0x7a>
 8001a44:	f3af 8000 	nop.w
 8001a48:	66666666 	.word	0x66666666
 8001a4c:	400a6666 	.word	0x400a6666
 8001a50:	33333333 	.word	0x33333333
 8001a54:	3fd33333 	.word	0x3fd33333
 8001a58:	200002dc 	.word	0x200002dc
 8001a5c:	40a00000 	.word	0x40a00000
 8001a60:	3f300000 	.word	0x3f300000
 8001a64:	40490000 	.word	0x40490000
 8001a68:	408f4000 	.word	0x408f4000
 8001a6c:	2000034c 	.word	0x2000034c
 8001a70:	40020800 	.word	0x40020800

08001a74 <StateMachine_fans_speed>:
};
uint16_t GPIO_PIN[8] = {
    GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7, GPIO_PIN_4,
    GPIO_PIN_5, GPIO_PIN_0, GPIO_PIN_1, GPIO_PIN_12
};
void StateMachine_fans_speed() {
 8001a74:	b570      	push	{r4, r5, r6, lr}
	stateMach.fans_cnt ++;
 8001a76:	4a24      	ldr	r2, [pc, #144]	@ (8001b08 <StateMachine_fans_speed+0x94>)
 8001a78:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	6293      	str	r3, [r2, #40]	@ 0x28
	for (int i = 0; i < 8; i++) {
 8001a7e:	2400      	movs	r4, #0
 8001a80:	e000      	b.n	8001a84 <StateMachine_fans_speed+0x10>
 8001a82:	3401      	adds	r4, #1
 8001a84:	2c07      	cmp	r4, #7
 8001a86:	dc1b      	bgt.n	8001ac0 <StateMachine_fans_speed+0x4c>
		stateMach.fans_current_level[i] = HAL_GPIO_ReadPin(GPIOx[i], GPIO_PIN[i]); // 替换为实际 IO 配置
 8001a88:	4b20      	ldr	r3, [pc, #128]	@ (8001b0c <StateMachine_fans_speed+0x98>)
 8001a8a:	f833 1014 	ldrh.w	r1, [r3, r4, lsl #1]
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <StateMachine_fans_speed+0x9c>)
 8001a90:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001a94:	f001 ff24 	bl	80038e0 <HAL_GPIO_ReadPin>
 8001a98:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <StateMachine_fans_speed+0x94>)
 8001a9a:	4423      	add	r3, r4
 8001a9c:	f883 0090 	strb.w	r0, [r3, #144]	@ 0x90
		// 检测电平变化
		if (stateMach.fans_current_level[i] != stateMach.fans_prev_level[i]) {
 8001aa0:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8001aa4:	4298      	cmp	r0, r3
 8001aa6:	d0ec      	beq.n	8001a82 <StateMachine_fans_speed+0xe>
			stateMach.fans_toggle[i]++;//如果电平变化，将对应的风扇切换计数器 fans_toggle[i] 增加 1。这个计数器用于记录风扇脉冲信号的次数，从而可以计算风扇的转速。
 8001aa8:	4b17      	ldr	r3, [pc, #92]	@ (8001b08 <StateMachine_fans_speed+0x94>)
 8001aaa:	f104 011a 	add.w	r1, r4, #26
 8001aae:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8001ab2:	3201      	adds	r2, #1
 8001ab4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			stateMach.fans_prev_level[i] = stateMach.fans_current_level[i]; // 更新电平状态
 8001ab8:	4423      	add	r3, r4
 8001aba:	f883 0088 	strb.w	r0, [r3, #136]	@ 0x88
 8001abe:	e7e0      	b.n	8001a82 <StateMachine_fans_speed+0xe>
		}
	}
	if(stateMach.fans_cnt >= 1000){
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <StateMachine_fans_speed+0x94>)
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001ac8:	d200      	bcs.n	8001acc <StateMachine_fans_speed+0x58>
		memcpy(stateMach.fans_speed, stateMach.fans_toggle, sizeof(stateMach.fans_speed));//表示风扇的速度 速度=（脉冲计数 × 60) / (测量时间 × 每转脉冲数)
		memset(stateMach.fans_toggle, 0, sizeof(stateMach.fans_toggle));
		memset(stateMach.fans_prev_level, 0, sizeof(stateMach.fans_prev_level));
		memset(stateMach.fans_current_level, 0, sizeof(stateMach.fans_current_level));
	}
}
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
		stateMach.fans_cnt = 0; //每隔一秒计算一次风扇的速度
 8001acc:	4d0e      	ldr	r5, [pc, #56]	@ (8001b08 <StateMachine_fans_speed+0x94>)
 8001ace:	2600      	movs	r6, #0
 8001ad0:	62ae      	str	r6, [r5, #40]	@ 0x28
		memcpy(stateMach.fans_speed, stateMach.fans_toggle, sizeof(stateMach.fans_speed));//表示风扇的速度 速度=（脉冲计数 × 60) / (测量时间 × 每转脉冲数)
 8001ad2:	f105 0448 	add.w	r4, r5, #72	@ 0x48
 8001ad6:	f105 0c68 	add.w	ip, r5, #104	@ 0x68
 8001ada:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001ade:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae0:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8001ae4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		memset(stateMach.fans_toggle, 0, sizeof(stateMach.fans_toggle));
 8001ae8:	2220      	movs	r2, #32
 8001aea:	4631      	mov	r1, r6
 8001aec:	f105 0068 	add.w	r0, r5, #104	@ 0x68
 8001af0:	f004 f8bd 	bl	8005c6e <memset>
		memset(stateMach.fans_prev_level, 0, sizeof(stateMach.fans_prev_level));
 8001af4:	f8c5 6088 	str.w	r6, [r5, #136]	@ 0x88
 8001af8:	f8c5 608c 	str.w	r6, [r5, #140]	@ 0x8c
		memset(stateMach.fans_current_level, 0, sizeof(stateMach.fans_current_level));
 8001afc:	f8c5 6090 	str.w	r6, [r5, #144]	@ 0x90
 8001b00:	f8c5 6094 	str.w	r6, [r5, #148]	@ 0x94
}
 8001b04:	e7e1      	b.n	8001aca <StateMachine_fans_speed+0x56>
 8001b06:	bf00      	nop
 8001b08:	2000034c 	.word	0x2000034c
 8001b0c:	2000000c 	.word	0x2000000c
 8001b10:	2000001c 	.word	0x2000001c

08001b14 <StateMachine_wait_stable>:

void StateMachine_wait_stable() {
    if(stateMach.wait_stable_cnt < 3000)
 8001b14:	4b04      	ldr	r3, [pc, #16]	@ (8001b28 <StateMachine_wait_stable+0x14>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d802      	bhi.n	8001b26 <StateMachine_wait_stable+0x12>
	    stateMach.wait_stable_cnt++;
 8001b20:	3301      	adds	r3, #1
 8001b22:	4a01      	ldr	r2, [pc, #4]	@ (8001b28 <StateMachine_wait_stable+0x14>)
 8001b24:	6213      	str	r3, [r2, #32]
}
 8001b26:	4770      	bx	lr
 8001b28:	2000034c 	.word	0x2000034c

08001b2c <Flash_ReadStateMachine>:
    memcpy(buffer, sm, sizeof(StateMachine));
    FlashDrv_Write(ADDR_FLASH_SECTOR_6, buffer, sizeof(StateMachine));
}

// 从 Flash 读取 StateMachine 结构体
void Flash_ReadStateMachine(StateMachine *sm) {
 8001b2c:	b510      	push	{r4, lr}
 8001b2e:	b0e2      	sub	sp, #392	@ 0x188
 8001b30:	4604      	mov	r4, r0
    uint8_t buffer[sizeof(StateMachine)];//创建与结构体大小相同的缓冲区
    FlashDrv_read(ADDR_FLASH_SECTOR_6, buffer, sizeof(StateMachine));// 从Flash扇区6读取数据到缓冲区
 8001b32:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001b36:	4669      	mov	r1, sp
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <Flash_ReadStateMachine+0x24>)
 8001b3a:	f000 fdc3 	bl	80026c4 <FlashDrv_read>
    memcpy(sm, buffer, sizeof(StateMachine));// 将缓冲区数据复制回结构体
 8001b3e:	f44f 72c4 	mov.w	r2, #392	@ 0x188
 8001b42:	4669      	mov	r1, sp
 8001b44:	4620      	mov	r0, r4
 8001b46:	f004 f912 	bl	8005d6e <memcpy>
}
 8001b4a:	b062      	add	sp, #392	@ 0x188
 8001b4c:	bd10      	pop	{r4, pc}
 8001b4e:	bf00      	nop
 8001b50:	08040000 	.word	0x08040000

08001b54 <StateMachine_Init>:
void StateMachine_Init(StateMachine *sm) {    //各种初始化：状态、计数器、电流、电压、PWM、风扇、蓝牙、oled
 8001b54:	b530      	push	{r4, r5, lr}
 8001b56:	b0e3      	sub	sp, #396	@ 0x18c
 8001b58:	4604      	mov	r4, r0
	Flash_ReadStateMachine(&temp);
 8001b5a:	4668      	mov	r0, sp
 8001b5c:	f7ff ffe6 	bl	8001b2c <Flash_ReadStateMachine>
	sm->currentState = WAITTING; // 根据你的状态机定义设置初始状态，目前为等待
 8001b60:	2300      	movs	r3, #0
 8001b62:	7023      	strb	r3, [r4, #0]
	sm->error =NO_ERROR;
 8001b64:	f884 317f 	strb.w	r3, [r4, #383]	@ 0x17f
	sm->counter = 0;
 8001b68:	6063      	str	r3, [r4, #4]
	sm->alive_counter = 0;
 8001b6a:	60a3      	str	r3, [r4, #8]
	sm->bt_counter = 0;
 8001b6c:	60e3      	str	r3, [r4, #12]
    sm->I_counter = 0;
 8001b6e:	6123      	str	r3, [r4, #16]
	sm->short_cnt = 10; // 根据你的需求设置初始值 短路保护
 8001b70:	220a      	movs	r2, #10
 8001b72:	6162      	str	r2, [r4, #20]
	sm->cap_cnt = 130;   // 根据你的需求设置初始值 电容充电
 8001b74:	2282      	movs	r2, #130	@ 0x82
 8001b76:	61a2      	str	r2, [r4, #24]
	sm->main_power_cnt = 2000;   
 8001b78:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b7c:	61e2      	str	r2, [r4, #28]
    sm->wait_stable_cnt = 0;
 8001b7e:	6223      	str	r3, [r4, #32]
	sm->auto_start_cnt = 0;
 8001b80:	6263      	str	r3, [r4, #36]	@ 0x24
	sm->fans_cnt = 0;
 8001b82:	62a3      	str	r3, [r4, #40]	@ 0x28
	sm->current = 0.0f;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62e3      	str	r3, [r4, #44]	@ 0x2c
    sm->maxcurrent = temp.maxcurrent;
 8001b88:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 8001b8c:	edc4 7a0c 	vstr	s15, [r4, #48]	@ 0x30
    if(sm->maxcurrent<0 || sm->maxcurrent>100 || isnan(sm->maxcurrent))
 8001b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	d40b      	bmi.n	8001bb2 <StateMachine_Init+0x5e>
 8001b9a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001c24 <StateMachine_Init+0xd0>
 8001b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba6:	dc04      	bgt.n	8001bb2 <StateMachine_Init+0x5e>
 8001ba8:	eef4 7a67 	vcmp.f32	s15, s15
 8001bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb0:	d701      	bvc.n	8001bb6 <StateMachine_Init+0x62>
    sm->maxcurrent = 100;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c28 <StateMachine_Init+0xd4>)
 8001bb4:	6323      	str	r3, [r4, #48]	@ 0x30
	sm->v_out = 0.0f;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	6363      	str	r3, [r4, #52]	@ 0x34
	sm->v_in = 0.0f;
 8001bba:	63a3      	str	r3, [r4, #56]	@ 0x38
	sm->duty_temp_1 = 0.0f; //占空比
 8001bbc:	6423      	str	r3, [r4, #64]	@ 0x40
	sm->duty_temp_2 = 0.0f;
 8001bbe:	6463      	str	r3, [r4, #68]	@ 0x44
	memset(sm->fans_speed, 0, sizeof(sm->fans_speed));
 8001bc0:	2520      	movs	r5, #32
 8001bc2:	462a      	mov	r2, r5
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f104 0048 	add.w	r0, r4, #72	@ 0x48
 8001bca:	f004 f850 	bl	8005c6e <memset>
	memset(sm->fans_toggle, 0, sizeof(sm->fans_toggle));
 8001bce:	462a      	mov	r2, r5
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001bd6:	f004 f84a 	bl	8005c6e <memset>
	memset(sm->fans_prev_level, 0, sizeof(sm->fans_prev_level));
 8001bda:	2500      	movs	r5, #0
 8001bdc:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
 8001be0:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
	memset(sm->fans_current_level, 0, sizeof(sm->fans_current_level));
 8001be4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8001be8:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
	memset(sm->bt_message, 0, sizeof(sm->bt_message));
 8001bec:	22c8      	movs	r2, #200	@ 0xc8
 8001bee:	4629      	mov	r1, r5
 8001bf0:	f104 0098 	add.w	r0, r4, #152	@ 0x98
 8001bf4:	f004 f83b 	bl	8005c6e <memset>
	memset(sm->oled_message, 0, sizeof(sm->oled_message));
 8001bf8:	221e      	movs	r2, #30
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	f204 1061 	addw	r0, r4, #353	@ 0x161
 8001c00:	f004 f835 	bl	8005c6e <memset>
    sm->alpha = 0.05f; //滤波系数
 8001c04:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <StateMachine_Init+0xd8>)
 8001c06:	f8c4 3180 	str.w	r3, [r4, #384]	@ 0x180
    sm->start_mode = temp.start_mode;
 8001c0a:	f89d 3184 	ldrb.w	r3, [sp, #388]	@ 0x184
 8001c0e:	f884 3184 	strb.w	r3, [r4, #388]	@ 0x184
    if(sm->start_mode<0 || sm->start_mode>1)
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d901      	bls.n	8001c1a <StateMachine_Init+0xc6>
    	sm->start_mode = AUTO_START; //自动启动
 8001c16:	f884 5184 	strb.w	r5, [r4, #388]	@ 0x184
    sm->remote_lock = 1;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	f884 3185 	strb.w	r3, [r4, #389]	@ 0x185
}
 8001c20:	b063      	add	sp, #396	@ 0x18c
 8001c22:	bd30      	pop	{r4, r5, pc}
 8001c24:	42c80000 	.word	0x42c80000
 8001c28:	42c80000 	.word	0x42c80000
 8001c2c:	3d4ccccd 	.word	0x3d4ccccd

08001c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c30:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2100      	movs	r1, #0
 8001c34:	9100      	str	r1, [sp, #0]
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <HAL_MspInit+0x34>)
 8001c38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c3e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c42:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c46:	9200      	str	r2, [sp, #0]
 8001c48:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	9101      	str	r1, [sp, #4]
 8001c4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c5e:	b002      	add	sp, #8
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <NMI_Handler>

08001c6a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler>

08001c6c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <MemManage_Handler>

08001c6e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6e:	e7fe      	b.n	8001c6e <BusFault_Handler>

08001c70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler>

08001c72 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c74:	4770      	bx	lr

08001c76 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	4770      	bx	lr

08001c78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c78:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */
  StateMachine_wait_stable();
 8001c7a:	f7ff ff4b 	bl	8001b14 <StateMachine_wait_stable>
  StateMachine_messure();
 8001c7e:	f7ff fd2f 	bl	80016e0 <StateMachine_messure>
  StateMachine_alive_test();
 8001c82:	f7ff fd07 	bl	8001694 <StateMachine_alive_test>
  StateMachine_vin_low_protect(); //先测试是否稳定，再做后续的操作
 8001c86:	f7ff fded 	bl	8001864 <StateMachine_vin_low_protect>
  Temp_PWM_Control();
 8001c8a:	f000 fa99 	bl	80021c0 <Temp_PWM_Control>
  // StateMachine_overcurrent_protect();
//  Temp_PWM_Control();
  if(stateMach.wait_stable_cnt>1000){
 8001c8e:	4b09      	ldr	r3, [pc, #36]	@ (8001cb4 <SysTick_Handler+0x3c>)
 8001c90:	6a1b      	ldr	r3, [r3, #32]
 8001c92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c96:	d802      	bhi.n	8001c9e <SysTick_Handler+0x26>
    StateMachine_remote_check();
    StateMachine_preload_protect();
    OLEDStatus_debounce_cnt_increase();
  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 ff7c 	bl	8002b94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bd08      	pop	{r3, pc}
    StateMachine_auto_start();
 8001c9e:	f7ff fdb9 	bl	8001814 <StateMachine_auto_start>
    StateMachine_BT_cnt_add();
 8001ca2:	f7ff fd83 	bl	80017ac <StateMachine_BT_cnt_add>
    StateMachine_remote_check();
 8001ca6:	f7ff fd8b 	bl	80017c0 <StateMachine_remote_check>
    StateMachine_preload_protect();
 8001caa:	f7ff fdf5 	bl	8001898 <StateMachine_preload_protect>
    OLEDStatus_debounce_cnt_increase();
 8001cae:	f000 feab 	bl	8002a08 <OLEDStatus_debounce_cnt_increase>
 8001cb2:	e7f1      	b.n	8001c98 <SysTick_Handler+0x20>
 8001cb4:	2000034c 	.word	0x2000034c

08001cb8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cb8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cba:	4802      	ldr	r0, [pc, #8]	@ (8001cc4 <TIM1_UP_TIM10_IRQHandler+0xc>)
 8001cbc:	f002 fb34 	bl	8004328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cc0:	bd08      	pop	{r3, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000640 	.word	0x20000640

08001cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cc8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cca:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <USART1_IRQHandler+0xc>)
 8001ccc:	f003 f8fe 	bl	8004ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cd0:	bd08      	pop	{r3, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000078c 	.word	0x2000078c

08001cd8 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001cd8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001cda:	4802      	ldr	r0, [pc, #8]	@ (8001ce4 <TIM3_IRQHandler+0xc>)
 8001cdc:	f002 fb24 	bl	8004328 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ce0:	bd08      	pop	{r3, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200005b0 	.word	0x200005b0

08001ce8 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001ce8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cea:	4802      	ldr	r0, [pc, #8]	@ (8001cf4 <USART3_IRQHandler+0xc>)
 8001cec:	f003 f8ee 	bl	8004ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001cf0:	bd08      	pop	{r3, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000748 	.word	0x20000748

08001cf8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001cf8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001cfa:	4802      	ldr	r0, [pc, #8]	@ (8001d04 <DMA2_Stream2_IRQHandler+0xc>)
 8001cfc:	f001 fc12 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001d00:	bd08      	pop	{r3, pc}
 8001d02:	bf00      	nop
 8001d04:	20000688 	.word	0x20000688

08001d08 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001d08:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d0a:	4802      	ldr	r0, [pc, #8]	@ (8001d14 <DMA2_Stream4_IRQHandler+0xc>)
 8001d0c:	f001 fc0a 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN 4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001d10:	bd08      	pop	{r3, pc}
 8001d12:	bf00      	nop
 8001d14:	20000234 	.word	0x20000234

08001d18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001d18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d1a:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <DMA2_Stream7_IRQHandler+0xc>)
 8001d1c:	f001 fc02 	bl	8003524 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001d20:	bd08      	pop	{r3, pc}
 8001d22:	bf00      	nop
 8001d24:	200006e8 	.word	0x200006e8

08001d28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //定时器回调函数
{
 8001d28:	b500      	push	{lr}
 8001d2a:	b083      	sub	sp, #12
//    static	int tim3_cnt=0;
    if(TIM1 == htim->Instance)
 8001d2c:	6803      	ldr	r3, [r0, #0]
 8001d2e:	4a2c      	ldr	r2, [pc, #176]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d005      	beq.n	8001d40 <HAL_TIM_PeriodElapsedCallback+0x18>
    {
      StateMachine_timer1_test();
     StateMachine_overcurrent_protect();
      StateMachine_fans_speed();
    }
    else if(htim->Instance == TIM3)
 8001d34:	4a2b      	ldr	r2, [pc, #172]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d009      	beq.n	8001d4e <HAL_TIM_PeriodElapsedCallback+0x26>
            }
        }

        // 其他定时任务...&& uart_tx_enabled == 1
    }
}
 8001d3a:	b003      	add	sp, #12
 8001d3c:	f85d fb04 	ldr.w	pc, [sp], #4
      StateMachine_timer1_test();
 8001d40:	f7ff fcb6 	bl	80016b0 <StateMachine_timer1_test>
     StateMachine_overcurrent_protect();
 8001d44:	f7ff fe2c 	bl	80019a0 <StateMachine_overcurrent_protect>
      StateMachine_fans_speed();
 8001d48:	f7ff fe94 	bl	8001a74 <StateMachine_fans_speed>
 8001d4c:	e7f5      	b.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x12>
        if (RX3_TimeOut > 0) {
 8001d4e:	4b26      	ldr	r3, [pc, #152]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0f1      	beq.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x12>
            if (--RX3_TimeOut == 0) {
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4a23      	ldr	r2, [pc, #140]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001d5c:	8013      	strh	r3, [r2, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1eb      	bne.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x12>
                if (RX3_Cnt > 0) {
 8001d62:	4b22      	ldr	r3, [pc, #136]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0e7      	beq.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x12>
                        result = parse_received_data_frame(
 8001d6a:	4b21      	ldr	r3, [pc, #132]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	2304      	movs	r3, #4
 8001d70:	4a20      	ldr	r2, [pc, #128]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d72:	4921      	ldr	r1, [pc, #132]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001d74:	4821      	ldr	r0, [pc, #132]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001d76:	f7ff f97c 	bl	8001072 <parse_received_data_frame>
 8001d7a:	4b21      	ldr	r3, [pc, #132]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001d7c:	6018      	str	r0, [r3, #0]
                    if (result == 0) {
 8001d7e:	b918      	cbnz	r0, 8001d88 <HAL_TIM_PeriodElapsedCallback+0x60>
                        if (user_data[0] == 0xDD && uart_tx_enabled == 1) {
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2bdd      	cmp	r3, #221	@ 0xdd
 8001d86:	d008      	beq.n	8001d9a <HAL_TIM_PeriodElapsedCallback+0x72>
                    RX3_Cnt = 0;
 8001d88:	4b18      	ldr	r3, [pc, #96]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	801a      	strh	r2, [r3, #0]
                    HAL_UART_Receive_IT(&huart3, &RX_data[RX3_Cnt], 1);
 8001d8e:	2201      	movs	r2, #1
 8001d90:	491a      	ldr	r1, [pc, #104]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001d92:	481c      	ldr	r0, [pc, #112]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001d94:	f003 f9f5 	bl	8005182 <HAL_UART_Receive_IT>
}
 8001d98:	e7cf      	b.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x12>
                        if (user_data[0] == 0xDD && uart_tx_enabled == 1) {
 8001d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d1f2      	bne.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x60>
                            for (i = 0; i < frame_length; i++)
 8001da2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	e00b      	b.n	8001dc2 <HAL_TIM_PeriodElapsedCallback+0x9a>
                            HAL_UART_Transmit(&huart3, &ES1642_frame[i], 1, HAL_MAX_DELAY);
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	2201      	movs	r2, #1
 8001db0:	4817      	ldr	r0, [pc, #92]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001db2:	4401      	add	r1, r0
 8001db4:	4813      	ldr	r0, [pc, #76]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001db6:	f002 ff94 	bl	8004ce2 <HAL_UART_Transmit>
                            for (i = 0; i < frame_length; i++)
 8001dba:	4a14      	ldr	r2, [pc, #80]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001dbc:	6813      	ldr	r3, [r2, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b12      	ldr	r3, [pc, #72]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001dc4:	6819      	ldr	r1, [r3, #0]
 8001dc6:	4b13      	ldr	r3, [pc, #76]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	428b      	cmp	r3, r1
 8001dcc:	dced      	bgt.n	8001daa <HAL_TIM_PeriodElapsedCallback+0x82>
                            chargeState = 1;
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
                            connect_timeout = 1000;
 8001dd4:	4b11      	ldr	r3, [pc, #68]	@ (8001e1c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001dd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001dda:	801a      	strh	r2, [r3, #0]
 8001ddc:	e7d4      	b.n	8001d88 <HAL_TIM_PeriodElapsedCallback+0x60>
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40000400 	.word	0x40000400
 8001de8:	200005ae 	.word	0x200005ae
 8001dec:	200005ac 	.word	0x200005ac
 8001df0:	20000500 	.word	0x20000500
 8001df4:	20000504 	.word	0x20000504
 8001df8:	20000508 	.word	0x20000508
 8001dfc:	20000510 	.word	0x20000510
 8001e00:	200004fc 	.word	0x200004fc
 8001e04:	20000748 	.word	0x20000748
 8001e08:	20000348 	.word	0x20000348
 8001e0c:	200004f8 	.word	0x200004f8
 8001e10:	200004d8 	.word	0x200004d8
 8001e14:	200004d7 	.word	0x200004d7
 8001e18:	200004d6 	.word	0x200004d6
 8001e1c:	200004d4 	.word	0x200004d4

08001e20 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{ //串口回调函数，接收完一个字节后继续下一个
 8001e20:	b508      	push	{r3, lr}
	if(huart->Instance == USART1){
 8001e22:	6803      	ldr	r3, [r0, #0]
 8001e24:	4a0d      	ldr	r2, [pc, #52]	@ (8001e5c <HAL_UART_RxCpltCallback+0x3c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d003      	beq.n	8001e32 <HAL_UART_RxCpltCallback+0x12>

	HAL_UART_Receive_IT(&huart1,(uint8_t *)stateMach.bt_rx_buffer, 1);
	}

	else if (huart->Instance == USART3) {
 8001e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <HAL_UART_RxCpltCallback+0x40>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d006      	beq.n	8001e3e <HAL_UART_RxCpltCallback+0x1e>
		RX3_TimeOut = RX3_TIMEOUT_SET;
		HAL_UART_Receive_IT(&huart3, &RX_data[RX3_Cnt], 1);


	}
}
 8001e30:	bd08      	pop	{r3, pc}
	HAL_UART_Receive_IT(&huart1,(uint8_t *)stateMach.bt_rx_buffer, 1);
 8001e32:	2201      	movs	r2, #1
 8001e34:	490b      	ldr	r1, [pc, #44]	@ (8001e64 <HAL_UART_RxCpltCallback+0x44>)
 8001e36:	480c      	ldr	r0, [pc, #48]	@ (8001e68 <HAL_UART_RxCpltCallback+0x48>)
 8001e38:	f003 f9a3 	bl	8005182 <HAL_UART_Receive_IT>
 8001e3c:	e7f8      	b.n	8001e30 <HAL_UART_RxCpltCallback+0x10>
		RX3_Cnt++;
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e6c <HAL_UART_RxCpltCallback+0x4c>)
 8001e40:	8813      	ldrh	r3, [r2, #0]
 8001e42:	3301      	adds	r3, #1
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	8013      	strh	r3, [r2, #0]
		RX3_TimeOut = RX3_TIMEOUT_SET;
 8001e48:	4a09      	ldr	r2, [pc, #36]	@ (8001e70 <HAL_UART_RxCpltCallback+0x50>)
 8001e4a:	2105      	movs	r1, #5
 8001e4c:	8011      	strh	r1, [r2, #0]
		HAL_UART_Receive_IT(&huart3, &RX_data[RX3_Cnt], 1);
 8001e4e:	2201      	movs	r2, #1
 8001e50:	4908      	ldr	r1, [pc, #32]	@ (8001e74 <HAL_UART_RxCpltCallback+0x54>)
 8001e52:	4419      	add	r1, r3
 8001e54:	4808      	ldr	r0, [pc, #32]	@ (8001e78 <HAL_UART_RxCpltCallback+0x58>)
 8001e56:	f003 f994 	bl	8005182 <HAL_UART_Receive_IT>
}
 8001e5a:	e7e9      	b.n	8001e30 <HAL_UART_RxCpltCallback+0x10>
 8001e5c:	40011000 	.word	0x40011000
 8001e60:	40004800 	.word	0x40004800
 8001e64:	200004ac 	.word	0x200004ac
 8001e68:	2000078c 	.word	0x2000078c
 8001e6c:	200005ac 	.word	0x200005ac
 8001e70:	200005ae 	.word	0x200005ae
 8001e74:	20000510 	.word	0x20000510
 8001e78:	20000748 	.word	0x20000748

08001e7c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	4770      	bx	lr

08001e80 <_kill>:

int _kill(int pid, int sig)
{
 8001e80:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e82:	f003 ff47 	bl	8005d14 <__errno>
 8001e86:	2316      	movs	r3, #22
 8001e88:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e8e:	bd08      	pop	{r3, pc}

08001e90 <_exit>:

void _exit (int status)
{
 8001e90:	b508      	push	{r3, lr}
  _kill(status, -1);
 8001e92:	f04f 31ff 	mov.w	r1, #4294967295
 8001e96:	f7ff fff3 	bl	8001e80 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9a:	e7fe      	b.n	8001e9a <_exit+0xa>

08001e9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	460c      	mov	r4, r1
 8001ea0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2500      	movs	r5, #0
 8001ea4:	e006      	b.n	8001eb4 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001ea6:	f3af 8000 	nop.w
 8001eaa:	4621      	mov	r1, r4
 8001eac:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb0:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 8001eb2:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb4:	42b5      	cmp	r5, r6
 8001eb6:	dbf6      	blt.n	8001ea6 <_read+0xa>
  }

  return len;
}
 8001eb8:	4630      	mov	r0, r6
 8001eba:	bd70      	pop	{r4, r5, r6, pc}

08001ebc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	2500      	movs	r5, #0
 8001ec4:	e004      	b.n	8001ed0 <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001ec6:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001eca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	3501      	adds	r5, #1
 8001ed0:	42b5      	cmp	r5, r6
 8001ed2:	dbf8      	blt.n	8001ec6 <_write+0xa>
  }
  return len;
}
 8001ed4:	4630      	mov	r0, r6
 8001ed6:	bd70      	pop	{r4, r5, r6, pc}

08001ed8 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	4770      	bx	lr

08001ede <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001ede:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee2:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	4770      	bx	lr

08001ee8 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001ee8:	2001      	movs	r0, #1
 8001eea:	4770      	bx	lr

08001eec <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001eec:	2000      	movs	r0, #0
 8001eee:	4770      	bx	lr

08001ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef0:	b510      	push	{r4, lr}
 8001ef2:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f28 <_sbrk+0x38>)
 8001ef6:	490d      	ldr	r1, [pc, #52]	@ (8001f2c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef8:	480d      	ldr	r0, [pc, #52]	@ (8001f30 <_sbrk+0x40>)
 8001efa:	6800      	ldr	r0, [r0, #0]
 8001efc:	b140      	cbz	r0, 8001f10 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efe:	480c      	ldr	r0, [pc, #48]	@ (8001f30 <_sbrk+0x40>)
 8001f00:	6800      	ldr	r0, [r0, #0]
 8001f02:	4403      	add	r3, r0
 8001f04:	1a52      	subs	r2, r2, r1
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d806      	bhi.n	8001f18 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001f0a:	4a09      	ldr	r2, [pc, #36]	@ (8001f30 <_sbrk+0x40>)
 8001f0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001f0e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001f10:	4807      	ldr	r0, [pc, #28]	@ (8001f30 <_sbrk+0x40>)
 8001f12:	4c08      	ldr	r4, [pc, #32]	@ (8001f34 <_sbrk+0x44>)
 8001f14:	6004      	str	r4, [r0, #0]
 8001f16:	e7f2      	b.n	8001efe <_sbrk+0xe>
    errno = ENOMEM;
 8001f18:	f003 fefc 	bl	8005d14 <__errno>
 8001f1c:	230c      	movs	r3, #12
 8001f1e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f20:	f04f 30ff 	mov.w	r0, #4294967295
 8001f24:	e7f3      	b.n	8001f0e <_sbrk+0x1e>
 8001f26:	bf00      	nop
 8001f28:	20020000 	.word	0x20020000
 8001f2c:	00000400 	.word	0x00000400
 8001f30:	20000590 	.word	0x20000590
 8001f34:	20000dc8 	.word	0x20000dc8

08001f38 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f38:	4a03      	ldr	r2, [pc, #12]	@ (8001f48 <SystemInit+0x10>)
 8001f3a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8001f3e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f42:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00

08001f4c <MX_TIM1_Init>:
//float r_pt=0.0;


/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f4c:	b500      	push	{lr}
 8001f4e:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f50:	2300      	movs	r3, #0
 8001f52:	9302      	str	r3, [sp, #8]
 8001f54:	9303      	str	r3, [sp, #12]
 8001f56:	9304      	str	r3, [sp, #16]
 8001f58:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f5a:	9300      	str	r3, [sp, #0]
 8001f5c:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f5e:	4816      	ldr	r0, [pc, #88]	@ (8001fb8 <MX_TIM1_Init+0x6c>)
 8001f60:	4a16      	ldr	r2, [pc, #88]	@ (8001fbc <MX_TIM1_Init+0x70>)
 8001f62:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 18;
 8001f64:	2212      	movs	r2, #18
 8001f66:	6042      	str	r2, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f68:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 999;
 8001f6a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6e:	60c2      	str	r2, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f72:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001f74:	2380      	movs	r3, #128	@ 0x80
 8001f76:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f78:	f002 faf8 	bl	800456c <HAL_TIM_Base_Init>
 8001f7c:	b990      	cbnz	r0, 8001fa4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f82:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f84:	a902      	add	r1, sp, #8
 8001f86:	480c      	ldr	r0, [pc, #48]	@ (8001fb8 <MX_TIM1_Init+0x6c>)
 8001f88:	f002 fbfb 	bl	8004782 <HAL_TIM_ConfigClockSource>
 8001f8c:	b968      	cbnz	r0, 8001faa <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f92:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f94:	4669      	mov	r1, sp
 8001f96:	4808      	ldr	r0, [pc, #32]	@ (8001fb8 <MX_TIM1_Init+0x6c>)
 8001f98:	f002 fd04 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f9c:	b940      	cbnz	r0, 8001fb0 <MX_TIM1_Init+0x64>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001f9e:	b007      	add	sp, #28
 8001fa0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001fa4:	f7ff fa32 	bl	800140c <Error_Handler>
 8001fa8:	e7e9      	b.n	8001f7e <MX_TIM1_Init+0x32>
    Error_Handler();
 8001faa:	f7ff fa2f 	bl	800140c <Error_Handler>
 8001fae:	e7ee      	b.n	8001f8e <MX_TIM1_Init+0x42>
    Error_Handler();
 8001fb0:	f7ff fa2c 	bl	800140c <Error_Handler>
}
 8001fb4:	e7f3      	b.n	8001f9e <MX_TIM1_Init+0x52>
 8001fb6:	bf00      	nop
 8001fb8:	20000640 	.word	0x20000640
 8001fbc:	40010000 	.word	0x40010000

08001fc0 <MX_TIM3_Init>:
  HAL_TIM_MspPostInit(&htim2);

}

void MX_TIM3_Init(void)
{
 8001fc0:	b500      	push	{lr}
 8001fc2:	b087      	sub	sp, #28

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	9303      	str	r3, [sp, #12]
 8001fca:	9304      	str	r3, [sp, #16]
 8001fcc:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fce:	9300      	str	r3, [sp, #0]
 8001fd0:	9301      	str	r3, [sp, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd2:	4815      	ldr	r0, [pc, #84]	@ (8002028 <MX_TIM3_Init+0x68>)
 8001fd4:	4a15      	ldr	r2, [pc, #84]	@ (800202c <MX_TIM3_Init+0x6c>)
 8001fd6:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 179;
 8001fd8:	22b3      	movs	r2, #179	@ 0xb3
 8001fda:	6042      	str	r2, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fdc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 999;
 8001fde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fe2:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe4:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fe6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fe8:	f002 fac0 	bl	800456c <HAL_TIM_Base_Init>
 8001fec:	b990      	cbnz	r0, 8002014 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ff2:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ff4:	a902      	add	r1, sp, #8
 8001ff6:	480c      	ldr	r0, [pc, #48]	@ (8002028 <MX_TIM3_Init+0x68>)
 8001ff8:	f002 fbc3 	bl	8004782 <HAL_TIM_ConfigClockSource>
 8001ffc:	b968      	cbnz	r0, 800201a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002002:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002004:	4669      	mov	r1, sp
 8002006:	4808      	ldr	r0, [pc, #32]	@ (8002028 <MX_TIM3_Init+0x68>)
 8002008:	f002 fccc 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 800200c:	b940      	cbnz	r0, 8002020 <MX_TIM3_Init+0x60>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800200e:	b007      	add	sp, #28
 8002010:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8002014:	f7ff f9fa 	bl	800140c <Error_Handler>
 8002018:	e7e9      	b.n	8001fee <MX_TIM3_Init+0x2e>
    Error_Handler();
 800201a:	f7ff f9f7 	bl	800140c <Error_Handler>
 800201e:	e7ee      	b.n	8001ffe <MX_TIM3_Init+0x3e>
    Error_Handler();
 8002020:	f7ff f9f4 	bl	800140c <Error_Handler>
}
 8002024:	e7f3      	b.n	800200e <MX_TIM3_Init+0x4e>
 8002026:	bf00      	nop
 8002028:	200005b0 	.word	0x200005b0
 800202c:	40000400 	.word	0x40000400

08002030 <HAL_TIM_Base_MspInit>:



void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002030:	b500      	push	{lr}
 8002032:	b083      	sub	sp, #12

  if(tim_baseHandle->Instance==TIM1)
 8002034:	6803      	ldr	r3, [r0, #0]
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <HAL_TIM_Base_MspInit+0x68>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d005      	beq.n	8002048 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM3)
 800203c:	4a17      	ldr	r2, [pc, #92]	@ (800209c <HAL_TIM_Base_MspInit+0x6c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d016      	beq.n	8002070 <HAL_TIM_Base_MspInit+0x40>
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
   /* USER CODE BEGIN TIM3_MspInit 1 */

   /* USER CODE END TIM3_MspInit 1 */
   }
}
 8002042:	b003      	add	sp, #12
 8002044:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002048:	2200      	movs	r2, #0
 800204a:	9200      	str	r2, [sp, #0]
 800204c:	4b14      	ldr	r3, [pc, #80]	@ (80020a0 <HAL_TIM_Base_MspInit+0x70>)
 800204e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002050:	f041 0101 	orr.w	r1, r1, #1
 8002054:	6459      	str	r1, [r3, #68]	@ 0x44
 8002056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8002060:	2101      	movs	r1, #1
 8002062:	2019      	movs	r0, #25
 8002064:	f001 f8b8 	bl	80031d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002068:	2019      	movs	r0, #25
 800206a:	f001 f8c5 	bl	80031f8 <HAL_NVIC_EnableIRQ>
 800206e:	e7e8      	b.n	8002042 <HAL_TIM_Base_MspInit+0x12>
     __HAL_RCC_TIM3_CLK_ENABLE();
 8002070:	2100      	movs	r1, #0
 8002072:	9101      	str	r1, [sp, #4]
 8002074:	4b0a      	ldr	r3, [pc, #40]	@ (80020a0 <HAL_TIM_Base_MspInit+0x70>)
 8002076:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002078:	f042 0202 	orr.w	r2, r2, #2
 800207c:	641a      	str	r2, [r3, #64]	@ 0x40
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f003 0302 	and.w	r3, r3, #2
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	9b01      	ldr	r3, [sp, #4]
     HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002088:	460a      	mov	r2, r1
 800208a:	201d      	movs	r0, #29
 800208c:	f001 f8a4 	bl	80031d8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002090:	201d      	movs	r0, #29
 8002092:	f001 f8b1 	bl	80031f8 <HAL_NVIC_EnableIRQ>
}
 8002096:	e7d4      	b.n	8002042 <HAL_TIM_Base_MspInit+0x12>
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40023800 	.word	0x40023800

080020a4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM2)
 80020a4:	6803      	ldr	r3, [r0, #0]
 80020a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020aa:	d000      	beq.n	80020ae <HAL_TIM_PWM_MspInit+0xa>
 80020ac:	4770      	bx	lr
{
 80020ae:	b082      	sub	sp, #8
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020b0:	2300      	movs	r3, #0
 80020b2:	9301      	str	r3, [sp, #4]
 80020b4:	4b05      	ldr	r3, [pc, #20]	@ (80020cc <HAL_TIM_PWM_MspInit+0x28>)
 80020b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80020b8:	f042 0201 	orr.w	r2, r2, #1
 80020bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80020be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	9301      	str	r3, [sp, #4]
 80020c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020c8:	b002      	add	sp, #8
 80020ca:	4770      	bx	lr
 80020cc:	40023800 	.word	0x40023800

080020d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020d0:	b500      	push	{lr}
 80020d2:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	2300      	movs	r3, #0
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	9302      	str	r3, [sp, #8]
 80020da:	9303      	str	r3, [sp, #12]
 80020dc:	9304      	str	r3, [sp, #16]
 80020de:	9305      	str	r3, [sp, #20]
  if(timHandle->Instance==TIM2)
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020e6:	d002      	beq.n	80020ee <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80020e8:	b007      	add	sp, #28
 80020ea:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002120 <HAL_TIM_MspPostInit+0x50>)
 80020f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020f6:	f042 0202 	orr.w	r2, r2, #2
 80020fa:	631a      	str	r2, [r3, #48]	@ 0x30
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8002106:	f240 4304 	movw	r3, #1028	@ 0x404
 800210a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210c:	2302      	movs	r3, #2
 800210e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002110:	2301      	movs	r3, #1
 8002112:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002114:	a901      	add	r1, sp, #4
 8002116:	4803      	ldr	r0, [pc, #12]	@ (8002124 <HAL_TIM_MspPostInit+0x54>)
 8002118:	f001 faf2 	bl	8003700 <HAL_GPIO_Init>
}
 800211c:	e7e4      	b.n	80020e8 <HAL_TIM_MspPostInit+0x18>
 800211e:	bf00      	nop
 8002120:	40023800 	.word	0x40023800
 8002124:	40020400 	.word	0x40020400

08002128 <MX_TIM2_Init>:
{
 8002128:	b500      	push	{lr}
 800212a:	b08b      	sub	sp, #44	@ 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	2300      	movs	r3, #0
 800212e:	9308      	str	r3, [sp, #32]
 8002130:	9309      	str	r3, [sp, #36]	@ 0x24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002132:	9301      	str	r3, [sp, #4]
 8002134:	9302      	str	r3, [sp, #8]
 8002136:	9303      	str	r3, [sp, #12]
 8002138:	9304      	str	r3, [sp, #16]
 800213a:	9305      	str	r3, [sp, #20]
 800213c:	9306      	str	r3, [sp, #24]
 800213e:	9307      	str	r3, [sp, #28]
  htim2.Instance = TIM2;
 8002140:	481d      	ldr	r0, [pc, #116]	@ (80021b8 <MX_TIM2_Init+0x90>)
 8002142:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002146:	6002      	str	r2, [r0, #0]
  htim2.Init.Prescaler = 9-1;
 8002148:	2208      	movs	r2, #8
 800214a:	6042      	str	r2, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214c:	6083      	str	r3, [r0, #8]
  htim2.Init.Period = 500;
 800214e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002152:	60c2      	str	r2, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	6103      	str	r3, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002158:	f002 fa34 	bl	80045c4 <HAL_TIM_PWM_Init>
 800215c:	bb00      	cbnz	r0, 80021a0 <MX_TIM2_Init+0x78>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800215e:	2300      	movs	r3, #0
 8002160:	9308      	str	r3, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002162:	9309      	str	r3, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002164:	a908      	add	r1, sp, #32
 8002166:	4814      	ldr	r0, [pc, #80]	@ (80021b8 <MX_TIM2_Init+0x90>)
 8002168:	f002 fc1c 	bl	80049a4 <HAL_TIMEx_MasterConfigSynchronization>
 800216c:	b9d8      	cbnz	r0, 80021a6 <MX_TIM2_Init+0x7e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800216e:	2360      	movs	r3, #96	@ 0x60
 8002170:	9301      	str	r3, [sp, #4]
  sConfigOC.Pulse = 250;
 8002172:	23fa      	movs	r3, #250	@ 0xfa
 8002174:	9302      	str	r3, [sp, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002176:	2300      	movs	r3, #0
 8002178:	9303      	str	r3, [sp, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800217a:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800217c:	2208      	movs	r2, #8
 800217e:	a901      	add	r1, sp, #4
 8002180:	480d      	ldr	r0, [pc, #52]	@ (80021b8 <MX_TIM2_Init+0x90>)
 8002182:	f002 fa83 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8002186:	b988      	cbnz	r0, 80021ac <MX_TIM2_Init+0x84>
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002188:	220c      	movs	r2, #12
 800218a:	a901      	add	r1, sp, #4
 800218c:	480a      	ldr	r0, [pc, #40]	@ (80021b8 <MX_TIM2_Init+0x90>)
 800218e:	f002 fa7d 	bl	800468c <HAL_TIM_PWM_ConfigChannel>
 8002192:	b970      	cbnz	r0, 80021b2 <MX_TIM2_Init+0x8a>
  HAL_TIM_MspPostInit(&htim2);
 8002194:	4808      	ldr	r0, [pc, #32]	@ (80021b8 <MX_TIM2_Init+0x90>)
 8002196:	f7ff ff9b 	bl	80020d0 <HAL_TIM_MspPostInit>
}
 800219a:	b00b      	add	sp, #44	@ 0x2c
 800219c:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80021a0:	f7ff f934 	bl	800140c <Error_Handler>
 80021a4:	e7db      	b.n	800215e <MX_TIM2_Init+0x36>
    Error_Handler();
 80021a6:	f7ff f931 	bl	800140c <Error_Handler>
 80021aa:	e7e0      	b.n	800216e <MX_TIM2_Init+0x46>
    Error_Handler();
 80021ac:	f7ff f92e 	bl	800140c <Error_Handler>
 80021b0:	e7ea      	b.n	8002188 <MX_TIM2_Init+0x60>
    Error_Handler();
 80021b2:	f7ff f92b 	bl	800140c <Error_Handler>
 80021b6:	e7ed      	b.n	8002194 <MX_TIM2_Init+0x6c>
 80021b8:	200005f8 	.word	0x200005f8
 80021bc:	00000000 	.word	0x00000000

080021c0 <Temp_PWM_Control>:

/* USER CODE BEGIN 1 */


void Temp_PWM_Control(void)
{
 80021c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021c4:	ed2d 8b04 	vpush	{d8-d9}
//	 uint16_t temperature_raw=(AdcBuf[3]<<8) | AdcBuf[4];
//	 temperature_raw &= 0x0FFF;
//	 v1=(double)temperature_raw *3.3/4095.0;
//	 double r=(v1 * 1000.0) / (3.3 - v1);
//	 temp1=(r - 100.0) / 0.385;
	 temperature_raw = (AdcBuf[3]<<8 | AdcBuf[4]) * 2.0485/ 4096 / 2;
 80021c8:	4bb5      	ldr	r3, [pc, #724]	@ (80024a0 <Temp_PWM_Control+0x2e0>)
 80021ca:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 80021ce:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80021d2:	ea48 2009 	orr.w	r0, r8, r9, lsl #8
 80021d6:	f7fe f9c5 	bl	8000564 <__aeabi_i2d>
 80021da:	a3a3      	add	r3, pc, #652	@ (adr r3, 8002468 <Temp_PWM_Control+0x2a8>)
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f7fe fa2a 	bl	8000638 <__aeabi_dmul>
 80021e4:	2200      	movs	r2, #0
 80021e6:	4baf      	ldr	r3, [pc, #700]	@ (80024a4 <Temp_PWM_Control+0x2e4>)
 80021e8:	f7fe fa26 	bl	8000638 <__aeabi_dmul>
 80021ec:	2200      	movs	r2, #0
 80021ee:	4bae      	ldr	r3, [pc, #696]	@ (80024a8 <Temp_PWM_Control+0x2e8>)
 80021f0:	f7fe fa22 	bl	8000638 <__aeabi_dmul>
 80021f4:	f7fe fcf8 	bl	8000be8 <__aeabi_d2f>
 80021f8:	ee08 0a10 	vmov	s16, r0
 80021fc:	4bab      	ldr	r3, [pc, #684]	@ (80024ac <Temp_PWM_Control+0x2ec>)
 80021fe:	6018      	str	r0, [r3, #0]
//	 temperature_raw = (AdcBuf[3]<<8 | AdcBuf[4]);
	 motor_temperature = motor_temperature * 0.7 + 0.3 *(((temperature_raw * 1000 / (3.3 - temperature_raw))) - 100)/0.385;
 8002200:	f8df a2d8 	ldr.w	sl, [pc, #728]	@ 80024dc <Temp_PWM_Control+0x31c>
 8002204:	f8da 0000 	ldr.w	r0, [sl]
 8002208:	f7fe f9be 	bl	8000588 <__aeabi_f2d>
 800220c:	a398      	add	r3, pc, #608	@ (adr r3, 8002470 <Temp_PWM_Control+0x2b0>)
 800220e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002212:	f7fe fa11 	bl	8000638 <__aeabi_dmul>
 8002216:	4604      	mov	r4, r0
 8002218:	460d      	mov	r5, r1
 800221a:	ed9f 9aa5 	vldr	s18, [pc, #660]	@ 80024b0 <Temp_PWM_Control+0x2f0>
 800221e:	ee68 7a09 	vmul.f32	s15, s16, s18
 8002222:	ee17 0a90 	vmov	r0, s15
 8002226:	f7fe f9af 	bl	8000588 <__aeabi_f2d>
 800222a:	4606      	mov	r6, r0
 800222c:	460f      	mov	r7, r1
 800222e:	ee18 0a10 	vmov	r0, s16
 8002232:	f7fe f9a9 	bl	8000588 <__aeabi_f2d>
 8002236:	4602      	mov	r2, r0
 8002238:	460b      	mov	r3, r1
 800223a:	a18f      	add	r1, pc, #572	@ (adr r1, 8002478 <Temp_PWM_Control+0x2b8>)
 800223c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002240:	f7fe f842 	bl	80002c8 <__aeabi_dsub>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4630      	mov	r0, r6
 800224a:	4639      	mov	r1, r7
 800224c:	f7fe fb1e 	bl	800088c <__aeabi_ddiv>
 8002250:	2200      	movs	r2, #0
 8002252:	4b98      	ldr	r3, [pc, #608]	@ (80024b4 <Temp_PWM_Control+0x2f4>)
 8002254:	f7fe f838 	bl	80002c8 <__aeabi_dsub>
 8002258:	a389      	add	r3, pc, #548	@ (adr r3, 8002480 <Temp_PWM_Control+0x2c0>)
 800225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800225e:	f7fe f9eb 	bl	8000638 <__aeabi_dmul>
 8002262:	a389      	add	r3, pc, #548	@ (adr r3, 8002488 <Temp_PWM_Control+0x2c8>)
 8002264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002268:	f7fe fb10 	bl	800088c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4620      	mov	r0, r4
 8002272:	4629      	mov	r1, r5
 8002274:	f7fe f82a 	bl	80002cc <__adddf3>
 8002278:	f7fe fcb6 	bl	8000be8 <__aeabi_d2f>
 800227c:	f8ca 0000 	str.w	r0, [sl]
	 v1 = (double)AdcBuf[3] /4096*3.3;
 8002280:	4648      	mov	r0, r9
 8002282:	f7fe f95f 	bl	8000544 <__aeabi_ui2d>
 8002286:	2200      	movs	r2, #0
 8002288:	4b86      	ldr	r3, [pc, #536]	@ (80024a4 <Temp_PWM_Control+0x2e4>)
 800228a:	f7fe f9d5 	bl	8000638 <__aeabi_dmul>
 800228e:	a37a      	add	r3, pc, #488	@ (adr r3, 8002478 <Temp_PWM_Control+0x2b8>)
 8002290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002294:	f7fe f9d0 	bl	8000638 <__aeabi_dmul>
 8002298:	f7fe fca6 	bl	8000be8 <__aeabi_d2f>
 800229c:	ee08 0a10 	vmov	s16, r0
 80022a0:	4b85      	ldr	r3, [pc, #532]	@ (80024b8 <Temp_PWM_Control+0x2f8>)
 80022a2:	6018      	str	r0, [r3, #0]
	 v2 = (double)AdcBuf[4] /4096*3.3;
 80022a4:	4640      	mov	r0, r8
 80022a6:	f7fe f94d 	bl	8000544 <__aeabi_ui2d>
 80022aa:	2200      	movs	r2, #0
 80022ac:	4b7d      	ldr	r3, [pc, #500]	@ (80024a4 <Temp_PWM_Control+0x2e4>)
 80022ae:	f7fe f9c3 	bl	8000638 <__aeabi_dmul>
 80022b2:	a371      	add	r3, pc, #452	@ (adr r3, 8002478 <Temp_PWM_Control+0x2b8>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe f9be 	bl	8000638 <__aeabi_dmul>
 80022bc:	f7fe fc94 	bl	8000be8 <__aeabi_d2f>
 80022c0:	ee08 0a90 	vmov	s17, r0
 80022c4:	4b7d      	ldr	r3, [pc, #500]	@ (80024bc <Temp_PWM_Control+0x2fc>)
 80022c6:	6018      	str	r0, [r3, #0]
	 temp1=temp1* 0.9999+0.0001*(((v2*1000/(3.3-v2)))-100)/0.385;
 80022c8:	f8df 8214 	ldr.w	r8, [pc, #532]	@ 80024e0 <Temp_PWM_Control+0x320>
 80022cc:	f8d8 0000 	ldr.w	r0, [r8]
 80022d0:	f7fe f95a 	bl	8000588 <__aeabi_f2d>
 80022d4:	a36e      	add	r3, pc, #440	@ (adr r3, 8002490 <Temp_PWM_Control+0x2d0>)
 80022d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022da:	f7fe f9ad 	bl	8000638 <__aeabi_dmul>
 80022de:	4604      	mov	r4, r0
 80022e0:	460d      	mov	r5, r1
 80022e2:	ee68 7a89 	vmul.f32	s15, s17, s18
 80022e6:	ee17 0a90 	vmov	r0, s15
 80022ea:	f7fe f94d 	bl	8000588 <__aeabi_f2d>
 80022ee:	4606      	mov	r6, r0
 80022f0:	460f      	mov	r7, r1
 80022f2:	ee18 0a90 	vmov	r0, s17
 80022f6:	f7fe f947 	bl	8000588 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	a15e      	add	r1, pc, #376	@ (adr r1, 8002478 <Temp_PWM_Control+0x2b8>)
 8002300:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002304:	f7fd ffe0 	bl	80002c8 <__aeabi_dsub>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4630      	mov	r0, r6
 800230e:	4639      	mov	r1, r7
 8002310:	f7fe fabc 	bl	800088c <__aeabi_ddiv>
 8002314:	2200      	movs	r2, #0
 8002316:	4b67      	ldr	r3, [pc, #412]	@ (80024b4 <Temp_PWM_Control+0x2f4>)
 8002318:	f7fd ffd6 	bl	80002c8 <__aeabi_dsub>
 800231c:	a35e      	add	r3, pc, #376	@ (adr r3, 8002498 <Temp_PWM_Control+0x2d8>)
 800231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002322:	f7fe f989 	bl	8000638 <__aeabi_dmul>
 8002326:	a358      	add	r3, pc, #352	@ (adr r3, 8002488 <Temp_PWM_Control+0x2c8>)
 8002328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232c:	f7fe faae 	bl	800088c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4620      	mov	r0, r4
 8002336:	4629      	mov	r1, r5
 8002338:	f7fd ffc8 	bl	80002cc <__adddf3>
 800233c:	f7fe fc54 	bl	8000be8 <__aeabi_d2f>
 8002340:	ee08 0a90 	vmov	s17, r0
 8002344:	f8c8 0000 	str.w	r0, [r8]
	 temp2=temp2* 0.9999+0.0001*(((v1*1000/(3.3-v1)))-100)/0.385;
 8002348:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80024e4 <Temp_PWM_Control+0x324>
 800234c:	f8d8 0000 	ldr.w	r0, [r8]
 8002350:	f7fe f91a 	bl	8000588 <__aeabi_f2d>
 8002354:	a34e      	add	r3, pc, #312	@ (adr r3, 8002490 <Temp_PWM_Control+0x2d0>)
 8002356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235a:	f7fe f96d 	bl	8000638 <__aeabi_dmul>
 800235e:	4604      	mov	r4, r0
 8002360:	460d      	mov	r5, r1
 8002362:	ee68 7a09 	vmul.f32	s15, s16, s18
 8002366:	ee17 0a90 	vmov	r0, s15
 800236a:	f7fe f90d 	bl	8000588 <__aeabi_f2d>
 800236e:	4606      	mov	r6, r0
 8002370:	460f      	mov	r7, r1
 8002372:	ee18 0a10 	vmov	r0, s16
 8002376:	f7fe f907 	bl	8000588 <__aeabi_f2d>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	a13e      	add	r1, pc, #248	@ (adr r1, 8002478 <Temp_PWM_Control+0x2b8>)
 8002380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002384:	f7fd ffa0 	bl	80002c8 <__aeabi_dsub>
 8002388:	4602      	mov	r2, r0
 800238a:	460b      	mov	r3, r1
 800238c:	4630      	mov	r0, r6
 800238e:	4639      	mov	r1, r7
 8002390:	f7fe fa7c 	bl	800088c <__aeabi_ddiv>
 8002394:	2200      	movs	r2, #0
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <Temp_PWM_Control+0x2f4>)
 8002398:	f7fd ff96 	bl	80002c8 <__aeabi_dsub>
 800239c:	a33e      	add	r3, pc, #248	@ (adr r3, 8002498 <Temp_PWM_Control+0x2d8>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fe f949 	bl	8000638 <__aeabi_dmul>
 80023a6:	a338      	add	r3, pc, #224	@ (adr r3, 8002488 <Temp_PWM_Control+0x2c8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe fa6e 	bl	800088c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff88 	bl	80002cc <__adddf3>
 80023bc:	f7fe fc14 	bl	8000be8 <__aeabi_d2f>
 80023c0:	ee07 0a90 	vmov	s15, r0
 80023c4:	f8c8 0000 	str.w	r0, [r8]
	 float temp = temp1 > temp2 ? temp1 : temp2;
 80023c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80023cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d0:	dd01      	ble.n	80023d6 <Temp_PWM_Control+0x216>
 80023d2:	eef0 7a68 	vmov.f32	s15, s17

	 if(temp< 33.0) {
 80023d6:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80024c0 <Temp_PWM_Control+0x300>
 80023da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	d508      	bpl.n	80023f6 <Temp_PWM_Control+0x236>
	     duty1 = 0;
 80023e4:	2300      	movs	r3, #0
 80023e6:	4a37      	ldr	r2, [pc, #220]	@ (80024c4 <Temp_PWM_Control+0x304>)
 80023e8:	6013      	str	r3, [r2, #0]
	     duty2 = 0;
 80023ea:	4a37      	ldr	r2, [pc, #220]	@ (80024c8 <Temp_PWM_Control+0x308>)
 80023ec:	6013      	str	r3, [r2, #0]





}
 80023ee:	ecbd 8b04 	vpop	{d8-d9}
 80023f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	 else if(temp < TEMP_THRESHOLD) {
 80023f6:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80024cc <Temp_PWM_Control+0x30c>
 80023fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002402:	d4f4      	bmi.n	80023ee <Temp_PWM_Control+0x22e>
	 else if(temp < 42.0) {
 8002404:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80024d0 <Temp_PWM_Control+0x310>
 8002408:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002410:	d505      	bpl.n	800241e <Temp_PWM_Control+0x25e>
	     duty1 = 250;
 8002412:	23fa      	movs	r3, #250	@ 0xfa
 8002414:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <Temp_PWM_Control+0x304>)
 8002416:	6013      	str	r3, [r2, #0]
	     duty2 = 250;// 低速运行
 8002418:	4a2b      	ldr	r2, [pc, #172]	@ (80024c8 <Temp_PWM_Control+0x308>)
 800241a:	6013      	str	r3, [r2, #0]
 800241c:	e7e7      	b.n	80023ee <Temp_PWM_Control+0x22e>
	 else if(temp < 45.5) {
 800241e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80024d4 <Temp_PWM_Control+0x314>
 8002422:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242a:	d506      	bpl.n	800243a <Temp_PWM_Control+0x27a>
	     duty1 = 375;
 800242c:	f240 1377 	movw	r3, #375	@ 0x177
 8002430:	4a24      	ldr	r2, [pc, #144]	@ (80024c4 <Temp_PWM_Control+0x304>)
 8002432:	6013      	str	r3, [r2, #0]
	     duty2 = 375;// 中速运行
 8002434:	4a24      	ldr	r2, [pc, #144]	@ (80024c8 <Temp_PWM_Control+0x308>)
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e7d9      	b.n	80023ee <Temp_PWM_Control+0x22e>
	 else if(temp < 54.0) {
 800243a:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80024d8 <Temp_PWM_Control+0x318>
 800243e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002446:	d506      	bpl.n	8002456 <Temp_PWM_Control+0x296>
	     duty1 = 499;
 8002448:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800244c:	4a1d      	ldr	r2, [pc, #116]	@ (80024c4 <Temp_PWM_Control+0x304>)
 800244e:	6013      	str	r3, [r2, #0]
	     duty2 = 499;// 高速运行
 8002450:	4a1d      	ldr	r2, [pc, #116]	@ (80024c8 <Temp_PWM_Control+0x308>)
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	e7cb      	b.n	80023ee <Temp_PWM_Control+0x22e>
	     duty1 = 499;
 8002456:	f240 13f3 	movw	r3, #499	@ 0x1f3
 800245a:	4a1a      	ldr	r2, [pc, #104]	@ (80024c4 <Temp_PWM_Control+0x304>)
 800245c:	6013      	str	r3, [r2, #0]
	     duty2 = 499;// 全速运行
 800245e:	4a1a      	ldr	r2, [pc, #104]	@ (80024c8 <Temp_PWM_Control+0x308>)
 8002460:	6013      	str	r3, [r2, #0]
}
 8002462:	e7c4      	b.n	80023ee <Temp_PWM_Control+0x22e>
 8002464:	f3af 8000 	nop.w
 8002468:	f7ced917 	.word	0xf7ced917
 800246c:	40006353 	.word	0x40006353
 8002470:	66666666 	.word	0x66666666
 8002474:	3fe66666 	.word	0x3fe66666
 8002478:	66666666 	.word	0x66666666
 800247c:	400a6666 	.word	0x400a6666
 8002480:	33333333 	.word	0x33333333
 8002484:	3fd33333 	.word	0x3fd33333
 8002488:	0a3d70a4 	.word	0x0a3d70a4
 800248c:	3fd8a3d7 	.word	0x3fd8a3d7
 8002490:	48e8a71e 	.word	0x48e8a71e
 8002494:	3fefff2e 	.word	0x3fefff2e
 8002498:	eb1c432d 	.word	0xeb1c432d
 800249c:	3f1a36e2 	.word	0x3f1a36e2
 80024a0:	200002dc 	.word	0x200002dc
 80024a4:	3f300000 	.word	0x3f300000
 80024a8:	3fe00000 	.word	0x3fe00000
 80024ac:	200005a4 	.word	0x200005a4
 80024b0:	447a0000 	.word	0x447a0000
 80024b4:	40590000 	.word	0x40590000
 80024b8:	200005a0 	.word	0x200005a0
 80024bc:	2000059c 	.word	0x2000059c
 80024c0:	42040000 	.word	0x42040000
 80024c4:	20000598 	.word	0x20000598
 80024c8:	20000594 	.word	0x20000594
 80024cc:	420c0000 	.word	0x420c0000
 80024d0:	42280000 	.word	0x42280000
 80024d4:	42360000 	.word	0x42360000
 80024d8:	42580000 	.word	0x42580000
 80024dc:	200005a8 	.word	0x200005a8
 80024e0:	20000044 	.word	0x20000044
 80024e4:	20000040 	.word	0x20000040

080024e8 <MX_USART1_UART_Init>:


/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024e8:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024ea:	480a      	ldr	r0, [pc, #40]	@ (8002514 <MX_USART1_UART_Init+0x2c>)
 80024ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002518 <MX_USART1_UART_Init+0x30>)
 80024ee:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80024f0:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 80024f4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024f6:	2300      	movs	r3, #0
 80024f8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024fa:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024fc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024fe:	220c      	movs	r2, #12
 8002500:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002502:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002504:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002506:	f002 fbbd 	bl	8004c84 <HAL_UART_Init>
 800250a:	b900      	cbnz	r0, 800250e <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800250c:	bd08      	pop	{r3, pc}
    Error_Handler();
 800250e:	f7fe ff7d 	bl	800140c <Error_Handler>
}
 8002512:	e7fb      	b.n	800250c <MX_USART1_UART_Init+0x24>
 8002514:	2000078c 	.word	0x2000078c
 8002518:	40011000 	.word	0x40011000

0800251c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800251c:	b508      	push	{r3, lr}
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800251e:	480c      	ldr	r0, [pc, #48]	@ (8002550 <MX_USART3_UART_Init+0x34>)
 8002520:	4b0c      	ldr	r3, [pc, #48]	@ (8002554 <MX_USART3_UART_Init+0x38>)
 8002522:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 8002524:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002528:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_9B;
 800252a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800252e:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002530:	2300      	movs	r3, #0
 8002532:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002538:	6102      	str	r2, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800253a:	220c      	movs	r2, #12
 800253c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002540:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002542:	f002 fb9f 	bl	8004c84 <HAL_UART_Init>
 8002546:	b900      	cbnz	r0, 800254a <MX_USART3_UART_Init+0x2e>
  }  //这个判断可以先注释      等同于HAL_UART_Init(&huart3);
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002548:	bd08      	pop	{r3, pc}
    Error_Handler();
 800254a:	f7fe ff5f 	bl	800140c <Error_Handler>
}
 800254e:	e7fb      	b.n	8002548 <MX_USART3_UART_Init+0x2c>
 8002550:	20000748 	.word	0x20000748
 8002554:	40004800 	.word	0x40004800

08002558 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002558:	b530      	push	{r4, r5, lr}
 800255a:	b08b      	sub	sp, #44	@ 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255c:	2300      	movs	r3, #0
 800255e:	9305      	str	r3, [sp, #20]
 8002560:	9306      	str	r3, [sp, #24]
 8002562:	9307      	str	r3, [sp, #28]
 8002564:	9308      	str	r3, [sp, #32]
 8002566:	9309      	str	r3, [sp, #36]	@ 0x24
  if(uartHandle->Instance==USART1)
 8002568:	6803      	ldr	r3, [r0, #0]
 800256a:	4a4d      	ldr	r2, [pc, #308]	@ (80026a0 <HAL_UART_MspInit+0x148>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d004      	beq.n	800257a <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
//  GPIO_InitTypeDef GPIO_InitStruct = {0};
  else if(uartHandle->Instance==USART3)
 8002570:	4a4c      	ldr	r2, [pc, #304]	@ (80026a4 <HAL_UART_MspInit+0x14c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d068      	beq.n	8002648 <HAL_UART_MspInit+0xf0>

        /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  }
}
 8002576:	b00b      	add	sp, #44	@ 0x2c
 8002578:	bd30      	pop	{r4, r5, pc}
 800257a:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800257c:	2500      	movs	r5, #0
 800257e:	9501      	str	r5, [sp, #4]
 8002580:	4b49      	ldr	r3, [pc, #292]	@ (80026a8 <HAL_UART_MspInit+0x150>)
 8002582:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002584:	f042 0210 	orr.w	r2, r2, #16
 8002588:	645a      	str	r2, [r3, #68]	@ 0x44
 800258a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800258c:	f002 0210 	and.w	r2, r2, #16
 8002590:	9201      	str	r2, [sp, #4]
 8002592:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002594:	9502      	str	r5, [sp, #8]
 8002596:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002598:	f042 0201 	orr.w	r2, r2, #1
 800259c:	631a      	str	r2, [r3, #48]	@ 0x30
 800259e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	9302      	str	r3, [sp, #8]
 80025a6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80025ac:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ae:	2302      	movs	r3, #2
 80025b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b6:	2303      	movs	r3, #3
 80025b8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025ba:	2307      	movs	r3, #7
 80025bc:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025be:	a905      	add	r1, sp, #20
 80025c0:	483a      	ldr	r0, [pc, #232]	@ (80026ac <HAL_UART_MspInit+0x154>)
 80025c2:	f001 f89d 	bl	8003700 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025c6:	483a      	ldr	r0, [pc, #232]	@ (80026b0 <HAL_UART_MspInit+0x158>)
 80025c8:	4b3a      	ldr	r3, [pc, #232]	@ (80026b4 <HAL_UART_MspInit+0x15c>)
 80025ca:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80025d0:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025d2:	2340      	movs	r3, #64	@ 0x40
 80025d4:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d6:	60c5      	str	r5, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025dc:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025de:	6145      	str	r5, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e0:	6185      	str	r5, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025e2:	61c5      	str	r5, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80025e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025e8:	6203      	str	r3, [r0, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025ea:	6245      	str	r5, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025ec:	f000 fea2 	bl	8003334 <HAL_DMA_Init>
 80025f0:	bb20      	cbnz	r0, 800263c <HAL_UART_MspInit+0xe4>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025f2:	4b2f      	ldr	r3, [pc, #188]	@ (80026b0 <HAL_UART_MspInit+0x158>)
 80025f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80025f6:	639c      	str	r4, [r3, #56]	@ 0x38
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80025f8:	482f      	ldr	r0, [pc, #188]	@ (80026b8 <HAL_UART_MspInit+0x160>)
 80025fa:	4b30      	ldr	r3, [pc, #192]	@ (80026bc <HAL_UART_MspInit+0x164>)
 80025fc:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80025fe:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002602:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002604:	2300      	movs	r3, #0
 8002606:	6083      	str	r3, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002608:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800260a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800260e:	6102      	str	r2, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002610:	6143      	str	r3, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002612:	6183      	str	r3, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002614:	61c3      	str	r3, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002616:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800261a:	6202      	str	r2, [r0, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800261c:	6243      	str	r3, [r0, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800261e:	f000 fe89 	bl	8003334 <HAL_DMA_Init>
 8002622:	b970      	cbnz	r0, 8002642 <HAL_UART_MspInit+0xea>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002624:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_UART_MspInit+0x160>)
 8002626:	63a3      	str	r3, [r4, #56]	@ 0x38
 8002628:	639c      	str	r4, [r3, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 15, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	210f      	movs	r1, #15
 800262e:	2025      	movs	r0, #37	@ 0x25
 8002630:	f000 fdd2 	bl	80031d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002634:	2025      	movs	r0, #37	@ 0x25
 8002636:	f000 fddf 	bl	80031f8 <HAL_NVIC_EnableIRQ>
 800263a:	e79c      	b.n	8002576 <HAL_UART_MspInit+0x1e>
      Error_Handler();
 800263c:	f7fe fee6 	bl	800140c <Error_Handler>
 8002640:	e7d7      	b.n	80025f2 <HAL_UART_MspInit+0x9a>
      Error_Handler();
 8002642:	f7fe fee3 	bl	800140c <Error_Handler>
 8002646:	e7ed      	b.n	8002624 <HAL_UART_MspInit+0xcc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002648:	2400      	movs	r4, #0
 800264a:	9403      	str	r4, [sp, #12]
 800264c:	4b16      	ldr	r3, [pc, #88]	@ (80026a8 <HAL_UART_MspInit+0x150>)
 800264e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002650:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8002654:	641a      	str	r2, [r3, #64]	@ 0x40
 8002656:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002658:	f402 2280 	and.w	r2, r2, #262144	@ 0x40000
 800265c:	9203      	str	r2, [sp, #12]
 800265e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002660:	9404      	str	r4, [sp, #16]
 8002662:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002664:	f042 0204 	orr.w	r2, r2, #4
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
 800266a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	9304      	str	r3, [sp, #16]
 8002672:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002674:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002678:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267e:	2303      	movs	r3, #3
 8002680:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002682:	2307      	movs	r3, #7
 8002684:	9309      	str	r3, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002686:	a905      	add	r1, sp, #20
 8002688:	480d      	ldr	r0, [pc, #52]	@ (80026c0 <HAL_UART_MspInit+0x168>)
 800268a:	f001 f839 	bl	8003700 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 1);
 800268e:	2201      	movs	r2, #1
 8002690:	4621      	mov	r1, r4
 8002692:	2027      	movs	r0, #39	@ 0x27
 8002694:	f000 fda0 	bl	80031d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002698:	2027      	movs	r0, #39	@ 0x27
 800269a:	f000 fdad 	bl	80031f8 <HAL_NVIC_EnableIRQ>
}
 800269e:	e76a      	b.n	8002576 <HAL_UART_MspInit+0x1e>
 80026a0:	40011000 	.word	0x40011000
 80026a4:	40004800 	.word	0x40004800
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40020000 	.word	0x40020000
 80026b0:	200006e8 	.word	0x200006e8
 80026b4:	400264b8 	.word	0x400264b8
 80026b8:	20000688 	.word	0x20000688
 80026bc:	40026440 	.word	0x40026440
 80026c0:	40020800 	.word	0x40020800

080026c4 <FlashDrv_read>:

uint32_t FlashDrv_read(uint32_t Addr, uint8_t *source, uint32_t Length)
{
    int i;

    for ( i = 0; i < Length; i++)
 80026c4:	2300      	movs	r3, #0
 80026c6:	e004      	b.n	80026d2 <FlashDrv_read+0xe>
    {
        source[i] =  *(__IO uint8_t *)(Addr + i);// 从Flash地址(Addr + i)读取1字节数据到目标缓冲区
 80026c8:	f813 c000 	ldrb.w	ip, [r3, r0]
 80026cc:	f801 c003 	strb.w	ip, [r1, r3]
    for ( i = 0; i < Length; i++)
 80026d0:	3301      	adds	r3, #1
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d3f8      	bcc.n	80026c8 <FlashDrv_read+0x4>
    }

    return  1;
}
 80026d6:	2001      	movs	r0, #1
 80026d8:	4770      	bx	lr
	...

080026dc <delay_init>:
{

#ifdef OS_CRITICAL_METHOD 	
	u32 reload;
#endif
	fac_us=SystemCoreClock/8000000;	
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <delay_init+0x24>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <delay_init+0x28>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	f3c3 5347 	ubfx	r3, r3, #21, #8
 80026ea:	4a07      	ldr	r2, [pc, #28]	@ (8002708 <delay_init+0x2c>)
 80026ec:	7013      	strb	r3, [r2, #0]
	fac_ms=1000/OS_TICKS_PER_SEC;  
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	
	SysTick->LOAD=reload; 		
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;   	   
#else
	fac_ms=(u16)fac_us*1000;   
 80026ee:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 80026f2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80026f6:	00da      	lsls	r2, r3, #3
 80026f8:	4b04      	ldr	r3, [pc, #16]	@ (800270c <delay_init+0x30>)
 80026fa:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	2000003c 	.word	0x2000003c
 8002704:	431bde83 	.word	0x431bde83
 8002708:	200007d2 	.word	0x200007d2
 800270c:	200007d0 	.word	0x200007d0

08002710 <delay_ms>:
	while(temp&0x01&&!(temp&(1<<16))); 
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       
	SysTick->VAL =0X00;       	 
}
void delay_ms(u16 nms)
{	 		  	  
 8002710:	b508      	push	{r3, lr}
	HAL_Delay(nms);
 8002712:	f000 fa51 	bl	8002bb8 <HAL_Delay>
} 
 8002716:	bd08      	pop	{r3, pc}

08002718 <I2C_Start>:
	while(t--);
}

//��ʼ�ź�
void I2C_Start(void)
{
 8002718:	b510      	push	{r4, lr}
	OLED_SDA_Set();
 800271a:	4c0b      	ldr	r4, [pc, #44]	@ (8002748 <I2C_Start+0x30>)
 800271c:	2201      	movs	r2, #1
 800271e:	2110      	movs	r1, #16
 8002720:	4620      	mov	r0, r4
 8002722:	f001 f8e4 	bl	80038ee <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 8002726:	2201      	movs	r2, #1
 8002728:	2108      	movs	r1, #8
 800272a:	4620      	mov	r0, r4
 800272c:	f001 f8df 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
	OLED_SDA_Clr();
 8002730:	2200      	movs	r2, #0
 8002732:	2110      	movs	r1, #16
 8002734:	4620      	mov	r0, r4
 8002736:	f001 f8da 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
	OLED_SCL_Clr();
 800273a:	2200      	movs	r2, #0
 800273c:	2108      	movs	r1, #8
 800273e:	4620      	mov	r0, r4
 8002740:	f001 f8d5 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
}
 8002744:	bd10      	pop	{r4, pc}
 8002746:	bf00      	nop
 8002748:	40020400 	.word	0x40020400

0800274c <I2C_Stop>:

//�����ź�
void I2C_Stop(void)
{
 800274c:	b510      	push	{r4, lr}
	OLED_SDA_Clr();
 800274e:	4c08      	ldr	r4, [pc, #32]	@ (8002770 <I2C_Stop+0x24>)
 8002750:	2200      	movs	r2, #0
 8002752:	2110      	movs	r1, #16
 8002754:	4620      	mov	r0, r4
 8002756:	f001 f8ca 	bl	80038ee <HAL_GPIO_WritePin>
	OLED_SCL_Set();
 800275a:	2201      	movs	r2, #1
 800275c:	2108      	movs	r1, #8
 800275e:	4620      	mov	r0, r4
 8002760:	f001 f8c5 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
	OLED_SDA_Set();
 8002764:	2201      	movs	r2, #1
 8002766:	2110      	movs	r1, #16
 8002768:	4620      	mov	r0, r4
 800276a:	f001 f8c0 	bl	80038ee <HAL_GPIO_WritePin>
}
 800276e:	bd10      	pop	{r4, pc}
 8002770:	40020400 	.word	0x40020400

08002774 <I2C_WaitAck>:

//�ȴ��ź���Ӧ
void I2C_WaitAck(void) //�������źŵĵ�ƽ
{
 8002774:	b510      	push	{r4, lr}
	OLED_SDA_Set();
 8002776:	4c08      	ldr	r4, [pc, #32]	@ (8002798 <I2C_WaitAck+0x24>)
 8002778:	2201      	movs	r2, #1
 800277a:	2110      	movs	r1, #16
 800277c:	4620      	mov	r0, r4
 800277e:	f001 f8b6 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
	OLED_SCL_Set();
 8002782:	2201      	movs	r2, #1
 8002784:	2108      	movs	r1, #8
 8002786:	4620      	mov	r0, r4
 8002788:	f001 f8b1 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
	OLED_SCL_Clr();
 800278c:	2200      	movs	r2, #0
 800278e:	2108      	movs	r1, #8
 8002790:	4620      	mov	r0, r4
 8002792:	f001 f8ac 	bl	80038ee <HAL_GPIO_WritePin>
	IIC_delay();
}
 8002796:	bd10      	pop	{r4, pc}
 8002798:	40020400 	.word	0x40020400

0800279c <Send_Byte>:

//д��һ���ֽ�
void Send_Byte(u8 dat)
{
 800279c:	b570      	push	{r4, r5, r6, lr}
 800279e:	4604      	mov	r4, r0
	u8 i;
	for(i=0;i<8;i++)
 80027a0:	2500      	movs	r5, #0
 80027a2:	e013      	b.n	80027cc <Send_Byte+0x30>
		{
			OLED_SDA_Set();
    }
		else
		{
			OLED_SDA_Clr();
 80027a4:	2200      	movs	r2, #0
 80027a6:	2110      	movs	r1, #16
 80027a8:	480e      	ldr	r0, [pc, #56]	@ (80027e4 <Send_Byte+0x48>)
 80027aa:	f001 f8a0 	bl	80038ee <HAL_GPIO_WritePin>
    }
		IIC_delay();
		OLED_SCL_Set();
 80027ae:	4e0d      	ldr	r6, [pc, #52]	@ (80027e4 <Send_Byte+0x48>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	2108      	movs	r1, #8
 80027b4:	4630      	mov	r0, r6
 80027b6:	f001 f89a 	bl	80038ee <HAL_GPIO_WritePin>
		IIC_delay();
		OLED_SCL_Clr();//��ʱ���ź�����Ϊ�͵�ƽ
 80027ba:	2200      	movs	r2, #0
 80027bc:	2108      	movs	r1, #8
 80027be:	4630      	mov	r0, r6
 80027c0:	f001 f895 	bl	80038ee <HAL_GPIO_WritePin>
		dat<<=1;
 80027c4:	0064      	lsls	r4, r4, #1
 80027c6:	b2e4      	uxtb	r4, r4
	for(i=0;i<8;i++)
 80027c8:	3501      	adds	r5, #1
 80027ca:	b2ed      	uxtb	r5, r5
 80027cc:	2d07      	cmp	r5, #7
 80027ce:	d808      	bhi.n	80027e2 <Send_Byte+0x46>
		if(dat&0x80)//��dat��8λ�����λ����д��
 80027d0:	f014 0f80 	tst.w	r4, #128	@ 0x80
 80027d4:	d0e6      	beq.n	80027a4 <Send_Byte+0x8>
			OLED_SDA_Set();
 80027d6:	2201      	movs	r2, #1
 80027d8:	2110      	movs	r1, #16
 80027da:	4802      	ldr	r0, [pc, #8]	@ (80027e4 <Send_Byte+0x48>)
 80027dc:	f001 f887 	bl	80038ee <HAL_GPIO_WritePin>
 80027e0:	e7e5      	b.n	80027ae <Send_Byte+0x12>
  }
}
 80027e2:	bd70      	pop	{r4, r5, r6, pc}
 80027e4:	40020400 	.word	0x40020400

080027e8 <OLED_WR_Byte>:

//����һ���ֽ�
//mode:����/�����־ 0,��ʾ����;1,��ʾ����;
void OLED_WR_Byte(u8 dat,u8 mode)
{
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	460d      	mov	r5, r1
	I2C_Start();
 80027ee:	f7ff ff93 	bl	8002718 <I2C_Start>
	Send_Byte(0x78);
 80027f2:	2078      	movs	r0, #120	@ 0x78
 80027f4:	f7ff ffd2 	bl	800279c <Send_Byte>
	I2C_WaitAck();
 80027f8:	f7ff ffbc 	bl	8002774 <I2C_WaitAck>
	if(mode){Send_Byte(0x40);}
 80027fc:	b165      	cbz	r5, 8002818 <OLED_WR_Byte+0x30>
 80027fe:	2040      	movs	r0, #64	@ 0x40
 8002800:	f7ff ffcc 	bl	800279c <Send_Byte>
  else{Send_Byte(0x00);}
	I2C_WaitAck();
 8002804:	f7ff ffb6 	bl	8002774 <I2C_WaitAck>
	Send_Byte(dat);
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff ffc7 	bl	800279c <Send_Byte>
	I2C_WaitAck();
 800280e:	f7ff ffb1 	bl	8002774 <I2C_WaitAck>
	I2C_Stop();
 8002812:	f7ff ff9b 	bl	800274c <I2C_Stop>
}
 8002816:	bd38      	pop	{r3, r4, r5, pc}
  else{Send_Byte(0x00);}
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff ffbf 	bl	800279c <Send_Byte>
 800281e:	e7f1      	b.n	8002804 <OLED_WR_Byte+0x1c>

08002820 <OLED_ColorTurn>:
{
 8002820:	b510      	push	{r4, lr}
	if(i==0)
 8002822:	4604      	mov	r4, r0
 8002824:	b110      	cbz	r0, 800282c <OLED_ColorTurn+0xc>
	if(i==1)
 8002826:	2c01      	cmp	r4, #1
 8002828:	d005      	beq.n	8002836 <OLED_ColorTurn+0x16>
}
 800282a:	bd10      	pop	{r4, pc}
			OLED_WR_Byte(0xA6,OLED_CMD);//������ʾ
 800282c:	2100      	movs	r1, #0
 800282e:	20a6      	movs	r0, #166	@ 0xa6
 8002830:	f7ff ffda 	bl	80027e8 <OLED_WR_Byte>
 8002834:	e7f7      	b.n	8002826 <OLED_ColorTurn+0x6>
			OLED_WR_Byte(0xA7,OLED_CMD);//��ɫ��ʾ
 8002836:	2100      	movs	r1, #0
 8002838:	20a7      	movs	r0, #167	@ 0xa7
 800283a:	f7ff ffd5 	bl	80027e8 <OLED_WR_Byte>
}
 800283e:	e7f4      	b.n	800282a <OLED_ColorTurn+0xa>

08002840 <OLED_DisplayTurn>:
{
 8002840:	b510      	push	{r4, lr}
	if(i==0)
 8002842:	4604      	mov	r4, r0
 8002844:	b110      	cbz	r0, 800284c <OLED_DisplayTurn+0xc>
	if(i==1)
 8002846:	2c01      	cmp	r4, #1
 8002848:	d009      	beq.n	800285e <OLED_DisplayTurn+0x1e>
}
 800284a:	bd10      	pop	{r4, pc}
			OLED_WR_Byte(0xC8,OLED_CMD);//������ʾ
 800284c:	2100      	movs	r1, #0
 800284e:	20c8      	movs	r0, #200	@ 0xc8
 8002850:	f7ff ffca 	bl	80027e8 <OLED_WR_Byte>
			OLED_WR_Byte(0xA1,OLED_CMD);
 8002854:	2100      	movs	r1, #0
 8002856:	20a1      	movs	r0, #161	@ 0xa1
 8002858:	f7ff ffc6 	bl	80027e8 <OLED_WR_Byte>
 800285c:	e7f3      	b.n	8002846 <OLED_DisplayTurn+0x6>
			OLED_WR_Byte(0xC0,OLED_CMD);//��ת��ʾ
 800285e:	2100      	movs	r1, #0
 8002860:	20c0      	movs	r0, #192	@ 0xc0
 8002862:	f7ff ffc1 	bl	80027e8 <OLED_WR_Byte>
			OLED_WR_Byte(0xA0,OLED_CMD);
 8002866:	2100      	movs	r1, #0
 8002868:	20a0      	movs	r0, #160	@ 0xa0
 800286a:	f7ff ffbd 	bl	80027e8 <OLED_WR_Byte>
}
 800286e:	e7ec      	b.n	800284a <OLED_DisplayTurn+0xa>

08002870 <OLED_Refresh>:
	OLED_WR_Byte(0xAE,OLED_CMD);//�ر���Ļ
}

//�����Դ浽OLED	
void OLED_Refresh(void)
{
 8002870:	b538      	push	{r3, r4, r5, lr}
	u8 i,n;
	for(i=0;i<8;i++)
 8002872:	2500      	movs	r5, #0
 8002874:	e010      	b.n	8002898 <OLED_Refresh+0x28>
		I2C_WaitAck();
		Send_Byte(0x40);
		I2C_WaitAck();
		for(n=0;n<128;n++)
		{
			Send_Byte(OLED_GRAM[n][i]);
 8002876:	4b18      	ldr	r3, [pc, #96]	@ (80028d8 <OLED_Refresh+0x68>)
 8002878:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800287c:	5d58      	ldrb	r0, [r3, r5]
 800287e:	f7ff ff8d 	bl	800279c <Send_Byte>
			I2C_WaitAck();
 8002882:	f7ff ff77 	bl	8002774 <I2C_WaitAck>
		for(n=0;n<128;n++)
 8002886:	3401      	adds	r4, #1
 8002888:	b2e4      	uxtb	r4, r4
 800288a:	f014 0f80 	tst.w	r4, #128	@ 0x80
 800288e:	d0f2      	beq.n	8002876 <OLED_Refresh+0x6>
		}
		I2C_Stop();
 8002890:	f7ff ff5c 	bl	800274c <I2C_Stop>
	for(i=0;i<8;i++)
 8002894:	3501      	adds	r5, #1
 8002896:	b2ed      	uxtb	r5, r5
 8002898:	2d07      	cmp	r5, #7
 800289a:	d81b      	bhi.n	80028d4 <OLED_Refresh+0x64>
		OLED_WR_Byte(0xb0+i,OLED_CMD); //��������ʼ��ַ
 800289c:	f1a5 0050 	sub.w	r0, r5, #80	@ 0x50
 80028a0:	2100      	movs	r1, #0
 80028a2:	b2c0      	uxtb	r0, r0
 80028a4:	f7ff ffa0 	bl	80027e8 <OLED_WR_Byte>
		OLED_WR_Byte(0x00,OLED_CMD);   //���õ�����ʼ��ַ
 80028a8:	2100      	movs	r1, #0
 80028aa:	4608      	mov	r0, r1
 80028ac:	f7ff ff9c 	bl	80027e8 <OLED_WR_Byte>
		OLED_WR_Byte(0x10,OLED_CMD);   //���ø�����ʼ��ַ
 80028b0:	2100      	movs	r1, #0
 80028b2:	2010      	movs	r0, #16
 80028b4:	f7ff ff98 	bl	80027e8 <OLED_WR_Byte>
		I2C_Start();
 80028b8:	f7ff ff2e 	bl	8002718 <I2C_Start>
		Send_Byte(0x78);
 80028bc:	2078      	movs	r0, #120	@ 0x78
 80028be:	f7ff ff6d 	bl	800279c <Send_Byte>
		I2C_WaitAck();
 80028c2:	f7ff ff57 	bl	8002774 <I2C_WaitAck>
		Send_Byte(0x40);
 80028c6:	2040      	movs	r0, #64	@ 0x40
 80028c8:	f7ff ff68 	bl	800279c <Send_Byte>
		I2C_WaitAck();
 80028cc:	f7ff ff52 	bl	8002774 <I2C_WaitAck>
		for(n=0;n<128;n++)
 80028d0:	2400      	movs	r4, #0
 80028d2:	e7da      	b.n	800288a <OLED_Refresh+0x1a>
  }
}
 80028d4:	bd38      	pop	{r3, r4, r5, pc}
 80028d6:	bf00      	nop
 80028d8:	200007d4 	.word	0x200007d4

080028dc <OLED_Clear>:
//��������
void OLED_Clear(void)
{
 80028dc:	b508      	push	{r3, lr}
	u8 i,n;
	for(i=0;i<8;i++)
 80028de:	2000      	movs	r0, #0
 80028e0:	e00b      	b.n	80028fa <OLED_Clear+0x1e>
	{
	   for(n=0;n<128;n++)
			{
			 OLED_GRAM[n][i]=0;//�����������
 80028e2:	4a09      	ldr	r2, [pc, #36]	@ (8002908 <OLED_Clear+0x2c>)
 80028e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80028e8:	2100      	movs	r1, #0
 80028ea:	5411      	strb	r1, [r2, r0]
	   for(n=0;n<128;n++)
 80028ec:	3301      	adds	r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80028f4:	d0f5      	beq.n	80028e2 <OLED_Clear+0x6>
	for(i=0;i<8;i++)
 80028f6:	3001      	adds	r0, #1
 80028f8:	b2c0      	uxtb	r0, r0
 80028fa:	2807      	cmp	r0, #7
 80028fc:	d801      	bhi.n	8002902 <OLED_Clear+0x26>
	   for(n=0;n<128;n++)
 80028fe:	2300      	movs	r3, #0
 8002900:	e7f6      	b.n	80028f0 <OLED_Clear+0x14>
			}
  }
	OLED_Refresh();//������ʾ
 8002902:	f7ff ffb5 	bl	8002870 <OLED_Refresh>
}
 8002906:	bd08      	pop	{r3, pc}
 8002908:	200007d4 	.word	0x200007d4

0800290c <OLED_Init>:
     }
	 }
}
//OLED�ĳ�ʼ��
void OLED_Init(void)
{
 800290c:	b508      	push	{r3, lr}

	OLED_RES_Clr();
	delay_ms(200);
 800290e:	20c8      	movs	r0, #200	@ 0xc8
 8002910:	f7ff fefe 	bl	8002710 <delay_ms>
	OLED_RES_Set();
	
	OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
 8002914:	2100      	movs	r1, #0
 8002916:	20ae      	movs	r0, #174	@ 0xae
 8002918:	f7ff ff66 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
 800291c:	2100      	movs	r1, #0
 800291e:	4608      	mov	r0, r1
 8002920:	f7ff ff62 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
 8002924:	2100      	movs	r1, #0
 8002926:	2010      	movs	r0, #16
 8002928:	f7ff ff5e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
 800292c:	2100      	movs	r1, #0
 800292e:	2040      	movs	r0, #64	@ 0x40
 8002930:	f7ff ff5a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
 8002934:	2100      	movs	r1, #0
 8002936:	2081      	movs	r0, #129	@ 0x81
 8002938:	f7ff ff56 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
 800293c:	2100      	movs	r1, #0
 800293e:	20cf      	movs	r0, #207	@ 0xcf
 8002940:	f7ff ff52 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0���ҷ��� 0xa1����
 8002944:	2100      	movs	r1, #0
 8002946:	20a1      	movs	r0, #161	@ 0xa1
 8002948:	f7ff ff4e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0���·��� 0xc8����
 800294c:	2100      	movs	r1, #0
 800294e:	20c8      	movs	r0, #200	@ 0xc8
 8002950:	f7ff ff4a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
 8002954:	2100      	movs	r1, #0
 8002956:	20a6      	movs	r0, #166	@ 0xa6
 8002958:	f7ff ff46 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
 800295c:	2100      	movs	r1, #0
 800295e:	20a8      	movs	r0, #168	@ 0xa8
 8002960:	f7ff ff42 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
 8002964:	2100      	movs	r1, #0
 8002966:	203f      	movs	r0, #63	@ 0x3f
 8002968:	f7ff ff3e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
 800296c:	2100      	movs	r1, #0
 800296e:	20d3      	movs	r0, #211	@ 0xd3
 8002970:	f7ff ff3a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x00,OLED_CMD);//-not offset
 8002974:	2100      	movs	r1, #0
 8002976:	4608      	mov	r0, r1
 8002978:	f7ff ff36 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
 800297c:	2100      	movs	r1, #0
 800297e:	20d5      	movs	r0, #213	@ 0xd5
 8002980:	f7ff ff32 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
 8002984:	2100      	movs	r1, #0
 8002986:	2080      	movs	r0, #128	@ 0x80
 8002988:	f7ff ff2e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
 800298c:	2100      	movs	r1, #0
 800298e:	20d9      	movs	r0, #217	@ 0xd9
 8002990:	f7ff ff2a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
 8002994:	2100      	movs	r1, #0
 8002996:	20f1      	movs	r0, #241	@ 0xf1
 8002998:	f7ff ff26 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
 800299c:	2100      	movs	r1, #0
 800299e:	20da      	movs	r0, #218	@ 0xda
 80029a0:	f7ff ff22 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD);
 80029a4:	2100      	movs	r1, #0
 80029a6:	2012      	movs	r0, #18
 80029a8:	f7ff ff1e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
 80029ac:	2100      	movs	r1, #0
 80029ae:	20db      	movs	r0, #219	@ 0xdb
 80029b0:	f7ff ff1a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);//Set VCOM Deselect Level
 80029b4:	2100      	movs	r1, #0
 80029b6:	2030      	movs	r0, #48	@ 0x30
 80029b8:	f7ff ff16 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
 80029bc:	2100      	movs	r1, #0
 80029be:	2020      	movs	r0, #32
 80029c0:	f7ff ff12 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD);//
 80029c4:	2100      	movs	r1, #0
 80029c6:	2002      	movs	r0, #2
 80029c8:	f7ff ff0e 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
 80029cc:	2100      	movs	r1, #0
 80029ce:	208d      	movs	r0, #141	@ 0x8d
 80029d0:	f7ff ff0a 	bl	80027e8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
 80029d4:	2100      	movs	r1, #0
 80029d6:	2014      	movs	r0, #20
 80029d8:	f7ff ff06 	bl	80027e8 <OLED_WR_Byte>
	OLED_Clear();
 80029dc:	f7ff ff7e 	bl	80028dc <OLED_Clear>
	OLED_WR_Byte(0xAF,OLED_CMD);
 80029e0:	2100      	movs	r1, #0
 80029e2:	20af      	movs	r0, #175	@ 0xaf
 80029e4:	f7ff ff00 	bl	80027e8 <OLED_WR_Byte>
	OLED_ColorTurn(0);//0ֽӣДʾì1 ״ɫДʾ
 80029e8:	2000      	movs	r0, #0
 80029ea:	f7ff ff19 	bl	8002820 <OLED_ColorTurn>
	OLED_DisplayTurn(0);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff ff26 	bl	8002840 <OLED_DisplayTurn>
	OLED_Refresh();
 80029f4:	f7ff ff3c 	bl	8002870 <OLED_Refresh>
	delay_ms(500);
 80029f8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80029fc:	f7ff fe88 	bl	8002710 <delay_ms>
	OLED_Clear();
 8002a00:	f7ff ff6c 	bl	80028dc <OLED_Clear>
}
 8002a04:	bd08      	pop	{r3, pc}
	...

08002a08 <OLEDStatus_debounce_cnt_increase>:
//	OLED_ShowString(8,16,(uint8_t *)stateMach.oled_message,16,1);
//	OLED_Refresh();
	
}

void OLEDStatus_debounce_cnt_increase(){
 8002a08:	b508      	push	{r3, lr}
	if(HAL_GPIO_ReadPin(UPGPIO, UPPIN) == GPIO_PIN_RESET){
 8002a0a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a0e:	4829      	ldr	r0, [pc, #164]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002a10:	f000 ff66 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a14:	bb10      	cbnz	r0, 8002a5c <OLEDStatus_debounce_cnt_increase+0x54>
		oledStatus.up_cnt++;
 8002a16:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a18:	6853      	ldr	r3, [r2, #4]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	6053      	str	r3, [r2, #4]
	else if(HAL_GPIO_ReadPin(UPGPIO, UPPIN) == GPIO_PIN_SET)
	{
		oledStatus.up_cnt = 0;
	}
	
	if(HAL_GPIO_ReadPin(DOWNGPIO, DOWNPIN) == GPIO_PIN_RESET){
 8002a1e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a22:	4824      	ldr	r0, [pc, #144]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002a24:	f000 ff5c 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a28:	bb18      	cbnz	r0, 8002a72 <OLEDStatus_debounce_cnt_increase+0x6a>
		oledStatus.down_cnt++;
 8002a2a:	4a23      	ldr	r2, [pc, #140]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a2c:	6893      	ldr	r3, [r2, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	6093      	str	r3, [r2, #8]
	else if(HAL_GPIO_ReadPin(DOWNGPIO, DOWNPIN) == GPIO_PIN_SET)
	{
		oledStatus.down_cnt = 0;
	}

	if(HAL_GPIO_ReadPin(LEFTGPIO, LEFTPIN) == GPIO_PIN_RESET){
 8002a32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a36:	4821      	ldr	r0, [pc, #132]	@ (8002abc <OLEDStatus_debounce_cnt_increase+0xb4>)
 8002a38:	f000 ff52 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a3c:	bb20      	cbnz	r0, 8002a88 <OLEDStatus_debounce_cnt_increase+0x80>
		oledStatus.left_cnt++;
 8002a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a40:	68d3      	ldr	r3, [r2, #12]
 8002a42:	3301      	adds	r3, #1
 8002a44:	60d3      	str	r3, [r2, #12]
	else if(HAL_GPIO_ReadPin(LEFTGPIO, LEFTPIN) == GPIO_PIN_SET)
	{
		oledStatus.left_cnt = 0;
	}

	if(HAL_GPIO_ReadPin(RIGHTGPIO, RIGHTPIN) == GPIO_PIN_RESET){
 8002a46:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002a4a:	481a      	ldr	r0, [pc, #104]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002a4c:	f000 ff48 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a50:	bb28      	cbnz	r0, 8002a9e <OLEDStatus_debounce_cnt_increase+0x96>
		oledStatus.right_cnt++;
 8002a52:	4a19      	ldr	r2, [pc, #100]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a54:	6913      	ldr	r3, [r2, #16]
 8002a56:	3301      	adds	r3, #1
 8002a58:	6113      	str	r3, [r2, #16]
//    OLEDStatus_UP();
//    OLEDStatus_DOWN();
//    OLEDStatus_LEFT();
//    OLEDStatus_RIGHT();

}
 8002a5a:	bd08      	pop	{r3, pc}
	else if(HAL_GPIO_ReadPin(UPGPIO, UPPIN) == GPIO_PIN_SET)
 8002a5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002a60:	4814      	ldr	r0, [pc, #80]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002a62:	f000 ff3d 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a66:	2801      	cmp	r0, #1
 8002a68:	d1d9      	bne.n	8002a1e <OLEDStatus_debounce_cnt_increase+0x16>
		oledStatus.up_cnt = 0;
 8002a6a:	4b13      	ldr	r3, [pc, #76]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	e7d5      	b.n	8002a1e <OLEDStatus_debounce_cnt_increase+0x16>
	else if(HAL_GPIO_ReadPin(DOWNGPIO, DOWNPIN) == GPIO_PIN_SET)
 8002a72:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a76:	480f      	ldr	r0, [pc, #60]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002a78:	f000 ff32 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a7c:	2801      	cmp	r0, #1
 8002a7e:	d1d8      	bne.n	8002a32 <OLEDStatus_debounce_cnt_increase+0x2a>
		oledStatus.down_cnt = 0;
 8002a80:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	e7d4      	b.n	8002a32 <OLEDStatus_debounce_cnt_increase+0x2a>
	else if(HAL_GPIO_ReadPin(LEFTGPIO, LEFTPIN) == GPIO_PIN_SET)
 8002a88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002a8c:	480b      	ldr	r0, [pc, #44]	@ (8002abc <OLEDStatus_debounce_cnt_increase+0xb4>)
 8002a8e:	f000 ff27 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002a92:	2801      	cmp	r0, #1
 8002a94:	d1d7      	bne.n	8002a46 <OLEDStatus_debounce_cnt_increase+0x3e>
		oledStatus.left_cnt = 0;
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	60da      	str	r2, [r3, #12]
 8002a9c:	e7d3      	b.n	8002a46 <OLEDStatus_debounce_cnt_increase+0x3e>
	else if(HAL_GPIO_ReadPin(RIGHTGPIO, RIGHTPIN) == GPIO_PIN_SET)
 8002a9e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002aa2:	4804      	ldr	r0, [pc, #16]	@ (8002ab4 <OLEDStatus_debounce_cnt_increase+0xac>)
 8002aa4:	f000 ff1c 	bl	80038e0 <HAL_GPIO_ReadPin>
 8002aa8:	2801      	cmp	r0, #1
 8002aaa:	d1d6      	bne.n	8002a5a <OLEDStatus_debounce_cnt_increase+0x52>
		oledStatus.right_cnt = 0;
 8002aac:	4b02      	ldr	r3, [pc, #8]	@ (8002ab8 <OLEDStatus_debounce_cnt_increase+0xb0>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	611a      	str	r2, [r3, #16]
}
 8002ab2:	e7d2      	b.n	8002a5a <OLEDStatus_debounce_cnt_increase+0x52>
 8002ab4:	40020800 	.word	0x40020800
 8002ab8:	20000c54 	.word	0x20000c54
 8002abc:	40020000 	.word	0x40020000

08002ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac4:	480d      	ldr	r0, [pc, #52]	@ (8002afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ac6:	490e      	ldr	r1, [pc, #56]	@ (8002b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ac8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ada:	4a0b      	ldr	r2, [pc, #44]	@ (8002b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002adc:	4c0b      	ldr	r4, [pc, #44]	@ (8002b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aea:	f7ff fa25 	bl	8001f38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002aee:	f003 f917 	bl	8005d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af2:	f7fe fce5 	bl	80014c0 <main>
  bx  lr    
 8002af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b00:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002b04:	08007e7c 	.word	0x08007e7c
  ldr r2, =_sbss
 8002b08:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002b0c:	20000dc4 	.word	0x20000dc4

08002b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b10:	e7fe      	b.n	8002b10 <ADC_IRQHandler>
	...

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b510      	push	{r4, lr}
 8002b16:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b18:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <HAL_InitTick+0x40>)
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b24:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_InitTick+0x44>)
 8002b26:	6810      	ldr	r0, [r2, #0]
 8002b28:	fbb0 f0f3 	udiv	r0, r0, r3
 8002b2c:	f000 fb72 	bl	8003214 <HAL_SYSTICK_Config>
 8002b30:	b968      	cbnz	r0, 8002b4e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b32:	2c0f      	cmp	r4, #15
 8002b34:	d901      	bls.n	8002b3a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e00a      	b.n	8002b50 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002b42:	f000 fb49 	bl	80031d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b46:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_InitTick+0x48>)
 8002b48:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	e000      	b.n	8002b50 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8002b4e:	2001      	movs	r0, #1
}
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	bf00      	nop
 8002b54:	20000048 	.word	0x20000048
 8002b58:	2000003c 	.word	0x2000003c
 8002b5c:	2000004c 	.word	0x2000004c

08002b60 <HAL_Init>:
{
 8002b60:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_Init+0x30>)
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002b72:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b7a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b7c:	2003      	movs	r0, #3
 8002b7e:	f000 fb19 	bl	80031b4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b82:	2001      	movs	r0, #1
 8002b84:	f7ff ffc6 	bl	8002b14 <HAL_InitTick>
  HAL_MspInit();
 8002b88:	f7ff f852 	bl	8001c30 <HAL_MspInit>
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	bd08      	pop	{r3, pc}
 8002b90:	40023c00 	.word	0x40023c00

08002b94 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002b94:	4a03      	ldr	r2, [pc, #12]	@ (8002ba4 <HAL_IncTick+0x10>)
 8002b96:	6811      	ldr	r1, [r2, #0]
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_IncTick+0x14>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	440b      	add	r3, r1
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000c74 	.word	0x20000c74
 8002ba8:	20000048 	.word	0x20000048

08002bac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002bac:	4b01      	ldr	r3, [pc, #4]	@ (8002bb4 <HAL_GetTick+0x8>)
 8002bae:	6818      	ldr	r0, [r3, #0]
}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	20000c74 	.word	0x20000c74

08002bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bb8:	b538      	push	{r3, r4, r5, lr}
 8002bba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002bbc:	f7ff fff6 	bl	8002bac <HAL_GetTick>
 8002bc0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bc2:	f1b4 3fff 	cmp.w	r4, #4294967295
 8002bc6:	d002      	beq.n	8002bce <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc8:	4b04      	ldr	r3, [pc, #16]	@ (8002bdc <HAL_Delay+0x24>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bce:	f7ff ffed 	bl	8002bac <HAL_GetTick>
 8002bd2:	1b40      	subs	r0, r0, r5
 8002bd4:	42a0      	cmp	r0, r4
 8002bd6:	d3fa      	bcc.n	8002bce <HAL_Delay+0x16>
  {
  }
}
 8002bd8:	bd38      	pop	{r3, r4, r5, pc}
 8002bda:	bf00      	nop
 8002bdc:	20000048 	.word	0x20000048

08002be0 <ADC_Init>:
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002be0:	4b4a      	ldr	r3, [pc, #296]	@ (8002d0c <ADC_Init+0x12c>)
 8002be2:	685a      	ldr	r2, [r3, #4]
 8002be4:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002be8:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	6841      	ldr	r1, [r0, #4]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002bf2:	6802      	ldr	r2, [r0, #0]
 8002bf4:	6853      	ldr	r3, [r2, #4]
 8002bf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002bfa:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002bfc:	6802      	ldr	r2, [r0, #0]
 8002bfe:	6853      	ldr	r3, [r2, #4]
 8002c00:	6901      	ldr	r1, [r0, #16]
 8002c02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c06:	6053      	str	r3, [r2, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c08:	6802      	ldr	r2, [r0, #0]
 8002c0a:	6853      	ldr	r3, [r2, #4]
 8002c0c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8002c10:	6053      	str	r3, [r2, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c12:	6802      	ldr	r2, [r0, #0]
 8002c14:	6853      	ldr	r3, [r2, #4]
 8002c16:	6881      	ldr	r1, [r0, #8]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6053      	str	r3, [r2, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c1c:	6802      	ldr	r2, [r0, #0]
 8002c1e:	6893      	ldr	r3, [r2, #8]
 8002c20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c24:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c26:	6802      	ldr	r2, [r0, #0]
 8002c28:	6893      	ldr	r3, [r2, #8]
 8002c2a:	68c1      	ldr	r1, [r0, #12]
 8002c2c:	430b      	orrs	r3, r1
 8002c2e:	6093      	str	r3, [r2, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c30:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8002c32:	4b37      	ldr	r3, [pc, #220]	@ (8002d10 <ADC_Init+0x130>)
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d057      	beq.n	8002ce8 <ADC_Init+0x108>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002c38:	6802      	ldr	r2, [r0, #0]
 8002c3a:	6893      	ldr	r3, [r2, #8]
 8002c3c:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002c40:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002c42:	6802      	ldr	r2, [r0, #0]
 8002c44:	6893      	ldr	r3, [r2, #8]
 8002c46:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6093      	str	r3, [r2, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002c4c:	6802      	ldr	r2, [r0, #0]
 8002c4e:	6893      	ldr	r3, [r2, #8]
 8002c50:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002c54:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002c56:	6802      	ldr	r2, [r0, #0]
 8002c58:	6893      	ldr	r3, [r2, #8]
 8002c5a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002c60:	6802      	ldr	r2, [r0, #0]
 8002c62:	6893      	ldr	r3, [r2, #8]
 8002c64:	f023 0302 	bic.w	r3, r3, #2
 8002c68:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c6a:	6802      	ldr	r2, [r0, #0]
 8002c6c:	6893      	ldr	r3, [r2, #8]
 8002c6e:	7e01      	ldrb	r1, [r0, #24]
 8002c70:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 8002c74:	6093      	str	r3, [r2, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c76:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d03f      	beq.n	8002cfe <ADC_Init+0x11e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c7e:	6802      	ldr	r2, [r0, #0]
 8002c80:	6853      	ldr	r3, [r2, #4]
 8002c82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c86:	6053      	str	r3, [r2, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c88:	6802      	ldr	r2, [r0, #0]
 8002c8a:	6853      	ldr	r3, [r2, #4]
 8002c8c:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8002c90:	6053      	str	r3, [r2, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c92:	6801      	ldr	r1, [r0, #0]
 8002c94:	684b      	ldr	r3, [r1, #4]
 8002c96:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8002c98:	3a01      	subs	r2, #1
 8002c9a:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
 8002c9e:	604b      	str	r3, [r1, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ca0:	6802      	ldr	r2, [r0, #0]
 8002ca2:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8002ca4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8002ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8002cae:	69c2      	ldr	r2, [r0, #28]
 8002cb0:	3a01      	subs	r2, #1
 8002cb2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8002cb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002cb8:	6802      	ldr	r2, [r0, #0]
 8002cba:	6893      	ldr	r3, [r2, #8]
 8002cbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002cc0:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002cc2:	6802      	ldr	r2, [r0, #0]
 8002cc4:	6893      	ldr	r3, [r2, #8]
 8002cc6:	f890 1030 	ldrb.w	r1, [r0, #48]	@ 0x30
 8002cca:	ea43 2341 	orr.w	r3, r3, r1, lsl #9
 8002cce:	6093      	str	r3, [r2, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cd0:	6802      	ldr	r2, [r0, #0]
 8002cd2:	6893      	ldr	r3, [r2, #8]
 8002cd4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002cd8:	6093      	str	r3, [r2, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cda:	6802      	ldr	r2, [r0, #0]
 8002cdc:	6893      	ldr	r3, [r2, #8]
 8002cde:	6941      	ldr	r1, [r0, #20]
 8002ce0:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002ce4:	6093      	str	r3, [r2, #8]
}
 8002ce6:	4770      	bx	lr
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ce8:	6802      	ldr	r2, [r0, #0]
 8002cea:	6893      	ldr	r3, [r2, #8]
 8002cec:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8002cf0:	6093      	str	r3, [r2, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cf2:	6802      	ldr	r2, [r0, #0]
 8002cf4:	6893      	ldr	r3, [r2, #8]
 8002cf6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8002cfa:	6093      	str	r3, [r2, #8]
 8002cfc:	e7b0      	b.n	8002c60 <ADC_Init+0x80>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002cfe:	6802      	ldr	r2, [r0, #0]
 8002d00:	6853      	ldr	r3, [r2, #4]
 8002d02:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d06:	6053      	str	r3, [r2, #4]
 8002d08:	e7ca      	b.n	8002ca0 <ADC_Init+0xc0>
 8002d0a:	bf00      	nop
 8002d0c:	40012300 	.word	0x40012300
 8002d10:	0f000001 	.word	0x0f000001

08002d14 <HAL_ADC_Init>:
  if(hadc == NULL)
 8002d14:	b338      	cbz	r0, 8002d66 <HAL_ADC_Init+0x52>
{
 8002d16:	b510      	push	{r4, lr}
 8002d18:	4604      	mov	r4, r0
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d1a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d1c:	b143      	cbz	r3, 8002d30 <HAL_ADC_Init+0x1c>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d1e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d20:	f013 0f10 	tst.w	r3, #16
 8002d24:	d00b      	beq.n	8002d3e <HAL_ADC_Init+0x2a>
    tmp_hal_status = HAL_ERROR;
 8002d26:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002d2e:	bd10      	pop	{r4, pc}
    HAL_ADC_MspInit(hadc);
 8002d30:	f7fe fa62 	bl	80011f8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d34:	2300      	movs	r3, #0
 8002d36:	6463      	str	r3, [r4, #68]	@ 0x44
    hadc->Lock = HAL_UNLOCKED;
 8002d38:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
 8002d3c:	e7ef      	b.n	8002d1e <HAL_ADC_Init+0xa>
    ADC_STATE_CLR_SET(hadc->State,
 8002d3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002d44:	f023 0302 	bic.w	r3, r3, #2
 8002d48:	f043 0302 	orr.w	r3, r3, #2
 8002d4c:	6423      	str	r3, [r4, #64]	@ 0x40
    ADC_Init(hadc);
 8002d4e:	4620      	mov	r0, r4
 8002d50:	f7ff ff46 	bl	8002be0 <ADC_Init>
    ADC_CLEAR_ERRORCODE(hadc);
 8002d54:	2000      	movs	r0, #0
 8002d56:	6460      	str	r0, [r4, #68]	@ 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002d5a:	f023 0303 	bic.w	r3, r3, #3
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6423      	str	r3, [r4, #64]	@ 0x40
 8002d64:	e7e0      	b.n	8002d28 <HAL_ADC_Init+0x14>
    return HAL_ERROR;
 8002d66:	2001      	movs	r0, #1
}
 8002d68:	4770      	bx	lr
	...

08002d6c <HAL_ADC_Start_DMA>:
{
 8002d6c:	b510      	push	{r4, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002d72:	2200      	movs	r2, #0
 8002d74:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002d76:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002d7a:	2a01      	cmp	r2, #1
 8002d7c:	f000 80ae 	beq.w	8002edc <HAL_ADC_Start_DMA+0x170>
 8002d80:	4604      	mov	r4, r0
 8002d82:	2201      	movs	r2, #1
 8002d84:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d88:	6802      	ldr	r2, [r0, #0]
 8002d8a:	6890      	ldr	r0, [r2, #8]
 8002d8c:	f010 0f01 	tst.w	r0, #1
 8002d90:	d113      	bne.n	8002dba <HAL_ADC_Start_DMA+0x4e>
    __HAL_ADC_ENABLE(hadc);
 8002d92:	6890      	ldr	r0, [r2, #8]
 8002d94:	f040 0001 	orr.w	r0, r0, #1
 8002d98:	6090      	str	r0, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002d9a:	4a53      	ldr	r2, [pc, #332]	@ (8002ee8 <HAL_ADC_Start_DMA+0x17c>)
 8002d9c:	6810      	ldr	r0, [r2, #0]
 8002d9e:	4a53      	ldr	r2, [pc, #332]	@ (8002eec <HAL_ADC_Start_DMA+0x180>)
 8002da0:	fba2 2000 	umull	r2, r0, r2, r0
 8002da4:	0c80      	lsrs	r0, r0, #18
 8002da6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002daa:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002dac:	e002      	b.n	8002db4 <HAL_ADC_Start_DMA+0x48>
      counter--;
 8002dae:	9801      	ldr	r0, [sp, #4]
 8002db0:	3801      	subs	r0, #1
 8002db2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002db4:	9801      	ldr	r0, [sp, #4]
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d1f9      	bne.n	8002dae <HAL_ADC_Start_DMA+0x42>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002dba:	6822      	ldr	r2, [r4, #0]
 8002dbc:	6890      	ldr	r0, [r2, #8]
 8002dbe:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8002dc2:	d003      	beq.n	8002dcc <HAL_ADC_Start_DMA+0x60>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002dc4:	6890      	ldr	r0, [r2, #8]
 8002dc6:	f420 7080 	bic.w	r0, r0, #256	@ 0x100
 8002dca:	6090      	str	r0, [r2, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	6890      	ldr	r0, [r2, #8]
 8002dd0:	f010 0f01 	tst.w	r0, #1
 8002dd4:	d077      	beq.n	8002ec6 <HAL_ADC_Start_DMA+0x15a>
    ADC_STATE_CLR_SET(hadc->State,
 8002dd6:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002dd8:	f420 60e0 	bic.w	r0, r0, #1792	@ 0x700
 8002ddc:	f020 0001 	bic.w	r0, r0, #1
 8002de0:	f440 7080 	orr.w	r0, r0, #256	@ 0x100
 8002de4:	6420      	str	r0, [r4, #64]	@ 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002de6:	6852      	ldr	r2, [r2, #4]
 8002de8:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002dec:	d005      	beq.n	8002dfa <HAL_ADC_Start_DMA+0x8e>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002dee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002df0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002df4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002df8:	6422      	str	r2, [r4, #64]	@ 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002dfa:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002dfc:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8002e00:	d036      	beq.n	8002e70 <HAL_ADC_Start_DMA+0x104>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e02:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002e04:	f022 0206 	bic.w	r2, r2, #6
 8002e08:	6462      	str	r2, [r4, #68]	@ 0x44
    __HAL_UNLOCK(hadc);   
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002e10:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002e12:	4837      	ldr	r0, [pc, #220]	@ (8002ef0 <HAL_ADC_Start_DMA+0x184>)
 8002e14:	63d0      	str	r0, [r2, #60]	@ 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002e16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002e18:	4836      	ldr	r0, [pc, #216]	@ (8002ef4 <HAL_ADC_Start_DMA+0x188>)
 8002e1a:	6410      	str	r0, [r2, #64]	@ 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002e1c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002e1e:	4836      	ldr	r0, [pc, #216]	@ (8002ef8 <HAL_ADC_Start_DMA+0x18c>)
 8002e20:	64d0      	str	r0, [r2, #76]	@ 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e22:	6822      	ldr	r2, [r4, #0]
 8002e24:	f06f 0022 	mvn.w	r0, #34	@ 0x22
 8002e28:	6010      	str	r0, [r2, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002e2a:	6820      	ldr	r0, [r4, #0]
 8002e2c:	6842      	ldr	r2, [r0, #4]
 8002e2e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002e32:	6042      	str	r2, [r0, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002e34:	6820      	ldr	r0, [r4, #0]
 8002e36:	6882      	ldr	r2, [r0, #8]
 8002e38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e3c:	6082      	str	r2, [r0, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	460a      	mov	r2, r1
 8002e42:	f100 014c 	add.w	r1, r0, #76	@ 0x4c
 8002e46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e48:	f000 fada 	bl	8003400 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e4c:	4b2b      	ldr	r3, [pc, #172]	@ (8002efc <HAL_ADC_Start_DMA+0x190>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f013 0f1f 	tst.w	r3, #31
 8002e54:	d127      	bne.n	8002ea6 <HAL_ADC_Start_DMA+0x13a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	4a29      	ldr	r2, [pc, #164]	@ (8002f00 <HAL_ADC_Start_DMA+0x194>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d011      	beq.n	8002e82 <HAL_ADC_Start_DMA+0x116>
 8002e5e:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d007      	beq.n	8002e76 <HAL_ADC_Start_DMA+0x10a>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e66:	4a27      	ldr	r2, [pc, #156]	@ (8002f04 <HAL_ADC_Start_DMA+0x198>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d014      	beq.n	8002e96 <HAL_ADC_Start_DMA+0x12a>
  return HAL_OK;
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	e033      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
      ADC_CLEAR_ERRORCODE(hadc);
 8002e70:	2200      	movs	r2, #0
 8002e72:	6462      	str	r2, [r4, #68]	@ 0x44
 8002e74:	e7c9      	b.n	8002e0a <HAL_ADC_Start_DMA+0x9e>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e76:	f502 7200 	add.w	r2, r2, #512	@ 0x200
 8002e7a:	6852      	ldr	r2, [r2, #4]
 8002e7c:	f012 0f1f 	tst.w	r2, #31
 8002e80:	d1f1      	bne.n	8002e66 <HAL_ADC_Start_DMA+0xfa>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002e88:	d12a      	bne.n	8002ee0 <HAL_ADC_Start_DMA+0x174>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002e90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002e92:	2000      	movs	r0, #0
 8002e94:	e020      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e96:	f502 7280 	add.w	r2, r2, #256	@ 0x100
 8002e9a:	6852      	ldr	r2, [r2, #4]
 8002e9c:	f012 0f10 	tst.w	r2, #16
 8002ea0:	d0ef      	beq.n	8002e82 <HAL_ADC_Start_DMA+0x116>
  return HAL_OK;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	e018      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002ea6:	6823      	ldr	r3, [r4, #0]
 8002ea8:	4a15      	ldr	r2, [pc, #84]	@ (8002f00 <HAL_ADC_Start_DMA+0x194>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d001      	beq.n	8002eb2 <HAL_ADC_Start_DMA+0x146>
  return HAL_OK;
 8002eae:	2000      	movs	r0, #0
 8002eb0:	e012      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002eb8:	d114      	bne.n	8002ee4 <HAL_ADC_Start_DMA+0x178>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e008      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ec6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ec8:	f043 0310 	orr.w	r3, r3, #16
 8002ecc:	6423      	str	r3, [r4, #64]	@ 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ece:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6463      	str	r3, [r4, #68]	@ 0x44
  return HAL_OK;
 8002ed6:	2000      	movs	r0, #0
}
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8002edc:	2002      	movs	r0, #2
 8002ede:	e7fb      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
  return HAL_OK;
 8002ee0:	2000      	movs	r0, #0
 8002ee2:	e7f9      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	e7f7      	b.n	8002ed8 <HAL_ADC_Start_DMA+0x16c>
 8002ee8:	2000003c 	.word	0x2000003c
 8002eec:	431bde83 	.word	0x431bde83
 8002ef0:	08002f2f 	.word	0x08002f2f
 8002ef4:	08002f0d 	.word	0x08002f0d
 8002ef8:	08002f19 	.word	0x08002f19
 8002efc:	40012300 	.word	0x40012300
 8002f00:	40012000 	.word	0x40012000
 8002f04:	40012200 	.word	0x40012200

08002f08 <HAL_ADC_ConvCpltCallback>:
}
 8002f08:	4770      	bx	lr

08002f0a <HAL_ADC_ConvHalfCpltCallback>:
}
 8002f0a:	4770      	bx	lr

08002f0c <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002f0c:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002f0e:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8002f10:	f7ff fffb 	bl	8002f0a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f14:	bd08      	pop	{r3, pc}

08002f16 <HAL_ADC_ErrorCallback>:
}
 8002f16:	4770      	bx	lr

08002f18 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002f18:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f1a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f1c:	2340      	movs	r3, #64	@ 0x40
 8002f1e:	6403      	str	r3, [r0, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f20:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8002f22:	f043 0304 	orr.w	r3, r3, #4
 8002f26:	6443      	str	r3, [r0, #68]	@ 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f28:	f7ff fff5 	bl	8002f16 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f2c:	bd08      	pop	{r3, pc}

08002f2e <ADC_DMAConvCplt>:
{
 8002f2e:	b508      	push	{r3, lr}
 8002f30:	4603      	mov	r3, r0
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f32:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002f34:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002f36:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8002f3a:	d125      	bne.n	8002f88 <ADC_DMAConvCplt+0x5a>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f3c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f42:	6403      	str	r3, [r0, #64]	@ 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f44:	6803      	ldr	r3, [r0, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
 8002f4c:	d119      	bne.n	8002f82 <ADC_DMAConvCplt+0x54>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f4e:	7e02      	ldrb	r2, [r0, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f50:	b9ba      	cbnz	r2, 8002f82 <ADC_DMAConvCplt+0x54>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f54:	f412 0f70 	tst.w	r2, #15728640	@ 0xf00000
 8002f58:	d003      	beq.n	8002f62 <ADC_DMAConvCplt+0x34>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002f5a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002f5c:	f412 6f80 	tst.w	r2, #1024	@ 0x400
 8002f60:	d10f      	bne.n	8002f82 <ADC_DMAConvCplt+0x54>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	f022 0220 	bic.w	r2, r2, #32
 8002f68:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f6a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f70:	6403      	str	r3, [r0, #64]	@ 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f72:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f74:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
 8002f78:	d103      	bne.n	8002f82 <ADC_DMAConvCplt+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f7a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002f7c:	f043 0301 	orr.w	r3, r3, #1
 8002f80:	6403      	str	r3, [r0, #64]	@ 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002f82:	f7ff ffc1 	bl	8002f08 <HAL_ADC_ConvCpltCallback>
}
 8002f86:	bd08      	pop	{r3, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f88:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002f8a:	f012 0f10 	tst.w	r2, #16
 8002f8e:	d104      	bne.n	8002f9a <ADC_DMAConvCplt+0x6c>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f90:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 8002f92:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f94:	4618      	mov	r0, r3
 8002f96:	4790      	blx	r2
}
 8002f98:	e7f5      	b.n	8002f86 <ADC_DMAConvCplt+0x58>
      HAL_ADC_ErrorCallback(hadc);
 8002f9a:	f7ff ffbc 	bl	8002f16 <HAL_ADC_ErrorCallback>
 8002f9e:	e7f2      	b.n	8002f86 <ADC_DMAConvCplt+0x58>

08002fa0 <HAL_ADC_ConfigChannel>:
{
 8002fa0:	b430      	push	{r4, r5}
 8002fa2:	b082      	sub	sp, #8
  __IO uint32_t counter = 0U;
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002fa8:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8002fac:	2a01      	cmp	r2, #1
 8002fae:	f000 80c0 	beq.w	8003132 <HAL_ADC_ConfigChannel+0x192>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002fba:	680a      	ldr	r2, [r1, #0]
 8002fbc:	2a09      	cmp	r2, #9
 8002fbe:	d940      	bls.n	8003042 <HAL_ADC_ConfigChannel+0xa2>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002fc0:	6804      	ldr	r4, [r0, #0]
 8002fc2:	68e0      	ldr	r0, [r4, #12]
 8002fc4:	b292      	uxth	r2, r2
 8002fc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fca:	3a1e      	subs	r2, #30
 8002fcc:	f04f 0c07 	mov.w	ip, #7
 8002fd0:	fa0c f202 	lsl.w	r2, ip, r2
 8002fd4:	ea20 0202 	bic.w	r2, r0, r2
 8002fd8:	60e2      	str	r2, [r4, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fda:	681c      	ldr	r4, [r3, #0]
 8002fdc:	68e0      	ldr	r0, [r4, #12]
 8002fde:	880a      	ldrh	r2, [r1, #0]
 8002fe0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002fe4:	3a1e      	subs	r2, #30
 8002fe6:	688d      	ldr	r5, [r1, #8]
 8002fe8:	fa05 f202 	lsl.w	r2, r5, r2
 8002fec:	4302      	orrs	r2, r0
 8002fee:	60e2      	str	r2, [r4, #12]
  if (sConfig->Rank < 7U)
 8002ff0:	684a      	ldr	r2, [r1, #4]
 8002ff2:	2a06      	cmp	r2, #6
 8002ff4:	d83c      	bhi.n	8003070 <HAL_ADC_ConfigChannel+0xd0>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ff6:	681c      	ldr	r4, [r3, #0]
 8002ff8:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8002ffa:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8002ffe:	3a05      	subs	r2, #5
 8003000:	f04f 0c1f 	mov.w	ip, #31
 8003004:	fa0c f202 	lsl.w	r2, ip, r2
 8003008:	ea20 0202 	bic.w	r2, r0, r2
 800300c:	6362      	str	r2, [r4, #52]	@ 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800300e:	681c      	ldr	r4, [r3, #0]
 8003010:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8003012:	684a      	ldr	r2, [r1, #4]
 8003014:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003018:	3a05      	subs	r2, #5
 800301a:	f8b1 c000 	ldrh.w	ip, [r1]
 800301e:	fa0c f202 	lsl.w	r2, ip, r2
 8003022:	4302      	orrs	r2, r0
 8003024:	6362      	str	r2, [r4, #52]	@ 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	4a43      	ldr	r2, [pc, #268]	@ (8003138 <HAL_ADC_ConfigChannel+0x198>)
 800302a:	4290      	cmp	r0, r2
 800302c:	d050      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x130>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	4a41      	ldr	r2, [pc, #260]	@ (8003138 <HAL_ADC_ConfigChannel+0x198>)
 8003032:	4290      	cmp	r0, r2
 8003034:	d059      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x14a>
  __HAL_UNLOCK(hadc);
 8003036:	2000      	movs	r0, #0
 8003038:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c
}
 800303c:	b002      	add	sp, #8
 800303e:	bc30      	pop	{r4, r5}
 8003040:	4770      	bx	lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003042:	6804      	ldr	r4, [r0, #0]
 8003044:	6920      	ldr	r0, [r4, #16]
 8003046:	b292      	uxth	r2, r2
 8003048:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800304c:	f04f 0c07 	mov.w	ip, #7
 8003050:	fa0c f202 	lsl.w	r2, ip, r2
 8003054:	ea20 0202 	bic.w	r2, r0, r2
 8003058:	6122      	str	r2, [r4, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800305a:	681c      	ldr	r4, [r3, #0]
 800305c:	6920      	ldr	r0, [r4, #16]
 800305e:	880a      	ldrh	r2, [r1, #0]
 8003060:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003064:	688d      	ldr	r5, [r1, #8]
 8003066:	fa05 f202 	lsl.w	r2, r5, r2
 800306a:	4302      	orrs	r2, r0
 800306c:	6122      	str	r2, [r4, #16]
 800306e:	e7bf      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x50>
  else if (sConfig->Rank < 13U)
 8003070:	2a0c      	cmp	r2, #12
 8003072:	d816      	bhi.n	80030a2 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003074:	681d      	ldr	r5, [r3, #0]
 8003076:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003078:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800307c:	3a23      	subs	r2, #35	@ 0x23
 800307e:	241f      	movs	r4, #31
 8003080:	fa04 f202 	lsl.w	r2, r4, r2
 8003084:	ea20 0202 	bic.w	r2, r0, r2
 8003088:	632a      	str	r2, [r5, #48]	@ 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308a:	681d      	ldr	r5, [r3, #0]
 800308c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800308e:	684a      	ldr	r2, [r1, #4]
 8003090:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003094:	3a23      	subs	r2, #35	@ 0x23
 8003096:	880c      	ldrh	r4, [r1, #0]
 8003098:	fa04 f202 	lsl.w	r2, r4, r2
 800309c:	4302      	orrs	r2, r0
 800309e:	632a      	str	r2, [r5, #48]	@ 0x30
 80030a0:	e7c1      	b.n	8003026 <HAL_ADC_ConfigChannel+0x86>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030a2:	681d      	ldr	r5, [r3, #0]
 80030a4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80030a6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030aa:	3a41      	subs	r2, #65	@ 0x41
 80030ac:	241f      	movs	r4, #31
 80030ae:	fa04 f202 	lsl.w	r2, r4, r2
 80030b2:	ea20 0202 	bic.w	r2, r0, r2
 80030b6:	62ea      	str	r2, [r5, #44]	@ 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030b8:	681d      	ldr	r5, [r3, #0]
 80030ba:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 80030bc:	684a      	ldr	r2, [r1, #4]
 80030be:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80030c2:	3a41      	subs	r2, #65	@ 0x41
 80030c4:	880c      	ldrh	r4, [r1, #0]
 80030c6:	fa04 f202 	lsl.w	r2, r4, r2
 80030ca:	4302      	orrs	r2, r0
 80030cc:	62ea      	str	r2, [r5, #44]	@ 0x2c
 80030ce:	e7aa      	b.n	8003026 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80030d0:	680a      	ldr	r2, [r1, #0]
 80030d2:	2a12      	cmp	r2, #18
 80030d4:	d1ab      	bne.n	800302e <HAL_ADC_ConfigChannel+0x8e>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80030d6:	4a19      	ldr	r2, [pc, #100]	@ (800313c <HAL_ADC_ConfigChannel+0x19c>)
 80030d8:	6850      	ldr	r0, [r2, #4]
 80030da:	f420 0000 	bic.w	r0, r0, #8388608	@ 0x800000
 80030de:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030e0:	6850      	ldr	r0, [r2, #4]
 80030e2:	f440 0080 	orr.w	r0, r0, #4194304	@ 0x400000
 80030e6:	6050      	str	r0, [r2, #4]
 80030e8:	e7a1      	b.n	800302e <HAL_ADC_ConfigChannel+0x8e>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030ea:	680a      	ldr	r2, [r1, #0]
 80030ec:	4814      	ldr	r0, [pc, #80]	@ (8003140 <HAL_ADC_ConfigChannel+0x1a0>)
 80030ee:	4282      	cmp	r2, r0
 80030f0:	d001      	beq.n	80030f6 <HAL_ADC_ConfigChannel+0x156>
 80030f2:	2a11      	cmp	r2, #17
 80030f4:	d19f      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x96>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030f6:	4a11      	ldr	r2, [pc, #68]	@ (800313c <HAL_ADC_ConfigChannel+0x19c>)
 80030f8:	6850      	ldr	r0, [r2, #4]
 80030fa:	f420 0080 	bic.w	r0, r0, #4194304	@ 0x400000
 80030fe:	6050      	str	r0, [r2, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003100:	6850      	ldr	r0, [r2, #4]
 8003102:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8003106:	6050      	str	r0, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003108:	6809      	ldr	r1, [r1, #0]
 800310a:	4a0d      	ldr	r2, [pc, #52]	@ (8003140 <HAL_ADC_ConfigChannel+0x1a0>)
 800310c:	4291      	cmp	r1, r2
 800310e:	d192      	bne.n	8003036 <HAL_ADC_ConfigChannel+0x96>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003110:	4a0c      	ldr	r2, [pc, #48]	@ (8003144 <HAL_ADC_ConfigChannel+0x1a4>)
 8003112:	6812      	ldr	r2, [r2, #0]
 8003114:	490c      	ldr	r1, [pc, #48]	@ (8003148 <HAL_ADC_ConfigChannel+0x1a8>)
 8003116:	fba1 1202 	umull	r1, r2, r1, r2
 800311a:	0c92      	lsrs	r2, r2, #18
 800311c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003120:	0052      	lsls	r2, r2, #1
 8003122:	9201      	str	r2, [sp, #4]
      while(counter != 0U)
 8003124:	9a01      	ldr	r2, [sp, #4]
 8003126:	2a00      	cmp	r2, #0
 8003128:	d085      	beq.n	8003036 <HAL_ADC_ConfigChannel+0x96>
        counter--;
 800312a:	9a01      	ldr	r2, [sp, #4]
 800312c:	3a01      	subs	r2, #1
 800312e:	9201      	str	r2, [sp, #4]
 8003130:	e7f8      	b.n	8003124 <HAL_ADC_ConfigChannel+0x184>
  __HAL_LOCK(hadc);
 8003132:	2002      	movs	r0, #2
 8003134:	e782      	b.n	800303c <HAL_ADC_ConfigChannel+0x9c>
 8003136:	bf00      	nop
 8003138:	40012000 	.word	0x40012000
 800313c:	40012300 	.word	0x40012300
 8003140:	10000012 	.word	0x10000012
 8003144:	2000003c 	.word	0x2000003c
 8003148:	431bde83 	.word	0x431bde83

0800314c <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 800314c:	2800      	cmp	r0, #0
 800314e:	db08      	blt.n	8003162 <__NVIC_SetPriority+0x16>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	0109      	lsls	r1, r1, #4
 8003152:	b2c9      	uxtb	r1, r1
 8003154:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8003158:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800315c:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
 8003160:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003162:	f000 000f 	and.w	r0, r0, #15
 8003166:	0109      	lsls	r1, r1, #4
 8003168:	b2c9      	uxtb	r1, r1
 800316a:	4b01      	ldr	r3, [pc, #4]	@ (8003170 <__NVIC_SetPriority+0x24>)
 800316c:	5419      	strb	r1, [r3, r0]
}
 800316e:	4770      	bx	lr
 8003170:	e000ed14 	.word	0xe000ed14

08003174 <NVIC_EncodePriority>:
{
 8003174:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003176:	f000 0007 	and.w	r0, r0, #7
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800317a:	f1c0 0c07 	rsb	ip, r0, #7
 800317e:	f1bc 0f04 	cmp.w	ip, #4
 8003182:	bf28      	it	cs
 8003184:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003188:	1d03      	adds	r3, r0, #4
 800318a:	2b06      	cmp	r3, #6
 800318c:	d90f      	bls.n	80031ae <NVIC_EncodePriority+0x3a>
 800318e:	1ec3      	subs	r3, r0, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003190:	f04f 3eff 	mov.w	lr, #4294967295
 8003194:	fa0e f00c 	lsl.w	r0, lr, ip
 8003198:	ea21 0100 	bic.w	r1, r1, r0
 800319c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800319e:	fa0e fe03 	lsl.w	lr, lr, r3
 80031a2:	ea22 020e 	bic.w	r2, r2, lr
}
 80031a6:	ea41 0002 	orr.w	r0, r1, r2
 80031aa:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031ae:	2300      	movs	r3, #0
 80031b0:	e7ee      	b.n	8003190 <NVIC_EncodePriority+0x1c>
	...

080031b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4a07      	ldr	r2, [pc, #28]	@ (80031d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80031b6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031b8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80031bc:	041b      	lsls	r3, r3, #16
 80031be:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c0:	0200      	lsls	r0, r0, #8
 80031c2:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80031c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80031d0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80031d2:	4770      	bx	lr
 80031d4:	e000ed00 	.word	0xe000ed00

080031d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031d8:	b510      	push	{r4, lr}
 80031da:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031dc:	4b05      	ldr	r3, [pc, #20]	@ (80031f4 <HAL_NVIC_SetPriority+0x1c>)
 80031de:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031e0:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80031e4:	f7ff ffc6 	bl	8003174 <NVIC_EncodePriority>
 80031e8:	4601      	mov	r1, r0
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff ffae 	bl	800314c <__NVIC_SetPriority>
}
 80031f0:	bd10      	pop	{r4, pc}
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00

080031f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80031f8:	2800      	cmp	r0, #0
 80031fa:	db07      	blt.n	800320c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fc:	f000 021f 	and.w	r2, r0, #31
 8003200:	0940      	lsrs	r0, r0, #5
 8003202:	2301      	movs	r3, #1
 8003204:	4093      	lsls	r3, r2
 8003206:	4a02      	ldr	r2, [pc, #8]	@ (8003210 <HAL_NVIC_EnableIRQ+0x18>)
 8003208:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	e000e100 	.word	0xe000e100

08003214 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003214:	3801      	subs	r0, #1
 8003216:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800321a:	d20b      	bcs.n	8003234 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800321c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003220:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <HAL_SYSTICK_Config+0x24>)
 8003224:	21f0      	movs	r1, #240	@ 0xf0
 8003226:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800322a:	2000      	movs	r0, #0
 800322c:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322e:	2207      	movs	r2, #7
 8003230:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003232:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003234:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8003236:	4770      	bx	lr
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800323c:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800323e:	6805      	ldr	r5, [r0, #0]
 8003240:	682c      	ldr	r4, [r5, #0]
 8003242:	f424 2480 	bic.w	r4, r4, #262144	@ 0x40000
 8003246:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003248:	6804      	ldr	r4, [r0, #0]
 800324a:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324c:	6883      	ldr	r3, [r0, #8]
 800324e:	2b40      	cmp	r3, #64	@ 0x40
 8003250:	d005      	beq.n	800325e <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 8003252:	6803      	ldr	r3, [r0, #0]
 8003254:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8003256:	6803      	ldr	r3, [r0, #0]
 8003258:	60da      	str	r2, [r3, #12]
  }
}
 800325a:	bc30      	pop	{r4, r5}
 800325c:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 800325e:	6803      	ldr	r3, [r0, #0]
 8003260:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003262:	6803      	ldr	r3, [r0, #0]
 8003264:	60d9      	str	r1, [r3, #12]
 8003266:	e7f8      	b.n	800325a <DMA_SetConfig+0x1e>

08003268 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003268:	b410      	push	{r4}
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	b2d9      	uxtb	r1, r3
 800326e:	3910      	subs	r1, #16
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <DMA_CalcBaseAndBitshift+0x34>)
 8003272:	fba2 4201 	umull	r4, r2, r2, r1
 8003276:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003278:	4c09      	ldr	r4, [pc, #36]	@ (80032a0 <DMA_CalcBaseAndBitshift+0x38>)
 800327a:	5ca2      	ldrb	r2, [r4, r2]
 800327c:	65c2      	str	r2, [r0, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800327e:	295f      	cmp	r1, #95	@ 0x5f
 8003280:	d907      	bls.n	8003292 <DMA_CalcBaseAndBitshift+0x2a>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003282:	f36f 0309 	bfc	r3, #0, #10
 8003286:	3304      	adds	r3, #4
 8003288:	6583      	str	r3, [r0, #88]	@ 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800328a:	6d80      	ldr	r0, [r0, #88]	@ 0x58
 800328c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003290:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003292:	f36f 0309 	bfc	r3, #0, #10
 8003296:	6583      	str	r3, [r0, #88]	@ 0x58
 8003298:	e7f7      	b.n	800328a <DMA_CalcBaseAndBitshift+0x22>
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	08007af0 	.word	0x08007af0

080032a4 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032a4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032a6:	6982      	ldr	r2, [r0, #24]
 80032a8:	b992      	cbnz	r2, 80032d0 <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d00a      	beq.n	80032c4 <DMA_CheckFifoParam+0x20>
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d002      	beq.n	80032b8 <DMA_CheckFifoParam+0x14>
 80032b2:	b10b      	cbz	r3, 80032b8 <DMA_CheckFifoParam+0x14>
 80032b4:	2000      	movs	r0, #0
 80032b6:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032b8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032ba:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80032be:	d128      	bne.n	8003312 <DMA_CheckFifoParam+0x6e>
  HAL_StatusTypeDef status = HAL_OK;
 80032c0:	2000      	movs	r0, #0
 80032c2:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032c4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80032ca:	d024      	beq.n	8003316 <DMA_CheckFifoParam+0x72>
  HAL_StatusTypeDef status = HAL_OK;
 80032cc:	2000      	movs	r0, #0
 80032ce:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032d0:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 80032d4:	d009      	beq.n	80032ea <DMA_CheckFifoParam+0x46>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d925      	bls.n	8003326 <DMA_CheckFifoParam+0x82>
 80032da:	2b03      	cmp	r3, #3
 80032dc:	d125      	bne.n	800332a <DMA_CheckFifoParam+0x86>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032de:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032e0:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 80032e4:	d123      	bne.n	800332e <DMA_CheckFifoParam+0x8a>
  HAL_StatusTypeDef status = HAL_OK;
 80032e6:	2000      	movs	r0, #0
 80032e8:	4770      	bx	lr
    switch (tmp)
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d803      	bhi.n	80032f6 <DMA_CheckFifoParam+0x52>
 80032ee:	e8df f003 	tbb	[pc, r3]
 80032f2:	0414      	.short	0x0414
 80032f4:	0a14      	.short	0x0a14
 80032f6:	2000      	movs	r0, #0
 80032f8:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032fa:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80032fc:	f013 7f80 	tst.w	r3, #16777216	@ 0x1000000
 8003300:	d10d      	bne.n	800331e <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2000      	movs	r0, #0
 8003304:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003306:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8003308:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800330c:	d009      	beq.n	8003322 <DMA_CheckFifoParam+0x7e>
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2000      	movs	r0, #0
 8003310:	4770      	bx	lr
        status = HAL_ERROR;
 8003312:	2001      	movs	r0, #1
 8003314:	4770      	bx	lr
        status = HAL_ERROR;
 8003316:	2001      	movs	r0, #1
 8003318:	4770      	bx	lr
      status = HAL_ERROR;
 800331a:	2001      	movs	r0, #1
 800331c:	4770      	bx	lr
        status = HAL_ERROR;
 800331e:	2001      	movs	r0, #1
 8003320:	4770      	bx	lr
        status = HAL_ERROR;
 8003322:	2001      	movs	r0, #1
 8003324:	4770      	bx	lr
      status = HAL_ERROR;
 8003326:	2001      	movs	r0, #1
 8003328:	4770      	bx	lr
    switch (tmp)
 800332a:	2000      	movs	r0, #0
 800332c:	4770      	bx	lr
      {
        status = HAL_ERROR;
 800332e:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 8003330:	4770      	bx	lr
	...

08003334 <HAL_DMA_Init>:
{
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003338:	f7ff fc38 	bl	8002bac <HAL_GetTick>
  if(hdma == NULL)
 800333c:	2c00      	cmp	r4, #0
 800333e:	d05b      	beq.n	80033f8 <HAL_DMA_Init+0xc4>
 8003340:	4605      	mov	r5, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8003342:	2302      	movs	r3, #2
 8003344:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  __HAL_UNLOCK(hdma);
 8003348:	2300      	movs	r3, #0
 800334a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
  __HAL_DMA_DISABLE(hdma);
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	6813      	ldr	r3, [r2, #0]
 8003352:	f023 0301 	bic.w	r3, r3, #1
 8003356:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003358:	6823      	ldr	r3, [r4, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	f012 0f01 	tst.w	r2, #1
 8003360:	d00a      	beq.n	8003378 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003362:	f7ff fc23 	bl	8002bac <HAL_GetTick>
 8003366:	1b43      	subs	r3, r0, r5
 8003368:	2b05      	cmp	r3, #5
 800336a:	d9f5      	bls.n	8003358 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336c:	2320      	movs	r3, #32
 800336e:	6563      	str	r3, [r4, #84]	@ 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003370:	2003      	movs	r0, #3
 8003372:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
}
 8003376:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8003378:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800337a:	4920      	ldr	r1, [pc, #128]	@ (80033fc <HAL_DMA_Init+0xc8>)
 800337c:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800337e:	6862      	ldr	r2, [r4, #4]
 8003380:	68a0      	ldr	r0, [r4, #8]
 8003382:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003384:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003386:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003388:	6920      	ldr	r0, [r4, #16]
 800338a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800338c:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003390:	69a0      	ldr	r0, [r4, #24]
 8003392:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003394:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003396:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8003398:	6a20      	ldr	r0, [r4, #32]
 800339a:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339c:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800339e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80033a0:	2904      	cmp	r1, #4
 80033a2:	d01e      	beq.n	80033e2 <HAL_DMA_Init+0xae>
  hdma->Instance->CR = tmp;  
 80033a4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80033a6:	6826      	ldr	r6, [r4, #0]
 80033a8:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033aa:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 80033ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80033b0:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033b2:	2b04      	cmp	r3, #4
 80033b4:	d107      	bne.n	80033c6 <HAL_DMA_Init+0x92>
    tmp |= hdma->Init.FIFOThreshold;
 80033b6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80033b8:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033ba:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80033bc:	b11b      	cbz	r3, 80033c6 <HAL_DMA_Init+0x92>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033be:	4620      	mov	r0, r4
 80033c0:	f7ff ff70 	bl	80032a4 <DMA_CheckFifoParam>
 80033c4:	b990      	cbnz	r0, 80033ec <HAL_DMA_Init+0xb8>
  hdma->Instance->FCR = tmp;
 80033c6:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033c8:	4620      	mov	r0, r4
 80033ca:	f7ff ff4d 	bl	8003268 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033ce:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80033d0:	233f      	movs	r3, #63	@ 0x3f
 80033d2:	4093      	lsls	r3, r2
 80033d4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033d6:	2000      	movs	r0, #0
 80033d8:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80033da:	2301      	movs	r3, #1
 80033dc:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
  return HAL_OK;
 80033e0:	e7c9      	b.n	8003376 <HAL_DMA_Init+0x42>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033e2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80033e4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80033e6:	4301      	orrs	r1, r0
 80033e8:	430a      	orrs	r2, r1
 80033ea:	e7db      	b.n	80033a4 <HAL_DMA_Init+0x70>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033ec:	2340      	movs	r3, #64	@ 0x40
 80033ee:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80033f0:	2001      	movs	r0, #1
 80033f2:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        return HAL_ERROR; 
 80033f6:	e7be      	b.n	8003376 <HAL_DMA_Init+0x42>
    return HAL_ERROR;
 80033f8:	2001      	movs	r0, #1
 80033fa:	e7bc      	b.n	8003376 <HAL_DMA_Init+0x42>
 80033fc:	f010803f 	.word	0xf010803f

08003400 <HAL_DMA_Start_IT>:
{
 8003400:	b538      	push	{r3, r4, r5, lr}
 8003402:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003404:	6d85      	ldr	r5, [r0, #88]	@ 0x58
  __HAL_LOCK(hdma);
 8003406:	f890 0034 	ldrb.w	r0, [r0, #52]	@ 0x34
 800340a:	2801      	cmp	r0, #1
 800340c:	d02b      	beq.n	8003466 <HAL_DMA_Start_IT+0x66>
 800340e:	2001      	movs	r0, #1
 8003410:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003414:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
 8003418:	b2c0      	uxtb	r0, r0
 800341a:	2801      	cmp	r0, #1
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 800341e:	2300      	movs	r3, #0
 8003420:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    status = HAL_BUSY;
 8003424:	2002      	movs	r0, #2
}
 8003426:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8003428:	2002      	movs	r0, #2
 800342a:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800342e:	2000      	movs	r0, #0
 8003430:	6560      	str	r0, [r4, #84]	@ 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003432:	4620      	mov	r0, r4
 8003434:	f7ff ff02 	bl	800323c <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003438:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800343a:	233f      	movs	r3, #63	@ 0x3f
 800343c:	4093      	lsls	r3, r2
 800343e:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	6813      	ldr	r3, [r2, #0]
 8003444:	f043 0316 	orr.w	r3, r3, #22
 8003448:	6013      	str	r3, [r2, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800344a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800344c:	b123      	cbz	r3, 8003458 <HAL_DMA_Start_IT+0x58>
      hdma->Instance->CR  |= DMA_IT_HT;
 800344e:	6822      	ldr	r2, [r4, #0]
 8003450:	6813      	ldr	r3, [r2, #0]
 8003452:	f043 0308 	orr.w	r3, r3, #8
 8003456:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8003458:	6822      	ldr	r2, [r4, #0]
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003462:	2000      	movs	r0, #0
 8003464:	e7df      	b.n	8003426 <HAL_DMA_Start_IT+0x26>
  __HAL_LOCK(hdma);
 8003466:	2002      	movs	r0, #2
 8003468:	e7dd      	b.n	8003426 <HAL_DMA_Start_IT+0x26>

0800346a <HAL_DMA_Abort>:
{
 800346a:	b570      	push	{r4, r5, r6, lr}
 800346c:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800346e:	6d86      	ldr	r6, [r0, #88]	@ 0x58
  uint32_t tickstart = HAL_GetTick();
 8003470:	f7ff fb9c 	bl	8002bac <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003474:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d006      	beq.n	800348c <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800347e:	2380      	movs	r3, #128	@ 0x80
 8003480:	6563      	str	r3, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hdma);
 8003482:	2300      	movs	r3, #0
 8003484:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    return HAL_ERROR;
 8003488:	2001      	movs	r0, #1
}
 800348a:	bd70      	pop	{r4, r5, r6, pc}
 800348c:	4605      	mov	r5, r0
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800348e:	6822      	ldr	r2, [r4, #0]
 8003490:	6813      	ldr	r3, [r2, #0]
 8003492:	f023 0316 	bic.w	r3, r3, #22
 8003496:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003498:	6822      	ldr	r2, [r4, #0]
 800349a:	6953      	ldr	r3, [r2, #20]
 800349c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034a0:	6153      	str	r3, [r2, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80034a4:	b1e3      	cbz	r3, 80034e0 <HAL_DMA_Abort+0x76>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a6:	6822      	ldr	r2, [r4, #0]
 80034a8:	6813      	ldr	r3, [r2, #0]
 80034aa:	f023 0308 	bic.w	r3, r3, #8
 80034ae:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80034b0:	6822      	ldr	r2, [r4, #0]
 80034b2:	6813      	ldr	r3, [r2, #0]
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	6013      	str	r3, [r2, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f013 0f01 	tst.w	r3, #1
 80034c2:	d011      	beq.n	80034e8 <HAL_DMA_Abort+0x7e>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034c4:	f7ff fb72 	bl	8002bac <HAL_GetTick>
 80034c8:	1b43      	subs	r3, r0, r5
 80034ca:	2b05      	cmp	r3, #5
 80034cc:	d9f5      	bls.n	80034ba <HAL_DMA_Abort+0x50>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034ce:	2320      	movs	r3, #32
 80034d0:	6563      	str	r3, [r4, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034d2:	2003      	movs	r0, #3
 80034d4:	f884 0035 	strb.w	r0, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80034d8:	2300      	movs	r3, #0
 80034da:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        return HAL_TIMEOUT;
 80034de:	e7d4      	b.n	800348a <HAL_DMA_Abort+0x20>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80034e0:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1df      	bne.n	80034a6 <HAL_DMA_Abort+0x3c>
 80034e6:	e7e3      	b.n	80034b0 <HAL_DMA_Abort+0x46>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034e8:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80034ea:	233f      	movs	r3, #63	@ 0x3f
 80034ec:	4093      	lsls	r3, r2
 80034ee:	60b3      	str	r3, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80034f6:	2000      	movs	r0, #0
 80034f8:	f884 0034 	strb.w	r0, [r4, #52]	@ 0x34
  return HAL_OK;
 80034fc:	e7c5      	b.n	800348a <HAL_DMA_Abort+0x20>

080034fe <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034fe:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d003      	beq.n	8003510 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003508:	2380      	movs	r3, #128	@ 0x80
 800350a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 800350c:	2001      	movs	r0, #1
 800350e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_ABORT;
 8003510:	2305      	movs	r3, #5
 8003512:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
    __HAL_DMA_DISABLE(hdma);
 8003516:	6802      	ldr	r2, [r0, #0]
 8003518:	6813      	ldr	r3, [r2, #0]
 800351a:	f023 0301 	bic.w	r3, r3, #1
 800351e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003520:	2000      	movs	r0, #0
}
 8003522:	4770      	bx	lr

08003524 <HAL_DMA_IRQHandler>:
{
 8003524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003526:	b083      	sub	sp, #12
 8003528:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800352e:	4b72      	ldr	r3, [pc, #456]	@ (80036f8 <HAL_DMA_IRQHandler+0x1d4>)
 8003530:	681d      	ldr	r5, [r3, #0]
 8003532:	4b72      	ldr	r3, [pc, #456]	@ (80036fc <HAL_DMA_IRQHandler+0x1d8>)
 8003534:	fba3 3505 	umull	r3, r5, r3, r5
 8003538:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353a:	6d87      	ldr	r7, [r0, #88]	@ 0x58
  tmpisr = regs->ISR;
 800353c:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800353e:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8003540:	2308      	movs	r3, #8
 8003542:	4093      	lsls	r3, r2
 8003544:	4233      	tst	r3, r6
 8003546:	d010      	beq.n	800356a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003548:	6803      	ldr	r3, [r0, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f012 0f04 	tst.w	r2, #4
 8003550:	d00b      	beq.n	800356a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	f022 0204 	bic.w	r2, r2, #4
 8003558:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800355a:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 800355c:	2308      	movs	r3, #8
 800355e:	4093      	lsls	r3, r2
 8003560:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003562:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6543      	str	r3, [r0, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800356a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800356c:	2301      	movs	r3, #1
 800356e:	4093      	lsls	r3, r2
 8003570:	4233      	tst	r3, r6
 8003572:	d009      	beq.n	8003588 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003574:	6822      	ldr	r2, [r4, #0]
 8003576:	6952      	ldr	r2, [r2, #20]
 8003578:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800357c:	d004      	beq.n	8003588 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800357e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003580:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003582:	f043 0302 	orr.w	r3, r3, #2
 8003586:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800358a:	2304      	movs	r3, #4
 800358c:	4093      	lsls	r3, r2
 800358e:	4233      	tst	r3, r6
 8003590:	d009      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	6812      	ldr	r2, [r2, #0]
 8003596:	f012 0f02 	tst.w	r2, #2
 800359a:	d004      	beq.n	80035a6 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800359c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800359e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80035a0:	f043 0304 	orr.w	r3, r3, #4
 80035a4:	6563      	str	r3, [r4, #84]	@ 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035a6:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80035a8:	2310      	movs	r3, #16
 80035aa:	4093      	lsls	r3, r2
 80035ac:	4233      	tst	r3, r6
 80035ae:	d024      	beq.n	80035fa <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80035b0:	6822      	ldr	r2, [r4, #0]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	f012 0f08 	tst.w	r2, #8
 80035b8:	d01f      	beq.n	80035fa <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80035ba:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 80035c4:	d00d      	beq.n	80035e2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 80035cc:	d104      	bne.n	80035d8 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 80035ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035d0:	b19b      	cbz	r3, 80035fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 80035d2:	4620      	mov	r0, r4
 80035d4:	4798      	blx	r3
 80035d6:	e010      	b.n	80035fa <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80035d8:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 80035da:	b173      	cbz	r3, 80035fa <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 80035dc:	4620      	mov	r0, r4
 80035de:	4798      	blx	r3
 80035e0:	e00b      	b.n	80035fa <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 80035e8:	d103      	bne.n	80035f2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	f022 0208 	bic.w	r2, r2, #8
 80035f0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80035f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80035f4:	b10b      	cbz	r3, 80035fa <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80035f6:	4620      	mov	r0, r4
 80035f8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035fa:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 80035fc:	2320      	movs	r3, #32
 80035fe:	4093      	lsls	r3, r2
 8003600:	4233      	tst	r3, r6
 8003602:	d055      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003604:	6822      	ldr	r2, [r4, #0]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	f012 0f10 	tst.w	r2, #16
 800360c:	d050      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800360e:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003610:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 8003614:	b2db      	uxtb	r3, r3
 8003616:	2b05      	cmp	r3, #5
 8003618:	d00e      	beq.n	8003638 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	f412 2f80 	tst.w	r2, #262144	@ 0x40000
 8003622:	d033      	beq.n	800368c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f413 2f00 	tst.w	r3, #524288	@ 0x80000
 800362a:	d12a      	bne.n	8003682 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 800362c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800362e:	2b00      	cmp	r3, #0
 8003630:	d03e      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 8003632:	4620      	mov	r0, r4
 8003634:	4798      	blx	r3
 8003636:	e03b      	b.n	80036b0 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003638:	6822      	ldr	r2, [r4, #0]
 800363a:	6813      	ldr	r3, [r2, #0]
 800363c:	f023 0316 	bic.w	r3, r3, #22
 8003640:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	6953      	ldr	r3, [r2, #20]
 8003646:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800364a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800364c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800364e:	b1a3      	cbz	r3, 800367a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003650:	6822      	ldr	r2, [r4, #0]
 8003652:	6813      	ldr	r3, [r2, #0]
 8003654:	f023 0308 	bic.w	r3, r3, #8
 8003658:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800365a:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 800365c:	233f      	movs	r3, #63	@ 0x3f
 800365e:	4093      	lsls	r3, r2
 8003660:	60bb      	str	r3, [r7, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003662:	2301      	movs	r3, #1
 8003664:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8003668:	2300      	movs	r3, #0
 800366a:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferAbortCallback != NULL)
 800366e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8003670:	2b00      	cmp	r3, #0
 8003672:	d03f      	beq.n	80036f4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8003674:	4620      	mov	r0, r4
 8003676:	4798      	blx	r3
        return;
 8003678:	e03c      	b.n	80036f4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800367a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e7      	bne.n	8003650 <HAL_DMA_IRQHandler+0x12c>
 8003680:	e7eb      	b.n	800365a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8003682:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003684:	b1a3      	cbz	r3, 80036b0 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8003686:	4620      	mov	r0, r4
 8003688:	4798      	blx	r3
 800368a:	e011      	b.n	80036b0 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8003692:	d109      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	f022 0210 	bic.w	r2, r2, #16
 800369a:	601a      	str	r2, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800369c:	2301      	movs	r3, #1
 800369e:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
          __HAL_UNLOCK(hdma);
 80036a2:	2300      	movs	r3, #0
 80036a4:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
        if(hdma->XferCpltCallback != NULL)
 80036a8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80036aa:	b10b      	cbz	r3, 80036b0 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 80036ac:	4620      	mov	r0, r4
 80036ae:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80036b2:	b1fb      	cbz	r3, 80036f4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036b4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80036b6:	f013 0f01 	tst.w	r3, #1
 80036ba:	d017      	beq.n	80036ec <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 80036bc:	2305      	movs	r3, #5
 80036be:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 80036c2:	6822      	ldr	r2, [r4, #0]
 80036c4:	6813      	ldr	r3, [r2, #0]
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80036cc:	9b01      	ldr	r3, [sp, #4]
 80036ce:	3301      	adds	r3, #1
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	42ab      	cmp	r3, r5
 80036d4:	d804      	bhi.n	80036e0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036d6:	6823      	ldr	r3, [r4, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f013 0f01 	tst.w	r3, #1
 80036de:	d1f5      	bne.n	80036cc <HAL_DMA_IRQHandler+0x1a8>
      hdma->State = HAL_DMA_STATE_READY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	f884 3035 	strb.w	r3, [r4, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 80036e6:	2300      	movs	r3, #0
 80036e8:	f884 3034 	strb.w	r3, [r4, #52]	@ 0x34
    if(hdma->XferErrorCallback != NULL)
 80036ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80036ee:	b10b      	cbz	r3, 80036f4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80036f0:	4620      	mov	r0, r4
 80036f2:	4798      	blx	r3
}
 80036f4:	b003      	add	sp, #12
 80036f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036f8:	2000003c 	.word	0x2000003c
 80036fc:	1b4e81b5 	.word	0x1b4e81b5

08003700 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003700:	2300      	movs	r3, #0
 8003702:	2b0f      	cmp	r3, #15
 8003704:	f200 80e3 	bhi.w	80038ce <HAL_GPIO_Init+0x1ce>
{
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	e065      	b.n	80037da <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800370e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003710:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003714:	2403      	movs	r4, #3
 8003716:	fa04 f40e 	lsl.w	r4, r4, lr
 800371a:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371e:	68cc      	ldr	r4, [r1, #12]
 8003720:	fa04 f40e 	lsl.w	r4, r4, lr
 8003724:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8003726:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003728:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800372a:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800372e:	684a      	ldr	r2, [r1, #4]
 8003730:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8003734:	409a      	lsls	r2, r3
 8003736:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8003738:	6042      	str	r2, [r0, #4]
 800373a:	e05c      	b.n	80037f6 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800373c:	08dc      	lsrs	r4, r3, #3
 800373e:	3408      	adds	r4, #8
 8003740:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003744:	f003 0507 	and.w	r5, r3, #7
 8003748:	00ad      	lsls	r5, r5, #2
 800374a:	f04f 0e0f 	mov.w	lr, #15
 800374e:	fa0e fe05 	lsl.w	lr, lr, r5
 8003752:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003756:	690a      	ldr	r2, [r1, #16]
 8003758:	40aa      	lsls	r2, r5
 800375a:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 800375e:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 8003762:	e05c      	b.n	800381e <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003764:	2206      	movs	r2, #6
 8003766:	e000      	b.n	800376a <HAL_GPIO_Init+0x6a>
 8003768:	2200      	movs	r2, #0
 800376a:	fa02 f20e 	lsl.w	r2, r2, lr
 800376e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003770:	3402      	adds	r4, #2
 8003772:	4d57      	ldr	r5, [pc, #348]	@ (80038d0 <HAL_GPIO_Init+0x1d0>)
 8003774:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003778:	4a56      	ldr	r2, [pc, #344]	@ (80038d4 <HAL_GPIO_Init+0x1d4>)
 800377a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800377c:	ea6f 020c 	mvn.w	r2, ip
 8003780:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003784:	684e      	ldr	r6, [r1, #4]
 8003786:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 800378a:	d001      	beq.n	8003790 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 800378c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8003790:	4c50      	ldr	r4, [pc, #320]	@ (80038d4 <HAL_GPIO_Init+0x1d4>)
 8003792:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8003794:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8003796:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800379a:	684e      	ldr	r6, [r1, #4]
 800379c:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
 80037a0:	d001      	beq.n	80037a6 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80037a2:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80037a6:	4c4b      	ldr	r4, [pc, #300]	@ (80038d4 <HAL_GPIO_Init+0x1d4>)
 80037a8:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80037aa:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80037b0:	684e      	ldr	r6, [r1, #4]
 80037b2:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 80037b6:	d001      	beq.n	80037bc <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 80037b8:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 80037bc:	4c45      	ldr	r4, [pc, #276]	@ (80038d4 <HAL_GPIO_Init+0x1d4>)
 80037be:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037c0:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 80037c2:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80037c4:	684d      	ldr	r5, [r1, #4]
 80037c6:	f415 3f80 	tst.w	r5, #65536	@ 0x10000
 80037ca:	d001      	beq.n	80037d0 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 80037cc:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 80037d0:	4c40      	ldr	r4, [pc, #256]	@ (80038d4 <HAL_GPIO_Init+0x1d4>)
 80037d2:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037d4:	3301      	adds	r3, #1
 80037d6:	2b0f      	cmp	r3, #15
 80037d8:	d877      	bhi.n	80038ca <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 80037da:	2201      	movs	r2, #1
 80037dc:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037de:	680c      	ldr	r4, [r1, #0]
 80037e0:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 80037e4:	ea32 0404 	bics.w	r4, r2, r4
 80037e8:	d1f4      	bne.n	80037d4 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80037ea:	684c      	ldr	r4, [r1, #4]
 80037ec:	f004 0403 	and.w	r4, r4, #3
 80037f0:	3c01      	subs	r4, #1
 80037f2:	2c01      	cmp	r4, #1
 80037f4:	d98b      	bls.n	800370e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037f6:	684a      	ldr	r2, [r1, #4]
 80037f8:	f002 0203 	and.w	r2, r2, #3
 80037fc:	2a03      	cmp	r2, #3
 80037fe:	d009      	beq.n	8003814 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8003800:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003802:	005d      	lsls	r5, r3, #1
 8003804:	2203      	movs	r2, #3
 8003806:	40aa      	lsls	r2, r5
 8003808:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800380c:	688a      	ldr	r2, [r1, #8]
 800380e:	40aa      	lsls	r2, r5
 8003810:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8003812:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003814:	684a      	ldr	r2, [r1, #4]
 8003816:	f002 0203 	and.w	r2, r2, #3
 800381a:	2a02      	cmp	r2, #2
 800381c:	d08e      	beq.n	800373c <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 800381e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003820:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f20e 	lsl.w	r2, r2, lr
 800382a:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800382e:	684a      	ldr	r2, [r1, #4]
 8003830:	f002 0203 	and.w	r2, r2, #3
 8003834:	fa02 f20e 	lsl.w	r2, r2, lr
 8003838:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800383a:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800383c:	684a      	ldr	r2, [r1, #4]
 800383e:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
 8003842:	d0c7      	beq.n	80037d4 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003844:	2200      	movs	r2, #0
 8003846:	9201      	str	r2, [sp, #4]
 8003848:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <HAL_GPIO_Init+0x1d8>)
 800384a:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800384c:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8003850:	6454      	str	r4, [r2, #68]	@ 0x44
 8003852:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003854:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003858:	9201      	str	r2, [sp, #4]
 800385a:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800385c:	089c      	lsrs	r4, r3, #2
 800385e:	1ca5      	adds	r5, r4, #2
 8003860:	4a1b      	ldr	r2, [pc, #108]	@ (80038d0 <HAL_GPIO_Init+0x1d0>)
 8003862:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003866:	f003 0e03 	and.w	lr, r3, #3
 800386a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800386e:	220f      	movs	r2, #15
 8003870:	fa02 f20e 	lsl.w	r2, r2, lr
 8003874:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003878:	4a18      	ldr	r2, [pc, #96]	@ (80038dc <HAL_GPIO_Init+0x1dc>)
 800387a:	4290      	cmp	r0, r2
 800387c:	f43f af74 	beq.w	8003768 <HAL_GPIO_Init+0x68>
 8003880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003884:	4290      	cmp	r0, r2
 8003886:	d016      	beq.n	80038b6 <HAL_GPIO_Init+0x1b6>
 8003888:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800388c:	4290      	cmp	r0, r2
 800388e:	d014      	beq.n	80038ba <HAL_GPIO_Init+0x1ba>
 8003890:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8003894:	4290      	cmp	r0, r2
 8003896:	d012      	beq.n	80038be <HAL_GPIO_Init+0x1be>
 8003898:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800389c:	4290      	cmp	r0, r2
 800389e:	d010      	beq.n	80038c2 <HAL_GPIO_Init+0x1c2>
 80038a0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038a4:	4290      	cmp	r0, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_GPIO_Init+0x1c6>
 80038a8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80038ac:	4290      	cmp	r0, r2
 80038ae:	f43f af59 	beq.w	8003764 <HAL_GPIO_Init+0x64>
 80038b2:	2207      	movs	r2, #7
 80038b4:	e759      	b.n	800376a <HAL_GPIO_Init+0x6a>
 80038b6:	2201      	movs	r2, #1
 80038b8:	e757      	b.n	800376a <HAL_GPIO_Init+0x6a>
 80038ba:	2202      	movs	r2, #2
 80038bc:	e755      	b.n	800376a <HAL_GPIO_Init+0x6a>
 80038be:	2203      	movs	r2, #3
 80038c0:	e753      	b.n	800376a <HAL_GPIO_Init+0x6a>
 80038c2:	2204      	movs	r2, #4
 80038c4:	e751      	b.n	800376a <HAL_GPIO_Init+0x6a>
 80038c6:	2205      	movs	r2, #5
 80038c8:	e74f      	b.n	800376a <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 80038ca:	b002      	add	sp, #8
 80038cc:	bd70      	pop	{r4, r5, r6, pc}
 80038ce:	4770      	bx	lr
 80038d0:	40013800 	.word	0x40013800
 80038d4:	40013c00 	.word	0x40013c00
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80038e0:	6903      	ldr	r3, [r0, #16]
 80038e2:	4219      	tst	r1, r3
 80038e4:	d001      	beq.n	80038ea <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80038e6:	2001      	movs	r0, #1
 80038e8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80038ea:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80038ec:	4770      	bx	lr

080038ee <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80038ee:	b10a      	cbz	r2, 80038f4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038f0:	6181      	str	r1, [r0, #24]
 80038f2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80038f4:	0409      	lsls	r1, r1, #16
 80038f6:	6181      	str	r1, [r0, #24]
  }
}
 80038f8:	4770      	bx	lr

080038fa <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038fa:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038fc:	ea01 0203 	and.w	r2, r1, r3
 8003900:	ea21 0103 	bic.w	r1, r1, r3
 8003904:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003908:	6181      	str	r1, [r0, #24]
}
 800390a:	4770      	bx	lr

0800390c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800390c:	b510      	push	{r4, lr}
 800390e:	b082      	sub	sp, #8
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8003910:	2300      	movs	r3, #0
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	4b19      	ldr	r3, [pc, #100]	@ (800397c <HAL_PWREx_EnableOverDrive+0x70>)
 8003916:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003918:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800391c:	641a      	str	r2, [r3, #64]	@ 0x40
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003928:	4b15      	ldr	r3, [pc, #84]	@ (8003980 <HAL_PWREx_EnableOverDrive+0x74>)
 800392a:	2201      	movs	r2, #1
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get tick */
  tickstart = HAL_GetTick();
 800392e:	f7ff f93d 	bl	8002bac <HAL_GetTick>
 8003932:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003934:	4b13      	ldr	r3, [pc, #76]	@ (8003984 <HAL_PWREx_EnableOverDrive+0x78>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800393c:	d108      	bne.n	8003950 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800393e:	f7ff f935 	bl	8002bac <HAL_GetTick>
 8003942:	1b00      	subs	r0, r0, r4
 8003944:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003948:	d9f4      	bls.n	8003934 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 800394a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 800394c:	b002      	add	sp, #8
 800394e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_PWREx_EnableOverDrive+0x74>)
 8003952:	2201      	movs	r2, #1
 8003954:	645a      	str	r2, [r3, #68]	@ 0x44
  tickstart = HAL_GetTick();
 8003956:	f7ff f929 	bl	8002bac <HAL_GetTick>
 800395a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800395c:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <HAL_PWREx_EnableOverDrive+0x78>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003964:	d107      	bne.n	8003976 <HAL_PWREx_EnableOverDrive+0x6a>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003966:	f7ff f921 	bl	8002bac <HAL_GetTick>
 800396a:	1b00      	subs	r0, r0, r4
 800396c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8003970:	d9f4      	bls.n	800395c <HAL_PWREx_EnableOverDrive+0x50>
      return HAL_TIMEOUT;
 8003972:	2003      	movs	r0, #3
 8003974:	e7ea      	b.n	800394c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 8003976:	2000      	movs	r0, #0
 8003978:	e7e8      	b.n	800394c <HAL_PWREx_EnableOverDrive+0x40>
 800397a:	bf00      	nop
 800397c:	40023800 	.word	0x40023800
 8003980:	420e0000 	.word	0x420e0000
 8003984:	40007000 	.word	0x40007000

08003988 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003988:	2800      	cmp	r0, #0
 800398a:	f000 809b 	beq.w	8003ac4 <HAL_RCC_ClockConfig+0x13c>
{
 800398e:	b570      	push	{r4, r5, r6, lr}
 8003990:	460d      	mov	r5, r1
 8003992:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003994:	4b4f      	ldr	r3, [pc, #316]	@ (8003ad4 <HAL_RCC_ClockConfig+0x14c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	428b      	cmp	r3, r1
 800399e:	d208      	bcs.n	80039b2 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039a0:	b2cb      	uxtb	r3, r1
 80039a2:	4a4c      	ldr	r2, [pc, #304]	@ (8003ad4 <HAL_RCC_ClockConfig+0x14c>)
 80039a4:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	6813      	ldr	r3, [r2, #0]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	428b      	cmp	r3, r1
 80039ae:	f040 808b 	bne.w	8003ac8 <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	f013 0f02 	tst.w	r3, #2
 80039b8:	d017      	beq.n	80039ea <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039ba:	f013 0f04 	tst.w	r3, #4
 80039be:	d004      	beq.n	80039ca <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039c0:	4a45      	ldr	r2, [pc, #276]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 80039c2:	6893      	ldr	r3, [r2, #8]
 80039c4:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039c8:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	f013 0f08 	tst.w	r3, #8
 80039d0:	d004      	beq.n	80039dc <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039d2:	4a41      	ldr	r2, [pc, #260]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 80039d4:	6893      	ldr	r3, [r2, #8]
 80039d6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80039da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039dc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 80039de:	6893      	ldr	r3, [r2, #8]
 80039e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039e4:	68a1      	ldr	r1, [r4, #8]
 80039e6:	430b      	orrs	r3, r1
 80039e8:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ea:	6823      	ldr	r3, [r4, #0]
 80039ec:	f013 0f01 	tst.w	r3, #1
 80039f0:	d032      	beq.n	8003a58 <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039f2:	6863      	ldr	r3, [r4, #4]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d021      	beq.n	8003a3c <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039f8:	1e9a      	subs	r2, r3, #2
 80039fa:	2a01      	cmp	r2, #1
 80039fc:	d925      	bls.n	8003a4a <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	4a36      	ldr	r2, [pc, #216]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a00:	6812      	ldr	r2, [r2, #0]
 8003a02:	f012 0f02 	tst.w	r2, #2
 8003a06:	d061      	beq.n	8003acc <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a08:	4933      	ldr	r1, [pc, #204]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a0a:	688a      	ldr	r2, [r1, #8]
 8003a0c:	f022 0203 	bic.w	r2, r2, #3
 8003a10:	4313      	orrs	r3, r2
 8003a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a14:	f7ff f8ca 	bl	8002bac <HAL_GetTick>
 8003a18:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2f      	ldr	r3, [pc, #188]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	6862      	ldr	r2, [r4, #4]
 8003a24:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003a28:	d016      	beq.n	8003a58 <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a2a:	f7ff f8bf 	bl	8002bac <HAL_GetTick>
 8003a2e:	1b80      	subs	r0, r0, r6
 8003a30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a34:	4298      	cmp	r0, r3
 8003a36:	d9f0      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8003a38:	2003      	movs	r0, #3
 8003a3a:	e042      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3c:	4a26      	ldr	r2, [pc, #152]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8003a44:	d1e0      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
 8003a48:	e03b      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a4a:	4a23      	ldr	r2, [pc, #140]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a4c:	6812      	ldr	r2, [r2, #0]
 8003a4e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8003a52:	d1d9      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8003a54:	2001      	movs	r0, #1
 8003a56:	e034      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a58:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad4 <HAL_RCC_ClockConfig+0x14c>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	42ab      	cmp	r3, r5
 8003a62:	d907      	bls.n	8003a74 <HAL_RCC_ClockConfig+0xec>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a64:	b2ea      	uxtb	r2, r5
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCC_ClockConfig+0x14c>)
 8003a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 030f 	and.w	r3, r3, #15
 8003a70:	42ab      	cmp	r3, r5
 8003a72:	d12d      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a74:	6823      	ldr	r3, [r4, #0]
 8003a76:	f013 0f04 	tst.w	r3, #4
 8003a7a:	d006      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a7c:	4a16      	ldr	r2, [pc, #88]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a7e:	6893      	ldr	r3, [r2, #8]
 8003a80:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 8003a84:	68e1      	ldr	r1, [r4, #12]
 8003a86:	430b      	orrs	r3, r1
 8003a88:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	f013 0f08 	tst.w	r3, #8
 8003a90:	d007      	beq.n	8003aa2 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a92:	4a11      	ldr	r2, [pc, #68]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003a94:	6893      	ldr	r3, [r2, #8]
 8003a96:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8003a9a:	6921      	ldr	r1, [r4, #16]
 8003a9c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003aa0:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003aa2:	f000 f847 	bl	8003b34 <HAL_RCC_GetSysClockFreq>
 8003aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ad8 <HAL_RCC_ClockConfig+0x150>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003aae:	4a0b      	ldr	r2, [pc, #44]	@ (8003adc <HAL_RCC_ClockConfig+0x154>)
 8003ab0:	5cd3      	ldrb	r3, [r2, r3]
 8003ab2:	40d8      	lsrs	r0, r3
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <HAL_RCC_ClockConfig+0x158>)
 8003ab6:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <HAL_RCC_ClockConfig+0x15c>)
 8003aba:	6818      	ldr	r0, [r3, #0]
 8003abc:	f7ff f82a 	bl	8002b14 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2000      	movs	r0, #0
}
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003ac4:	2001      	movs	r0, #1
}
 8003ac6:	4770      	bx	lr
      return HAL_ERROR;
 8003ac8:	2001      	movs	r0, #1
 8003aca:	e7fa      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8003acc:	2001      	movs	r0, #1
 8003ace:	e7f8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8003ad0:	2001      	movs	r0, #1
 8003ad2:	e7f6      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x13a>
 8003ad4:	40023c00 	.word	0x40023c00
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	08007ae0 	.word	0x08007ae0
 8003ae0:	2000003c 	.word	0x2000003c
 8003ae4:	2000004c 	.word	0x2000004c

08003ae8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8003ae8:	4b01      	ldr	r3, [pc, #4]	@ (8003af0 <HAL_RCC_GetHCLKFreq+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	2000003c 	.word	0x2000003c

08003af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af4:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003af6:	f7ff fff7 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x18>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003b02:	4a03      	ldr	r2, [pc, #12]	@ (8003b10 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b04:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b06:	40d8      	lsrs	r0, r3
 8003b08:	bd08      	pop	{r3, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40023800 	.word	0x40023800
 8003b10:	08007ad8 	.word	0x08007ad8

08003b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b14:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b16:	f7ff ffe7 	bl	8003ae8 <HAL_RCC_GetHCLKFreq>
 8003b1a:	4b04      	ldr	r3, [pc, #16]	@ (8003b2c <HAL_RCC_GetPCLK2Freq+0x18>)
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003b22:	4a03      	ldr	r2, [pc, #12]	@ (8003b30 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b24:	5cd3      	ldrb	r3, [r2, r3]
}
 8003b26:	40d8      	lsrs	r0, r3
 8003b28:	bd08      	pop	{r3, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	08007ad8 	.word	0x08007ad8

08003b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b34:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b36:	4b60      	ldr	r3, [pc, #384]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d006      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x1c>
 8003b42:	2b0c      	cmp	r3, #12
 8003b44:	d05e      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0xd0>
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	f040 80b4 	bne.w	8003cb4 <HAL_RCC_GetSysClockFreq+0x180>
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b4c:	485b      	ldr	r0, [pc, #364]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x188>)
 8003b4e:	e033      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b50:	4b59      	ldr	r3, [pc, #356]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003b5e:	d02c      	beq.n	8003bba <HAL_RCC_GetSysClockFreq+0x86>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b60:	4b55      	ldr	r3, [pc, #340]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003b62:	6858      	ldr	r0, [r3, #4]
 8003b64:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003b68:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003b6c:	ebbc 0c00 	subs.w	ip, ip, r0
 8003b70:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003b74:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003b78:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003b7c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003b80:	ebb1 010c 	subs.w	r1, r1, ip
 8003b84:	eb63 030e 	sbc.w	r3, r3, lr
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8e:	00c9      	lsls	r1, r1, #3
 8003b90:	eb11 0c00 	adds.w	ip, r1, r0
 8003b94:	f143 0300 	adc.w	r3, r3, #0
 8003b98:	0259      	lsls	r1, r3, #9
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003ba0:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003ba4:	f7fd f870 	bl	8000c88 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ba8:	4b43      	ldr	r3, [pc, #268]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003bb4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003bb8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bba:	4b3f      	ldr	r3, [pc, #252]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bbc:	6858      	ldr	r0, [r3, #4]
 8003bbe:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003bc2:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003bc6:	ebbc 0c00 	subs.w	ip, ip, r0
 8003bca:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003bce:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003bd2:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003bd6:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003bda:	ebb1 010c 	subs.w	r1, r1, ip
 8003bde:	eb63 030e 	sbc.w	r3, r3, lr
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be8:	00c9      	lsls	r1, r1, #3
 8003bea:	eb11 0c00 	adds.w	ip, r1, r0
 8003bee:	f143 0300 	adc.w	r3, r3, #0
 8003bf2:	0299      	lsls	r1, r3, #10
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003bfa:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003bfe:	f7fd f843 	bl	8000c88 <__aeabi_uldivmod>
 8003c02:	e7d1      	b.n	8003ba8 <HAL_RCC_GetSysClockFreq+0x74>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c04:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c06:	685a      	ldr	r2, [r3, #4]
 8003c08:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCC_GetSysClockFreq+0x136>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b28      	ldr	r3, [pc, #160]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c16:	6858      	ldr	r0, [r3, #4]
 8003c18:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003c1c:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003c20:	ebbc 0c00 	subs.w	ip, ip, r0
 8003c24:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c28:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c2c:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003c30:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003c34:	ebb1 010c 	subs.w	r1, r1, ip
 8003c38:	eb63 030e 	sbc.w	r3, r3, lr
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c42:	00c9      	lsls	r1, r1, #3
 8003c44:	eb11 0c00 	adds.w	ip, r1, r0
 8003c48:	f143 0300 	adc.w	r3, r3, #0
 8003c4c:	0259      	lsls	r1, r3, #9
 8003c4e:	2300      	movs	r3, #0
 8003c50:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8003c54:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8003c58:	f7fd f816 	bl	8000c88 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c5c:	4b16      	ldr	r3, [pc, #88]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco/pllr;
 8003c64:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8003c68:	e7a6      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x84>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c6a:	4b13      	ldr	r3, [pc, #76]	@ (8003cb8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c6c:	6858      	ldr	r0, [r3, #4]
 8003c6e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003c72:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8003c76:	ebbc 0c00 	subs.w	ip, ip, r0
 8003c7a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8003c7e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8003c82:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8003c86:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8003c8a:	ebb1 010c 	subs.w	r1, r1, ip
 8003c8e:	eb63 030e 	sbc.w	r3, r3, lr
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c98:	00c9      	lsls	r1, r1, #3
 8003c9a:	eb11 0c00 	adds.w	ip, r1, r0
 8003c9e:	f143 0300 	adc.w	r3, r3, #0
 8003ca2:	0299      	lsls	r1, r3, #10
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8003caa:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8003cae:	f7fc ffeb 	bl	8000c88 <__aeabi_uldivmod>
 8003cb2:	e7d3      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x128>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb4:	4802      	ldr	r0, [pc, #8]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x18c>)
  return sysclockfreq;
 8003cb6:	e77f      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x84>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	007a1200 	.word	0x007a1200
 8003cc0:	00f42400 	.word	0x00f42400

08003cc4 <HAL_RCC_OscConfig>:
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	f000 8201 	beq.w	80040cc <HAL_RCC_OscConfig+0x408>
{
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd0:	6803      	ldr	r3, [r0, #0]
 8003cd2:	f013 0f01 	tst.w	r3, #1
 8003cd6:	d041      	beq.n	8003d5c <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cd8:	4b99      	ldr	r3, [pc, #612]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 030c 	and.w	r3, r3, #12
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d032      	beq.n	8003d4a <HAL_RCC_OscConfig+0x86>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003ce4:	4b96      	ldr	r3, [pc, #600]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d027      	beq.n	8003d40 <HAL_RCC_OscConfig+0x7c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cf0:	4b93      	ldr	r3, [pc, #588]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003cf8:	2b0c      	cmp	r3, #12
 8003cfa:	d059      	beq.n	8003db0 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cfc:	6863      	ldr	r3, [r4, #4]
 8003cfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d02:	d05b      	beq.n	8003dbc <HAL_RCC_OscConfig+0xf8>
 8003d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d08:	d05e      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x104>
 8003d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d12:	601a      	str	r2, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d1a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d1c:	6863      	ldr	r3, [r4, #4]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d05c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d22:	f7fe ff43 	bl	8002bac <HAL_GetTick>
 8003d26:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d28:	4b85      	ldr	r3, [pc, #532]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003d30:	d114      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d32:	f7fe ff3b 	bl	8002bac <HAL_GetTick>
 8003d36:	1b40      	subs	r0, r0, r5
 8003d38:	2864      	cmp	r0, #100	@ 0x64
 8003d3a:	d9f5      	bls.n	8003d28 <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8003d3c:	2003      	movs	r0, #3
 8003d3e:	e1cc      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d40:	4b7f      	ldr	r3, [pc, #508]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003d48:	d0d2      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003d52:	d003      	beq.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d54:	6863      	ldr	r3, [r4, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 81ba 	beq.w	80040d0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d5c:	6823      	ldr	r3, [r4, #0]
 8003d5e:	f013 0f02 	tst.w	r3, #2
 8003d62:	d060      	beq.n	8003e26 <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d64:	4b76      	ldr	r3, [pc, #472]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	f013 0f0c 	tst.w	r3, #12
 8003d6c:	d04a      	beq.n	8003e04 <HAL_RCC_OscConfig+0x140>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d6e:	4b74      	ldr	r3, [pc, #464]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d76:	2b08      	cmp	r3, #8
 8003d78:	d03f      	beq.n	8003dfa <HAL_RCC_OscConfig+0x136>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7a:	4b71      	ldr	r3, [pc, #452]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d82:	2b0c      	cmp	r3, #12
 8003d84:	d069      	beq.n	8003e5a <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d86:	68e3      	ldr	r3, [r4, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d075      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d8c:	4b6d      	ldr	r3, [pc, #436]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d92:	f7fe ff0b 	bl	8002bac <HAL_GetTick>
 8003d96:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d98:	4b69      	ldr	r3, [pc, #420]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f013 0f02 	tst.w	r3, #2
 8003da0:	d161      	bne.n	8003e66 <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe ff03 	bl	8002bac <HAL_GetTick>
 8003da6:	1b40      	subs	r0, r0, r5
 8003da8:	2802      	cmp	r0, #2
 8003daa:	d9f5      	bls.n	8003d98 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8003dac:	2003      	movs	r0, #3
 8003dae:	e194      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003db0:	4b63      	ldr	r3, [pc, #396]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003db8:	d0a0      	beq.n	8003cfc <HAL_RCC_OscConfig+0x38>
 8003dba:	e7c6      	b.n	8003d4a <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dbc:	4a60      	ldr	r2, [pc, #384]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003dbe:	6813      	ldr	r3, [r2, #0]
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	e7a9      	b.n	8003d1c <HAL_RCC_OscConfig+0x58>
 8003dc8:	4b5d      	ldr	r3, [pc, #372]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003dd8:	601a      	str	r2, [r3, #0]
 8003dda:	e79f      	b.n	8003d1c <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fee6 	bl	8002bac <HAL_GetTick>
 8003de0:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003de2:	4b57      	ldr	r3, [pc, #348]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8003dea:	d0b7      	beq.n	8003d5c <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dec:	f7fe fede 	bl	8002bac <HAL_GetTick>
 8003df0:	1b40      	subs	r0, r0, r5
 8003df2:	2864      	cmp	r0, #100	@ 0x64
 8003df4:	d9f5      	bls.n	8003de2 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8003df6:	2003      	movs	r0, #3
 8003df8:	e16f      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003dfa:	4b51      	ldr	r3, [pc, #324]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003e02:	d1ba      	bne.n	8003d7a <HAL_RCC_OscConfig+0xb6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e04:	4b4e      	ldr	r3, [pc, #312]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f013 0f02 	tst.w	r3, #2
 8003e0c:	d003      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
 8003e0e:	68e3      	ldr	r3, [r4, #12]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	f040 815f 	bne.w	80040d4 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4a4a      	ldr	r2, [pc, #296]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e18:	6813      	ldr	r3, [r2, #0]
 8003e1a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e1e:	6921      	ldr	r1, [r4, #16]
 8003e20:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e24:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f013 0f08 	tst.w	r3, #8
 8003e2c:	d049      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e2e:	6963      	ldr	r3, [r4, #20]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d033      	beq.n	8003e9c <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e34:	4b43      	ldr	r3, [pc, #268]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e3c:	f7fe feb6 	bl	8002bac <HAL_GetTick>
 8003e40:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e42:	4b3f      	ldr	r3, [pc, #252]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e46:	f013 0f02 	tst.w	r3, #2
 8003e4a:	d13a      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e4c:	f7fe feae 	bl	8002bac <HAL_GetTick>
 8003e50:	1b40      	subs	r0, r0, r5
 8003e52:	2802      	cmp	r0, #2
 8003e54:	d9f5      	bls.n	8003e42 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 8003e56:	2003      	movs	r0, #3
 8003e58:	e13f      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e5a:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 8003e62:	d190      	bne.n	8003d86 <HAL_RCC_OscConfig+0xc2>
 8003e64:	e7ce      	b.n	8003e04 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4a36      	ldr	r2, [pc, #216]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e68:	6813      	ldr	r3, [r2, #0]
 8003e6a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e6e:	6921      	ldr	r1, [r4, #16]
 8003e70:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003e74:	6013      	str	r3, [r2, #0]
 8003e76:	e7d6      	b.n	8003e26 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 8003e78:	4b32      	ldr	r3, [pc, #200]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fe95 	bl	8002bac <HAL_GetTick>
 8003e82:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e84:	4b2e      	ldr	r3, [pc, #184]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f013 0f02 	tst.w	r3, #2
 8003e8c:	d0cb      	beq.n	8003e26 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e8e:	f7fe fe8d 	bl	8002bac <HAL_GetTick>
 8003e92:	1b40      	subs	r0, r0, r5
 8003e94:	2802      	cmp	r0, #2
 8003e96:	d9f5      	bls.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 8003e98:	2003      	movs	r0, #3
 8003e9a:	e11e      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b29      	ldr	r3, [pc, #164]	@ (8003f44 <HAL_RCC_OscConfig+0x280>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea4:	f7fe fe82 	bl	8002bac <HAL_GetTick>
 8003ea8:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003eaa:	4b25      	ldr	r3, [pc, #148]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003eac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eae:	f013 0f02 	tst.w	r3, #2
 8003eb2:	d006      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x1fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003eb4:	f7fe fe7a 	bl	8002bac <HAL_GetTick>
 8003eb8:	1b40      	subs	r0, r0, r5
 8003eba:	2802      	cmp	r0, #2
 8003ebc:	d9f5      	bls.n	8003eaa <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 8003ebe:	2003      	movs	r0, #3
 8003ec0:	e10b      	b.n	80040da <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ec2:	6823      	ldr	r3, [r4, #0]
 8003ec4:	f013 0f04 	tst.w	r3, #4
 8003ec8:	d076      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eca:	4b1d      	ldr	r3, [pc, #116]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ece:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8003ed2:	d133      	bne.n	8003f3c <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	4b19      	ldr	r3, [pc, #100]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003edc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003ee0:	641a      	str	r2, [r3, #64]	@ 0x40
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003eec:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eee:	4b16      	ldr	r3, [pc, #88]	@ (8003f48 <HAL_RCC_OscConfig+0x284>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003ef6:	d029      	beq.n	8003f4c <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef8:	68a3      	ldr	r3, [r4, #8]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d03a      	beq.n	8003f74 <HAL_RCC_OscConfig+0x2b0>
 8003efe:	2b05      	cmp	r3, #5
 8003f00:	d03e      	beq.n	8003f80 <HAL_RCC_OscConfig+0x2bc>
 8003f02:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f06:	f022 0201 	bic.w	r2, r2, #1
 8003f0a:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f0c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f0e:	f022 0204 	bic.w	r2, r2, #4
 8003f12:	671a      	str	r2, [r3, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d03c      	beq.n	8003f94 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1a:	f7fe fe47 	bl	8002bac <HAL_GetTick>
 8003f1e:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f20:	4b07      	ldr	r3, [pc, #28]	@ (8003f40 <HAL_RCC_OscConfig+0x27c>)
 8003f22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f24:	f013 0f02 	tst.w	r3, #2
 8003f28:	d145      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f2a:	f7fe fe3f 	bl	8002bac <HAL_GetTick>
 8003f2e:	1b80      	subs	r0, r0, r6
 8003f30:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003f34:	4298      	cmp	r0, r3
 8003f36:	d9f3      	bls.n	8003f20 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 8003f38:	2003      	movs	r0, #3
 8003f3a:	e0ce      	b.n	80040da <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8003f3c:	2500      	movs	r5, #0
 8003f3e:	e7d6      	b.n	8003eee <HAL_RCC_OscConfig+0x22a>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	42470000 	.word	0x42470000
 8003f48:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4c:	4a6b      	ldr	r2, [pc, #428]	@ (80040fc <HAL_RCC_OscConfig+0x438>)
 8003f4e:	6813      	ldr	r3, [r2, #0]
 8003f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f54:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8003f56:	f7fe fe29 	bl	8002bac <HAL_GetTick>
 8003f5a:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	4b67      	ldr	r3, [pc, #412]	@ (80040fc <HAL_RCC_OscConfig+0x438>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8003f64:	d1c8      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f66:	f7fe fe21 	bl	8002bac <HAL_GetTick>
 8003f6a:	1b80      	subs	r0, r0, r6
 8003f6c:	2802      	cmp	r0, #2
 8003f6e:	d9f5      	bls.n	8003f5c <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8003f70:	2003      	movs	r0, #3
 8003f72:	e0b2      	b.n	80040da <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f74:	4a62      	ldr	r2, [pc, #392]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003f76:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7e:	e7c9      	b.n	8003f14 <HAL_RCC_OscConfig+0x250>
 8003f80:	4b5f      	ldr	r3, [pc, #380]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003f82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f84:	f042 0204 	orr.w	r2, r2, #4
 8003f88:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f8a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	671a      	str	r2, [r3, #112]	@ 0x70
 8003f92:	e7bf      	b.n	8003f14 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f94:	f7fe fe0a 	bl	8002bac <HAL_GetTick>
 8003f98:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f9a:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	f013 0f02 	tst.w	r3, #2
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_OscConfig+0x2f2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fa4:	f7fe fe02 	bl	8002bac <HAL_GetTick>
 8003fa8:	1b80      	subs	r0, r0, r6
 8003faa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003fae:	4298      	cmp	r0, r3
 8003fb0:	d9f3      	bls.n	8003f9a <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8003fb2:	2003      	movs	r0, #3
 8003fb4:	e091      	b.n	80040da <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fb6:	b9ed      	cbnz	r5, 8003ff4 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fb8:	69a3      	ldr	r3, [r4, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 808c 	beq.w	80040d8 <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fc0:	4a4f      	ldr	r2, [pc, #316]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003fc2:	6892      	ldr	r2, [r2, #8]
 8003fc4:	f002 020c 	and.w	r2, r2, #12
 8003fc8:	2a08      	cmp	r2, #8
 8003fca:	d054      	beq.n	8004076 <HAL_RCC_OscConfig+0x3b2>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d017      	beq.n	8004000 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fd0:	4b4c      	ldr	r3, [pc, #304]	@ (8004104 <HAL_RCC_OscConfig+0x440>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fde9 	bl	8002bac <HAL_GetTick>
 8003fda:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fdc:	4b48      	ldr	r3, [pc, #288]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8003fe4:	d045      	beq.n	8004072 <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fe6:	f7fe fde1 	bl	8002bac <HAL_GetTick>
 8003fea:	1b00      	subs	r0, r0, r4
 8003fec:	2802      	cmp	r0, #2
 8003fee:	d9f5      	bls.n	8003fdc <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8003ff0:	2003      	movs	r0, #3
 8003ff2:	e072      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ff4:	4a42      	ldr	r2, [pc, #264]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8003ff6:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8003ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ffe:	e7db      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 8004000:	4b40      	ldr	r3, [pc, #256]	@ (8004104 <HAL_RCC_OscConfig+0x440>)
 8004002:	2200      	movs	r2, #0
 8004004:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004006:	f7fe fdd1 	bl	8002bac <HAL_GetTick>
 800400a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400c:	4b3c      	ldr	r3, [pc, #240]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8004014:	d006      	beq.n	8004024 <HAL_RCC_OscConfig+0x360>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004016:	f7fe fdc9 	bl	8002bac <HAL_GetTick>
 800401a:	1b40      	subs	r0, r0, r5
 800401c:	2802      	cmp	r0, #2
 800401e:	d9f5      	bls.n	800400c <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8004020:	2003      	movs	r0, #3
 8004022:	e05a      	b.n	80040da <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004024:	69e3      	ldr	r3, [r4, #28]
 8004026:	6a22      	ldr	r2, [r4, #32]
 8004028:	4313      	orrs	r3, r2
 800402a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800402c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004030:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004032:	0852      	lsrs	r2, r2, #1
 8004034:	3a01      	subs	r2, #1
 8004036:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800403a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800403c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004040:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8004042:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004046:	4a2e      	ldr	r2, [pc, #184]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8004048:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800404a:	4b2e      	ldr	r3, [pc, #184]	@ (8004104 <HAL_RCC_OscConfig+0x440>)
 800404c:	2201      	movs	r2, #1
 800404e:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8004050:	f7fe fdac 	bl	8002bac <HAL_GetTick>
 8004054:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004056:	4b2a      	ldr	r3, [pc, #168]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800405e:	d106      	bne.n	800406e <HAL_RCC_OscConfig+0x3aa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004060:	f7fe fda4 	bl	8002bac <HAL_GetTick>
 8004064:	1b00      	subs	r0, r0, r4
 8004066:	2802      	cmp	r0, #2
 8004068:	d9f5      	bls.n	8004056 <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 800406a:	2003      	movs	r0, #3
 800406c:	e035      	b.n	80040da <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 800406e:	2000      	movs	r0, #0
 8004070:	e033      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 8004072:	2000      	movs	r0, #0
 8004074:	e031      	b.n	80040da <HAL_RCC_OscConfig+0x416>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004076:	2b01      	cmp	r3, #1
 8004078:	d031      	beq.n	80040de <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 800407a:	4b21      	ldr	r3, [pc, #132]	@ (8004100 <HAL_RCC_OscConfig+0x43c>)
 800407c:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407e:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
 8004082:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004084:	4291      	cmp	r1, r2
 8004086:	d12c      	bne.n	80040e2 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004088:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800408c:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800408e:	428a      	cmp	r2, r1
 8004090:	d129      	bne.n	80040e6 <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004092:	6a61      	ldr	r1, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004094:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004098:	401a      	ands	r2, r3
 800409a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800409e:	d124      	bne.n	80040ea <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 80040a4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80040a6:	0852      	lsrs	r2, r2, #1
 80040a8:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040aa:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80040ae:	d11e      	bne.n	80040ee <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b0:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80040b4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b6:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80040ba:	d11a      	bne.n	80040f2 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040bc:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80040c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040c2:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80040c6:	d116      	bne.n	80040f6 <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80040c8:	2000      	movs	r0, #0
 80040ca:	e006      	b.n	80040da <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80040cc:	2001      	movs	r0, #1
}
 80040ce:	4770      	bx	lr
        return HAL_ERROR;
 80040d0:	2001      	movs	r0, #1
 80040d2:	e002      	b.n	80040da <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80040d4:	2001      	movs	r0, #1
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80040d8:	2000      	movs	r0, #0
}
 80040da:	b002      	add	sp, #8
 80040dc:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80040de:	2001      	movs	r0, #1
 80040e0:	e7fb      	b.n	80040da <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80040e2:	2001      	movs	r0, #1
 80040e4:	e7f9      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040e6:	2001      	movs	r0, #1
 80040e8:	e7f7      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040ea:	2001      	movs	r0, #1
 80040ec:	e7f5      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040ee:	2001      	movs	r0, #1
 80040f0:	e7f3      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f2:	2001      	movs	r0, #1
 80040f4:	e7f1      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f6:	2001      	movs	r0, #1
 80040f8:	e7ef      	b.n	80040da <HAL_RCC_OscConfig+0x416>
 80040fa:	bf00      	nop
 80040fc:	40007000 	.word	0x40007000
 8004100:	40023800 	.word	0x40023800
 8004104:	42470000 	.word	0x42470000

08004108 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410a:	6a03      	ldr	r3, [r0, #32]
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004112:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004116:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004118:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	680c      	ldr	r4, [r1, #0]
 800411e:	ea44 040c 	orr.w	r4, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004122:	f023 0c02 	bic.w	ip, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004126:	688b      	ldr	r3, [r1, #8]
 8004128:	ea43 030c 	orr.w	r3, r3, ip

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800412c:	4d11      	ldr	r5, [pc, #68]	@ (8004174 <TIM_OC1_SetConfig+0x6c>)
 800412e:	42a8      	cmp	r0, r5
 8004130:	d003      	beq.n	800413a <TIM_OC1_SetConfig+0x32>
 8004132:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004136:	42a8      	cmp	r0, r5
 8004138:	d105      	bne.n	8004146 <TIM_OC1_SetConfig+0x3e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800413a:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800413e:	68cd      	ldr	r5, [r1, #12]
 8004140:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004142:	f023 0304 	bic.w	r3, r3, #4
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	4d0b      	ldr	r5, [pc, #44]	@ (8004174 <TIM_OC1_SetConfig+0x6c>)
 8004148:	42a8      	cmp	r0, r5
 800414a:	d003      	beq.n	8004154 <TIM_OC1_SetConfig+0x4c>
 800414c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004150:	42a8      	cmp	r0, r5
 8004152:	d107      	bne.n	8004164 <TIM_OC1_SetConfig+0x5c>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004154:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004158:	694d      	ldr	r5, [r1, #20]
 800415a:	ea45 0c02 	orr.w	ip, r5, r2
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800415e:	698a      	ldr	r2, [r1, #24]
 8004160:	ea42 020c 	orr.w	r2, r2, ip
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004164:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004166:	6184      	str	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004168:	684a      	ldr	r2, [r1, #4]
 800416a:	6342      	str	r2, [r0, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416c:	6203      	str	r3, [r0, #32]
}
 800416e:	bc30      	pop	{r4, r5}
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40010000 	.word	0x40010000

08004178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004178:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800417a:	6a03      	ldr	r3, [r0, #32]
 800417c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004180:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004182:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	6842      	ldr	r2, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004186:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004188:	f024 0c73 	bic.w	ip, r4, #115	@ 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800418c:	680c      	ldr	r4, [r1, #0]
 800418e:	ea44 050c 	orr.w	r5, r4, ip

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004196:	688c      	ldr	r4, [r1, #8]
 8004198:	ea43 2304 	orr.w	r3, r3, r4, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800419c:	4c11      	ldr	r4, [pc, #68]	@ (80041e4 <TIM_OC3_SetConfig+0x6c>)
 800419e:	42a0      	cmp	r0, r4
 80041a0:	d003      	beq.n	80041aa <TIM_OC3_SetConfig+0x32>
 80041a2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80041a6:	42a0      	cmp	r0, r4
 80041a8:	d106      	bne.n	80041b8 <TIM_OC3_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041ae:	68cc      	ldr	r4, [r1, #12]
 80041b0:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041b8:	4c0a      	ldr	r4, [pc, #40]	@ (80041e4 <TIM_OC3_SetConfig+0x6c>)
 80041ba:	42a0      	cmp	r0, r4
 80041bc:	d003      	beq.n	80041c6 <TIM_OC3_SetConfig+0x4e>
 80041be:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80041c2:	42a0      	cmp	r0, r4
 80041c4:	d107      	bne.n	80041d6 <TIM_OC3_SetConfig+0x5e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041c6:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041ca:	694c      	ldr	r4, [r1, #20]
 80041cc:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d0:	698c      	ldr	r4, [r1, #24]
 80041d2:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041d6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041d8:	61c5      	str	r5, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041da:	684a      	ldr	r2, [r1, #4]
 80041dc:	63c2      	str	r2, [r0, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041de:	6203      	str	r3, [r0, #32]
}
 80041e0:	bc30      	pop	{r4, r5}
 80041e2:	4770      	bx	lr
 80041e4:	40010000 	.word	0x40010000

080041e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ea:	6a03      	ldr	r3, [r0, #32]
 80041ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041f0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041f4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041f6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80041f8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041fc:	680d      	ldr	r5, [r1, #0]
 80041fe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004202:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004206:	688d      	ldr	r5, [r1, #8]
 8004208:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420c:	4d09      	ldr	r5, [pc, #36]	@ (8004234 <TIM_OC4_SetConfig+0x4c>)
 800420e:	42a8      	cmp	r0, r5
 8004210:	d003      	beq.n	800421a <TIM_OC4_SetConfig+0x32>
 8004212:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004216:	42a8      	cmp	r0, r5
 8004218:	d104      	bne.n	8004224 <TIM_OC4_SetConfig+0x3c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800421a:	f424 4480 	bic.w	r4, r4, #16384	@ 0x4000

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800421e:	694d      	ldr	r5, [r1, #20]
 8004220:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004224:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004226:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004228:	684a      	ldr	r2, [r1, #4]
 800422a:	6402      	str	r2, [r0, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800422c:	6203      	str	r3, [r0, #32]
}
 800422e:	bc30      	pop	{r4, r5}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40010000 	.word	0x40010000

08004238 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004238:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800423a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800423c:	6a04      	ldr	r4, [r0, #32]
 800423e:	f024 0401 	bic.w	r4, r4, #1
 8004242:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004244:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004246:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800424a:	ea4c 1202 	orr.w	r2, ip, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8004252:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004254:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004256:	6203      	str	r3, [r0, #32]
}
 8004258:	f85d 4b04 	ldr.w	r4, [sp], #4
 800425c:	4770      	bx	lr

0800425e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800425e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004260:	6a03      	ldr	r3, [r0, #32]
 8004262:	f023 0310 	bic.w	r3, r3, #16
 8004266:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004268:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800426a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800426c:	f424 4c70 	bic.w	ip, r4, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004270:	ea4c 3202 	orr.w	r2, ip, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004274:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004278:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800427e:	6203      	str	r3, [r0, #32]
}
 8004280:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004286:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800428c:	430b      	orrs	r3, r1
 800428e:	f043 0307 	orr.w	r3, r3, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	6083      	str	r3, [r0, #8]
}
 8004294:	4770      	bx	lr
	...

08004298 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8004298:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d137      	bne.n	8004312 <HAL_TIM_Base_Start_IT+0x7a>
  htim->State = HAL_TIM_STATE_BUSY;
 80042a2:	2302      	movs	r3, #2
 80042a4:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042a8:	6802      	ldr	r2, [r0, #0]
 80042aa:	68d3      	ldr	r3, [r2, #12]
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b2:	6803      	ldr	r3, [r0, #0]
 80042b4:	4a19      	ldr	r2, [pc, #100]	@ (800431c <HAL_TIM_Base_Start_IT+0x84>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d020      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042be:	d01d      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042c0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d019      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042c8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d015      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d011      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042d8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00d      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042e0:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d009      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
 80042e8:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d005      	beq.n	80042fc <HAL_TIM_Base_Start_IT+0x64>
    __HAL_TIM_ENABLE(htim);
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80042f8:	2000      	movs	r0, #0
 80042fa:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004302:	2a06      	cmp	r2, #6
 8004304:	d007      	beq.n	8004316 <HAL_TIM_Base_Start_IT+0x7e>
      __HAL_TIM_ENABLE(htim);
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	f042 0201 	orr.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800430e:	2000      	movs	r0, #0
 8004310:	4770      	bx	lr
    return HAL_ERROR;
 8004312:	2001      	movs	r0, #1
 8004314:	4770      	bx	lr
  return HAL_OK;
 8004316:	2000      	movs	r0, #0
}
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000

08004320 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8004320:	4770      	bx	lr

08004322 <HAL_TIM_IC_CaptureCallback>:
}
 8004322:	4770      	bx	lr

08004324 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8004324:	4770      	bx	lr

08004326 <HAL_TIM_TriggerCallback>:
}
 8004326:	4770      	bx	lr

08004328 <HAL_TIM_IRQHandler>:
{
 8004328:	b510      	push	{r4, lr}
 800432a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800432c:	6803      	ldr	r3, [r0, #0]
 800432e:	691a      	ldr	r2, [r3, #16]
 8004330:	f012 0f02 	tst.w	r2, #2
 8004334:	d011      	beq.n	800435a <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	f012 0f02 	tst.w	r2, #2
 800433c:	d00d      	beq.n	800435a <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800433e:	f06f 0202 	mvn.w	r2, #2
 8004342:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004344:	2301      	movs	r3, #1
 8004346:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004348:	6803      	ldr	r3, [r0, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	f013 0f03 	tst.w	r3, #3
 8004350:	d070      	beq.n	8004434 <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 8004352:	f7ff ffe6 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004356:	2300      	movs	r3, #0
 8004358:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800435a:	6823      	ldr	r3, [r4, #0]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	f012 0f04 	tst.w	r2, #4
 8004362:	d012      	beq.n	800438a <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	f012 0f04 	tst.w	r2, #4
 800436a:	d00e      	beq.n	800438a <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800436c:	f06f 0204 	mvn.w	r2, #4
 8004370:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004372:	2302      	movs	r3, #2
 8004374:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800437e:	d05f      	beq.n	8004440 <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 8004380:	4620      	mov	r0, r4
 8004382:	f7ff ffce 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004386:	2300      	movs	r3, #0
 8004388:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800438a:	6823      	ldr	r3, [r4, #0]
 800438c:	691a      	ldr	r2, [r3, #16]
 800438e:	f012 0f08 	tst.w	r2, #8
 8004392:	d012      	beq.n	80043ba <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004394:	68da      	ldr	r2, [r3, #12]
 8004396:	f012 0f08 	tst.w	r2, #8
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800439c:	f06f 0208 	mvn.w	r2, #8
 80043a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043a2:	2304      	movs	r3, #4
 80043a4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f013 0f03 	tst.w	r3, #3
 80043ae:	d04e      	beq.n	800444e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 80043b0:	4620      	mov	r0, r4
 80043b2:	f7ff ffb6 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	2300      	movs	r3, #0
 80043b8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	691a      	ldr	r2, [r3, #16]
 80043be:	f012 0f10 	tst.w	r2, #16
 80043c2:	d012      	beq.n	80043ea <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	f012 0f10 	tst.w	r2, #16
 80043ca:	d00e      	beq.n	80043ea <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043cc:	f06f 0210 	mvn.w	r2, #16
 80043d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043d2:	2308      	movs	r3, #8
 80043d4:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f413 7f40 	tst.w	r3, #768	@ 0x300
 80043de:	d03d      	beq.n	800445c <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7ff ff9e 	bl	8004322 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043e6:	2300      	movs	r3, #0
 80043e8:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	691a      	ldr	r2, [r3, #16]
 80043ee:	f012 0f01 	tst.w	r2, #1
 80043f2:	d003      	beq.n	80043fc <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043f4:	68da      	ldr	r2, [r3, #12]
 80043f6:	f012 0f01 	tst.w	r2, #1
 80043fa:	d136      	bne.n	800446a <HAL_TIM_IRQHandler+0x142>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80043fc:	6823      	ldr	r3, [r4, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	f012 0f80 	tst.w	r2, #128	@ 0x80
 800440c:	d134      	bne.n	8004478 <HAL_TIM_IRQHandler+0x150>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800440e:	6823      	ldr	r3, [r4, #0]
 8004410:	691a      	ldr	r2, [r3, #16]
 8004412:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8004416:	d003      	beq.n	8004420 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004418:	68da      	ldr	r2, [r3, #12]
 800441a:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800441e:	d132      	bne.n	8004486 <HAL_TIM_IRQHandler+0x15e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	f012 0f20 	tst.w	r2, #32
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800442a:	68da      	ldr	r2, [r3, #12]
 800442c:	f012 0f20 	tst.w	r2, #32
 8004430:	d130      	bne.n	8004494 <HAL_TIM_IRQHandler+0x16c>
}
 8004432:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004434:	f7ff ff74 	bl	8004320 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	4620      	mov	r0, r4
 800443a:	f7ff ff73 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
 800443e:	e78a      	b.n	8004356 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004440:	4620      	mov	r0, r4
 8004442:	f7ff ff6d 	bl	8004320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004446:	4620      	mov	r0, r4
 8004448:	f7ff ff6c 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
 800444c:	e79b      	b.n	8004386 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800444e:	4620      	mov	r0, r4
 8004450:	f7ff ff66 	bl	8004320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004454:	4620      	mov	r0, r4
 8004456:	f7ff ff65 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
 800445a:	e7ac      	b.n	80043b6 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800445c:	4620      	mov	r0, r4
 800445e:	f7ff ff5f 	bl	8004320 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff ff5e 	bl	8004324 <HAL_TIM_PWM_PulseFinishedCallback>
 8004468:	e7bd      	b.n	80043e6 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800446a:	f06f 0201 	mvn.w	r2, #1
 800446e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004470:	4620      	mov	r0, r4
 8004472:	f7fd fc59 	bl	8001d28 <HAL_TIM_PeriodElapsedCallback>
 8004476:	e7c1      	b.n	80043fc <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004478:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800447c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800447e:	4620      	mov	r0, r4
 8004480:	f000 fad7 	bl	8004a32 <HAL_TIMEx_BreakCallback>
 8004484:	e7c3      	b.n	800440e <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004486:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800448a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800448c:	4620      	mov	r0, r4
 800448e:	f7ff ff4a 	bl	8004326 <HAL_TIM_TriggerCallback>
 8004492:	e7c5      	b.n	8004420 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004494:	f06f 0220 	mvn.w	r2, #32
 8004498:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800449a:	4620      	mov	r0, r4
 800449c:	f000 fac8 	bl	8004a30 <HAL_TIMEx_CommutCallback>
}
 80044a0:	e7c7      	b.n	8004432 <HAL_TIM_IRQHandler+0x10a>
	...

080044a4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80044a4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a6:	4a30      	ldr	r2, [pc, #192]	@ (8004568 <TIM_Base_SetConfig+0xc4>)
 80044a8:	4290      	cmp	r0, r2
 80044aa:	d012      	beq.n	80044d2 <TIM_Base_SetConfig+0x2e>
 80044ac:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80044b0:	d00f      	beq.n	80044d2 <TIM_Base_SetConfig+0x2e>
 80044b2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80044b6:	4290      	cmp	r0, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_Base_SetConfig+0x2e>
 80044ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044be:	4290      	cmp	r0, r2
 80044c0:	d007      	beq.n	80044d2 <TIM_Base_SetConfig+0x2e>
 80044c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044c6:	4290      	cmp	r0, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_Base_SetConfig+0x2e>
 80044ca:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 80044ce:	4290      	cmp	r0, r2
 80044d0:	d103      	bne.n	80044da <TIM_Base_SetConfig+0x36>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80044d6:	684a      	ldr	r2, [r1, #4]
 80044d8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044da:	4a23      	ldr	r2, [pc, #140]	@ (8004568 <TIM_Base_SetConfig+0xc4>)
 80044dc:	4290      	cmp	r0, r2
 80044de:	d02a      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 80044e0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 80044e4:	d027      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 80044e6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80044ea:	4290      	cmp	r0, r2
 80044ec:	d023      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 80044ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044f2:	4290      	cmp	r0, r2
 80044f4:	d01f      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 80044f6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80044fa:	4290      	cmp	r0, r2
 80044fc:	d01b      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 80044fe:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004502:	4290      	cmp	r0, r2
 8004504:	d017      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 8004506:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800450a:	4290      	cmp	r0, r2
 800450c:	d013      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 800450e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004512:	4290      	cmp	r0, r2
 8004514:	d00f      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 8004516:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800451a:	4290      	cmp	r0, r2
 800451c:	d00b      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 800451e:	f5a2 3298 	sub.w	r2, r2, #77824	@ 0x13000
 8004522:	4290      	cmp	r0, r2
 8004524:	d007      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 8004526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800452a:	4290      	cmp	r0, r2
 800452c:	d003      	beq.n	8004536 <TIM_Base_SetConfig+0x92>
 800452e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004532:	4290      	cmp	r0, r2
 8004534:	d103      	bne.n	800453e <TIM_Base_SetConfig+0x9a>
    tmpcr1 &= ~TIM_CR1_CKD;
 8004536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800453a:	68ca      	ldr	r2, [r1, #12]
 800453c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800453e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004542:	694a      	ldr	r2, [r1, #20]
 8004544:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004546:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004548:	688b      	ldr	r3, [r1, #8]
 800454a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800454c:	680b      	ldr	r3, [r1, #0]
 800454e:	6283      	str	r3, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	4b05      	ldr	r3, [pc, #20]	@ (8004568 <TIM_Base_SetConfig+0xc4>)
 8004552:	4298      	cmp	r0, r3
 8004554:	d003      	beq.n	800455e <TIM_Base_SetConfig+0xba>
 8004556:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800455a:	4298      	cmp	r0, r3
 800455c:	d101      	bne.n	8004562 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
 800455e:	690b      	ldr	r3, [r1, #16]
 8004560:	6303      	str	r3, [r0, #48]	@ 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004562:	2301      	movs	r3, #1
 8004564:	6143      	str	r3, [r0, #20]
}
 8004566:	4770      	bx	lr
 8004568:	40010000 	.word	0x40010000

0800456c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800456c:	b340      	cbz	r0, 80045c0 <HAL_TIM_Base_Init+0x54>
{
 800456e:	b510      	push	{r4, lr}
 8004570:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8004572:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004576:	b1f3      	cbz	r3, 80045b6 <HAL_TIM_Base_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8004578:	2302      	movs	r3, #2
 800457a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800457e:	4621      	mov	r1, r4
 8004580:	f851 0b04 	ldr.w	r0, [r1], #4
 8004584:	f7ff ff8e 	bl	80044a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004588:	2301      	movs	r3, #1
 800458a:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8004592:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004596:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800459a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800459e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80045aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80045ae:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80045b2:	2000      	movs	r0, #0
}
 80045b4:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 80045b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 80045ba:	f7fd fd39 	bl	8002030 <HAL_TIM_Base_MspInit>
 80045be:	e7db      	b.n	8004578 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 80045c0:	2001      	movs	r0, #1
}
 80045c2:	4770      	bx	lr

080045c4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80045c4:	b340      	cbz	r0, 8004618 <HAL_TIM_PWM_Init+0x54>
{
 80045c6:	b510      	push	{r4, lr}
 80045c8:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 80045ca:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80045ce:	b1f3      	cbz	r3, 800460e <HAL_TIM_PWM_Init+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	2302      	movs	r3, #2
 80045d2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d6:	4621      	mov	r1, r4
 80045d8:	f851 0b04 	ldr.w	r0, [r1], #4
 80045dc:	f7ff ff62 	bl	80044a4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e0:	2301      	movs	r3, #1
 80045e2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80045ea:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80045ee:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80045f2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f6:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045fe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8004602:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004606:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 800460a:	2000      	movs	r0, #0
}
 800460c:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800460e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004612:	f7fd fd47 	bl	80020a4 <HAL_TIM_PWM_MspInit>
 8004616:	e7db      	b.n	80045d0 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8004618:	2001      	movs	r0, #1
}
 800461a:	4770      	bx	lr

0800461c <TIM_OC2_SetConfig>:
{
 800461c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461e:	6a03      	ldr	r3, [r0, #32]
 8004620:	f023 0310 	bic.w	r3, r3, #16
 8004624:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004626:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8004628:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800462a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800462c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	680d      	ldr	r5, [r1, #0]
 8004632:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8004636:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800463a:	688d      	ldr	r5, [r1, #8]
 800463c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004640:	4d11      	ldr	r5, [pc, #68]	@ (8004688 <TIM_OC2_SetConfig+0x6c>)
 8004642:	42a8      	cmp	r0, r5
 8004644:	d003      	beq.n	800464e <TIM_OC2_SetConfig+0x32>
 8004646:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800464a:	42a8      	cmp	r0, r5
 800464c:	d106      	bne.n	800465c <TIM_OC2_SetConfig+0x40>
    tmpccer &= ~TIM_CCER_CC2NP;
 800464e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004652:	68cd      	ldr	r5, [r1, #12]
 8004654:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800465c:	4d0a      	ldr	r5, [pc, #40]	@ (8004688 <TIM_OC2_SetConfig+0x6c>)
 800465e:	42a8      	cmp	r0, r5
 8004660:	d003      	beq.n	800466a <TIM_OC2_SetConfig+0x4e>
 8004662:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8004666:	42a8      	cmp	r0, r5
 8004668:	d107      	bne.n	800467a <TIM_OC2_SetConfig+0x5e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800466a:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800466e:	694d      	ldr	r5, [r1, #20]
 8004670:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004674:	698d      	ldr	r5, [r1, #24]
 8004676:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800467a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800467c:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800467e:	684a      	ldr	r2, [r1, #4]
 8004680:	6382      	str	r2, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8004682:	6203      	str	r3, [r0, #32]
}
 8004684:	bc30      	pop	{r4, r5}
 8004686:	4770      	bx	lr
 8004688:	40010000 	.word	0x40010000

0800468c <HAL_TIM_PWM_ConfigChannel>:
{
 800468c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800468e:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004692:	2b01      	cmp	r3, #1
 8004694:	d066      	beq.n	8004764 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8004696:	4604      	mov	r4, r0
 8004698:	460d      	mov	r5, r1
 800469a:	2301      	movs	r3, #1
 800469c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 80046a0:	2a0c      	cmp	r2, #12
 80046a2:	d85a      	bhi.n	800475a <HAL_TIM_PWM_ConfigChannel+0xce>
 80046a4:	e8df f002 	tbb	[pc, r2]
 80046a8:	59595907 	.word	0x59595907
 80046ac:	5959591b 	.word	0x5959591b
 80046b0:	59595930 	.word	0x59595930
 80046b4:	44          	.byte	0x44
 80046b5:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80046b6:	6800      	ldr	r0, [r0, #0]
 80046b8:	f7ff fd26 	bl	8004108 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80046bc:	6822      	ldr	r2, [r4, #0]
 80046be:	6993      	ldr	r3, [r2, #24]
 80046c0:	f043 0308 	orr.w	r3, r3, #8
 80046c4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80046c6:	6822      	ldr	r2, [r4, #0]
 80046c8:	6993      	ldr	r3, [r2, #24]
 80046ca:	f023 0304 	bic.w	r3, r3, #4
 80046ce:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80046d0:	6822      	ldr	r2, [r4, #0]
 80046d2:	6993      	ldr	r3, [r2, #24]
 80046d4:	6929      	ldr	r1, [r5, #16]
 80046d6:	430b      	orrs	r3, r1
 80046d8:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 80046da:	2000      	movs	r0, #0
      break;
 80046dc:	e03e      	b.n	800475c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80046de:	6800      	ldr	r0, [r0, #0]
 80046e0:	f7ff ff9c 	bl	800461c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046e4:	6822      	ldr	r2, [r4, #0]
 80046e6:	6993      	ldr	r3, [r2, #24]
 80046e8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046ec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046ee:	6822      	ldr	r2, [r4, #0]
 80046f0:	6993      	ldr	r3, [r2, #24]
 80046f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046f6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046f8:	6822      	ldr	r2, [r4, #0]
 80046fa:	6993      	ldr	r3, [r2, #24]
 80046fc:	6929      	ldr	r1, [r5, #16]
 80046fe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004702:	6193      	str	r3, [r2, #24]
  HAL_StatusTypeDef status = HAL_OK;
 8004704:	2000      	movs	r0, #0
      break;
 8004706:	e029      	b.n	800475c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f7ff fd35 	bl	8004178 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	69d3      	ldr	r3, [r2, #28]
 8004712:	f043 0308 	orr.w	r3, r3, #8
 8004716:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004718:	6822      	ldr	r2, [r4, #0]
 800471a:	69d3      	ldr	r3, [r2, #28]
 800471c:	f023 0304 	bic.w	r3, r3, #4
 8004720:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004722:	6822      	ldr	r2, [r4, #0]
 8004724:	69d3      	ldr	r3, [r2, #28]
 8004726:	6929      	ldr	r1, [r5, #16]
 8004728:	430b      	orrs	r3, r1
 800472a:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 800472c:	2000      	movs	r0, #0
      break;
 800472e:	e015      	b.n	800475c <HAL_TIM_PWM_ConfigChannel+0xd0>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004730:	6800      	ldr	r0, [r0, #0]
 8004732:	f7ff fd59 	bl	80041e8 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	69d3      	ldr	r3, [r2, #28]
 800473a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800473e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004740:	6822      	ldr	r2, [r4, #0]
 8004742:	69d3      	ldr	r3, [r2, #28]
 8004744:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004748:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	69d3      	ldr	r3, [r2, #28]
 800474e:	6929      	ldr	r1, [r5, #16]
 8004750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004754:	61d3      	str	r3, [r2, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8004756:	2000      	movs	r0, #0
      break;
 8004758:	e000      	b.n	800475c <HAL_TIM_PWM_ConfigChannel+0xd0>
  switch (Channel)
 800475a:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800475c:	2300      	movs	r3, #0
 800475e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8004762:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8004764:	2002      	movs	r0, #2
 8004766:	e7fc      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0xd6>

08004768 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004768:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800476a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800476c:	f424 4c7f 	bic.w	ip, r4, #65280	@ 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004770:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8004774:	430a      	orrs	r2, r1
 8004776:	ea42 020c 	orr.w	r2, r2, ip

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800477a:	6082      	str	r2, [r0, #8]
}
 800477c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004780:	4770      	bx	lr

08004782 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8004782:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d078      	beq.n	800487c <HAL_TIM_ConfigClockSource+0xfa>
{
 800478a:	b510      	push	{r4, lr}
 800478c:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800478e:	2301      	movs	r3, #1
 8004790:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004794:	2302      	movs	r3, #2
 8004796:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800479a:	6802      	ldr	r2, [r0, #0]
 800479c:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800479e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047a2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80047a6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80047a8:	680b      	ldr	r3, [r1, #0]
 80047aa:	2b60      	cmp	r3, #96	@ 0x60
 80047ac:	d04c      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xc6>
 80047ae:	d823      	bhi.n	80047f8 <HAL_TIM_ConfigClockSource+0x76>
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	d054      	beq.n	800485e <HAL_TIM_ConfigClockSource+0xdc>
 80047b4:	d811      	bhi.n	80047da <HAL_TIM_ConfigClockSource+0x58>
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d003      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x40>
 80047ba:	d80a      	bhi.n	80047d2 <HAL_TIM_ConfigClockSource+0x50>
 80047bc:	b10b      	cbz	r3, 80047c2 <HAL_TIM_ConfigClockSource+0x40>
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d105      	bne.n	80047ce <HAL_TIM_ConfigClockSource+0x4c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047c2:	4619      	mov	r1, r3
 80047c4:	6820      	ldr	r0, [r4, #0]
 80047c6:	f7ff fd5e 	bl	8004286 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047ca:	2000      	movs	r0, #0
      break;
 80047cc:	e028      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80047ce:	2001      	movs	r0, #1
 80047d0:	e026      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80047d2:	2b30      	cmp	r3, #48	@ 0x30
 80047d4:	d0f5      	beq.n	80047c2 <HAL_TIM_ConfigClockSource+0x40>
      status = HAL_ERROR;
 80047d6:	2001      	movs	r0, #1
 80047d8:	e022      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80047da:	2b50      	cmp	r3, #80	@ 0x50
 80047dc:	d10a      	bne.n	80047f4 <HAL_TIM_ConfigClockSource+0x72>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	68ca      	ldr	r2, [r1, #12]
 80047e0:	6849      	ldr	r1, [r1, #4]
 80047e2:	6800      	ldr	r0, [r0, #0]
 80047e4:	f7ff fd28 	bl	8004238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047e8:	2150      	movs	r1, #80	@ 0x50
 80047ea:	6820      	ldr	r0, [r4, #0]
 80047ec:	f7ff fd4b 	bl	8004286 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80047f0:	2000      	movs	r0, #0
      break;
 80047f2:	e015      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 80047f4:	2001      	movs	r0, #1
 80047f6:	e013      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 80047f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fc:	d03a      	beq.n	8004874 <HAL_TIM_ConfigClockSource+0xf2>
 80047fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004802:	d014      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xac>
 8004804:	2b70      	cmp	r3, #112	@ 0x70
 8004806:	d137      	bne.n	8004878 <HAL_TIM_ConfigClockSource+0xf6>
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	68cb      	ldr	r3, [r1, #12]
 800480a:	684a      	ldr	r2, [r1, #4]
 800480c:	6889      	ldr	r1, [r1, #8]
 800480e:	6800      	ldr	r0, [r0, #0]
 8004810:	f7ff ffaa 	bl	8004768 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004814:	6822      	ldr	r2, [r4, #0]
 8004816:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004818:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800481c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800481e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8004820:	2301      	movs	r3, #1
 8004822:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8004826:	2300      	movs	r3, #0
 8004828:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 800482c:	bd10      	pop	{r4, pc}
      TIM_ETR_SetConfig(htim->Instance,
 800482e:	68cb      	ldr	r3, [r1, #12]
 8004830:	684a      	ldr	r2, [r1, #4]
 8004832:	6889      	ldr	r1, [r1, #8]
 8004834:	6800      	ldr	r0, [r0, #0]
 8004836:	f7ff ff97 	bl	8004768 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	6893      	ldr	r3, [r2, #8]
 800483e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004842:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004844:	2000      	movs	r0, #0
      break;
 8004846:	e7eb      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004848:	68ca      	ldr	r2, [r1, #12]
 800484a:	6849      	ldr	r1, [r1, #4]
 800484c:	6800      	ldr	r0, [r0, #0]
 800484e:	f7ff fd06 	bl	800425e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004852:	2160      	movs	r1, #96	@ 0x60
 8004854:	6820      	ldr	r0, [r4, #0]
 8004856:	f7ff fd16 	bl	8004286 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2000      	movs	r0, #0
      break;
 800485c:	e7e0      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800485e:	68ca      	ldr	r2, [r1, #12]
 8004860:	6849      	ldr	r1, [r1, #4]
 8004862:	6800      	ldr	r0, [r0, #0]
 8004864:	f7ff fce8 	bl	8004238 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004868:	2140      	movs	r1, #64	@ 0x40
 800486a:	6820      	ldr	r0, [r4, #0]
 800486c:	f7ff fd0b 	bl	8004286 <TIM_ITRx_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8004870:	2000      	movs	r0, #0
      break;
 8004872:	e7d5      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
  switch (sClockSourceConfig->ClockSource)
 8004874:	2000      	movs	r0, #0
 8004876:	e7d3      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
      status = HAL_ERROR;
 8004878:	2001      	movs	r0, #1
 800487a:	e7d1      	b.n	8004820 <HAL_TIM_ConfigClockSource+0x9e>
  __HAL_LOCK(htim);
 800487c:	2002      	movs	r0, #2
}
 800487e:	4770      	bx	lr

08004880 <TIM_CCxChannelCmd>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004880:	f001 011f 	and.w	r1, r1, #31
 8004884:	f04f 0c01 	mov.w	ip, #1
 8004888:	fa0c fc01 	lsl.w	ip, ip, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800488c:	6a03      	ldr	r3, [r0, #32]
 800488e:	ea23 030c 	bic.w	r3, r3, ip
 8004892:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004894:	6a03      	ldr	r3, [r0, #32]
 8004896:	408a      	lsls	r2, r1
 8004898:	4313      	orrs	r3, r2
 800489a:	6203      	str	r3, [r0, #32]
}
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_TIM_PWM_Start>:
{
 80048a0:	b510      	push	{r4, lr}
 80048a2:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048a4:	4608      	mov	r0, r1
 80048a6:	2900      	cmp	r1, #0
 80048a8:	d142      	bne.n	8004930 <HAL_TIM_PWM_Start+0x90>
 80048aa:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	3b01      	subs	r3, #1
 80048b2:	bf18      	it	ne
 80048b4:	2301      	movne	r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d16e      	bne.n	8004998 <HAL_TIM_PWM_Start+0xf8>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ba:	2800      	cmp	r0, #0
 80048bc:	d151      	bne.n	8004962 <HAL_TIM_PWM_Start+0xc2>
 80048be:	2302      	movs	r3, #2
 80048c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048c4:	2201      	movs	r2, #1
 80048c6:	4601      	mov	r1, r0
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	f7ff ffd9 	bl	8004880 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048ce:	6823      	ldr	r3, [r4, #0]
 80048d0:	4a33      	ldr	r2, [pc, #204]	@ (80049a0 <HAL_TIM_PWM_Start+0x100>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d003      	beq.n	80048de <HAL_TIM_PWM_Start+0x3e>
 80048d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80048da:	4293      	cmp	r3, r2
 80048dc:	d103      	bne.n	80048e6 <HAL_TIM_PWM_Start+0x46>
    __HAL_TIM_MOE_ENABLE(htim);
 80048de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	4a2d      	ldr	r2, [pc, #180]	@ (80049a0 <HAL_TIM_PWM_Start+0x100>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d049      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 80048ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f2:	d046      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 80048f4:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d042      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 80048fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004900:	4293      	cmp	r3, r2
 8004902:	d03e      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 8004904:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004908:	4293      	cmp	r3, r2
 800490a:	d03a      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 800490c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 8004910:	4293      	cmp	r3, r2
 8004912:	d036      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 8004914:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 8004918:	4293      	cmp	r3, r2
 800491a:	d032      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
 800491c:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 8004920:	4293      	cmp	r3, r2
 8004922:	d02e      	beq.n	8004982 <HAL_TIM_PWM_Start+0xe2>
    __HAL_TIM_ENABLE(htim);
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800492c:	2000      	movs	r0, #0
 800492e:	e032      	b.n	8004996 <HAL_TIM_PWM_Start+0xf6>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004930:	2904      	cmp	r1, #4
 8004932:	d008      	beq.n	8004946 <HAL_TIM_PWM_Start+0xa6>
 8004934:	2908      	cmp	r1, #8
 8004936:	d00d      	beq.n	8004954 <HAL_TIM_PWM_Start+0xb4>
 8004938:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	bf18      	it	ne
 8004942:	2301      	movne	r3, #1
 8004944:	e7b7      	b.n	80048b6 <HAL_TIM_PWM_Start+0x16>
 8004946:	f894 303f 	ldrb.w	r3, [r4, #63]	@ 0x3f
 800494a:	b2db      	uxtb	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	bf18      	it	ne
 8004950:	2301      	movne	r3, #1
 8004952:	e7b0      	b.n	80048b6 <HAL_TIM_PWM_Start+0x16>
 8004954:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8004958:	b2db      	uxtb	r3, r3
 800495a:	3b01      	subs	r3, #1
 800495c:	bf18      	it	ne
 800495e:	2301      	movne	r3, #1
 8004960:	e7a9      	b.n	80048b6 <HAL_TIM_PWM_Start+0x16>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004962:	2804      	cmp	r0, #4
 8004964:	d005      	beq.n	8004972 <HAL_TIM_PWM_Start+0xd2>
 8004966:	2808      	cmp	r0, #8
 8004968:	d007      	beq.n	800497a <HAL_TIM_PWM_Start+0xda>
 800496a:	2302      	movs	r3, #2
 800496c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8004970:	e7a8      	b.n	80048c4 <HAL_TIM_PWM_Start+0x24>
 8004972:	2302      	movs	r3, #2
 8004974:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8004978:	e7a4      	b.n	80048c4 <HAL_TIM_PWM_Start+0x24>
 800497a:	2302      	movs	r3, #2
 800497c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8004980:	e7a0      	b.n	80048c4 <HAL_TIM_PWM_Start+0x24>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004988:	2a06      	cmp	r2, #6
 800498a:	d007      	beq.n	800499c <HAL_TIM_PWM_Start+0xfc>
      __HAL_TIM_ENABLE(htim);
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	f042 0201 	orr.w	r2, r2, #1
 8004992:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8004994:	2000      	movs	r0, #0
}
 8004996:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004998:	2001      	movs	r0, #1
 800499a:	e7fc      	b.n	8004996 <HAL_TIM_PWM_Start+0xf6>
  return HAL_OK;
 800499c:	2000      	movs	r0, #0
 800499e:	e7fa      	b.n	8004996 <HAL_TIM_PWM_Start+0xf6>
 80049a0:	40010000 	.word	0x40010000

080049a4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049a4:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 80049a8:	2a01      	cmp	r2, #1
 80049aa:	d03d      	beq.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x84>
{
 80049ac:	b410      	push	{r4}
 80049ae:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 80049b0:	2201      	movs	r2, #1
 80049b2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b6:	2202      	movs	r2, #2
 80049b8:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049bc:	6802      	ldr	r2, [r0, #0]
 80049be:	6850      	ldr	r0, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	6894      	ldr	r4, [r2, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c2:	f020 0c70 	bic.w	ip, r0, #112	@ 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049c6:	6808      	ldr	r0, [r1, #0]
 80049c8:	ea40 000c 	orr.w	r0, r0, ip

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049cc:	6050      	str	r0, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	4816      	ldr	r0, [pc, #88]	@ (8004a2c <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 80049d2:	4282      	cmp	r2, r0
 80049d4:	d01a      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049d6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80049da:	d017      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049dc:	f5a0 407c 	sub.w	r0, r0, #64512	@ 0xfc00
 80049e0:	4282      	cmp	r2, r0
 80049e2:	d013      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049e4:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80049e8:	4282      	cmp	r2, r0
 80049ea:	d00f      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049ec:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 80049f0:	4282      	cmp	r2, r0
 80049f2:	d00b      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049f4:	f500 4078 	add.w	r0, r0, #63488	@ 0xf800
 80049f8:	4282      	cmp	r2, r0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 80049fc:	f500 5070 	add.w	r0, r0, #15360	@ 0x3c00
 8004a00:	4282      	cmp	r2, r0
 8004a02:	d003      	beq.n	8004a0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
 8004a04:	f5a0 3094 	sub.w	r0, r0, #75776	@ 0x12800
 8004a08:	4282      	cmp	r2, r0
 8004a0a:	d104      	bne.n	8004a16 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0c:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a10:	6849      	ldr	r1, [r1, #4]
 8004a12:	4321      	orrs	r1, r4

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a14:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	f883 003c 	strb.w	r0, [r3, #60]	@ 0x3c

  return HAL_OK;
}
 8004a22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a26:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004a28:	2002      	movs	r0, #2
}
 8004a2a:	4770      	bx	lr
 8004a2c:	40010000 	.word	0x40010000

08004a30 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a30:	4770      	bx	lr

08004a32 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a32:	4770      	bx	lr

08004a34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a34:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	f102 030c 	add.w	r3, r2, #12
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	320c      	adds	r2, #12
 8004a44:	e842 3100 	strex	r1, r3, [r2]
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	d1f3      	bne.n	8004a34 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4e:	f102 0314 	add.w	r3, r2, #20
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a5a:	3214      	adds	r2, #20
 8004a5c:	e842 3100 	strex	r1, r3, [r2]
 8004a60:	2900      	cmp	r1, #0
 8004a62:	d1f3      	bne.n	8004a4c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d005      	beq.n	8004a76 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	2300      	movs	r3, #0
 8004a72:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8004a74:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a78:	f102 030c 	add.w	r3, r2, #12
 8004a7c:	e853 3f00 	ldrex	r3, [r3]
 8004a80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	320c      	adds	r2, #12
 8004a86:	e842 3100 	strex	r1, r3, [r2]
 8004a8a:	2900      	cmp	r1, #0
 8004a8c:	d1f3      	bne.n	8004a76 <UART_EndRxTransfer+0x42>
 8004a8e:	e7ec      	b.n	8004a6a <UART_EndRxTransfer+0x36>

08004a90 <UART_Transmit_IT>:
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a90:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b21      	cmp	r3, #33	@ 0x21
 8004a98:	d001      	beq.n	8004a9e <UART_Transmit_IT+0xe>
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8004a9a:	2002      	movs	r0, #2
  }
}
 8004a9c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9e:	6883      	ldr	r3, [r0, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa4:	d017      	beq.n	8004ad6 <UART_Transmit_IT+0x46>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004aa6:	6a03      	ldr	r3, [r0, #32]
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	6202      	str	r2, [r0, #32]
 8004aac:	781a      	ldrb	r2, [r3, #0]
 8004aae:	6803      	ldr	r3, [r0, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004ab2:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8004abc:	b94b      	cbnz	r3, 8004ad2 <UART_Transmit_IT+0x42>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004abe:	6802      	ldr	r2, [r0, #0]
 8004ac0:	68d3      	ldr	r3, [r2, #12]
 8004ac2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ac6:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004ac8:	6802      	ldr	r2, [r0, #0]
 8004aca:	68d3      	ldr	r3, [r2, #12]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004ad0:	60d3      	str	r3, [r2, #12]
    return HAL_OK;
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad6:	6903      	ldr	r3, [r0, #16]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1e4      	bne.n	8004aa6 <UART_Transmit_IT+0x16>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004adc:	6a03      	ldr	r3, [r0, #32]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ade:	881b      	ldrh	r3, [r3, #0]
 8004ae0:	6802      	ldr	r2, [r0, #0]
 8004ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ae6:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 8004ae8:	6a03      	ldr	r3, [r0, #32]
 8004aea:	3302      	adds	r3, #2
 8004aec:	6203      	str	r3, [r0, #32]
 8004aee:	e7e0      	b.n	8004ab2 <UART_Transmit_IT+0x22>

08004af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004af0:	b510      	push	{r4, lr}
 8004af2:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004af4:	6802      	ldr	r2, [r0, #0]
 8004af6:	6913      	ldr	r3, [r2, #16]
 8004af8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004afc:	68c1      	ldr	r1, [r0, #12]
 8004afe:	430b      	orrs	r3, r1
 8004b00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b02:	6883      	ldr	r3, [r0, #8]
 8004b04:	6902      	ldr	r2, [r0, #16]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	6943      	ldr	r3, [r0, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	69c3      	ldr	r3, [r0, #28]
 8004b0e:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8004b10:	6801      	ldr	r1, [r0, #0]
 8004b12:	68cb      	ldr	r3, [r1, #12]
 8004b14:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004b18:	f023 030c 	bic.w	r3, r3, #12
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b20:	6802      	ldr	r2, [r0, #0]
 8004b22:	6953      	ldr	r3, [r2, #20]
 8004b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b28:	6981      	ldr	r1, [r0, #24]
 8004b2a:	430b      	orrs	r3, r1
 8004b2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b2e:	6803      	ldr	r3, [r0, #0]
 8004b30:	4a31      	ldr	r2, [pc, #196]	@ (8004bf8 <UART_SetConfig+0x108>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d006      	beq.n	8004b44 <UART_SetConfig+0x54>
 8004b36:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d002      	beq.n	8004b44 <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b3e:	f7fe ffd9 	bl	8003af4 <HAL_RCC_GetPCLK1Freq>
 8004b42:	e001      	b.n	8004b48 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b44:	f7fe ffe6 	bl	8003b14 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b48:	69e3      	ldr	r3, [r4, #28]
 8004b4a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b4e:	d029      	beq.n	8004ba4 <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b50:	2100      	movs	r1, #0
 8004b52:	1803      	adds	r3, r0, r0
 8004b54:	4149      	adcs	r1, r1
 8004b56:	181b      	adds	r3, r3, r0
 8004b58:	f141 0100 	adc.w	r1, r1, #0
 8004b5c:	00c9      	lsls	r1, r1, #3
 8004b5e:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	1818      	adds	r0, r3, r0
 8004b66:	6863      	ldr	r3, [r4, #4]
 8004b68:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8004b6c:	ea4f 7393 	mov.w	r3, r3, lsr #30
 8004b70:	f141 0100 	adc.w	r1, r1, #0
 8004b74:	f7fc f888 	bl	8000c88 <__aeabi_uldivmod>
 8004b78:	4a20      	ldr	r2, [pc, #128]	@ (8004bfc <UART_SetConfig+0x10c>)
 8004b7a:	fba2 3100 	umull	r3, r1, r2, r0
 8004b7e:	0949      	lsrs	r1, r1, #5
 8004b80:	2364      	movs	r3, #100	@ 0x64
 8004b82:	fb03 0311 	mls	r3, r3, r1, r0
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	3332      	adds	r3, #50	@ 0x32
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004b94:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	6821      	ldr	r1, [r4, #0]
 8004b9e:	4413      	add	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }
}
 8004ba2:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	1802      	adds	r2, r0, r0
 8004ba8:	eb43 0103 	adc.w	r1, r3, r3
 8004bac:	1812      	adds	r2, r2, r0
 8004bae:	f141 0100 	adc.w	r1, r1, #0
 8004bb2:	00c9      	lsls	r1, r1, #3
 8004bb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bb8:	00d2      	lsls	r2, r2, #3
 8004bba:	1810      	adds	r0, r2, r0
 8004bbc:	f141 0100 	adc.w	r1, r1, #0
 8004bc0:	6862      	ldr	r2, [r4, #4]
 8004bc2:	1892      	adds	r2, r2, r2
 8004bc4:	415b      	adcs	r3, r3
 8004bc6:	f7fc f85f 	bl	8000c88 <__aeabi_uldivmod>
 8004bca:	4a0c      	ldr	r2, [pc, #48]	@ (8004bfc <UART_SetConfig+0x10c>)
 8004bcc:	fba2 3100 	umull	r3, r1, r2, r0
 8004bd0:	0949      	lsrs	r1, r1, #5
 8004bd2:	2364      	movs	r3, #100	@ 0x64
 8004bd4:	fb03 0311 	mls	r3, r3, r1, r0
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	3332      	adds	r3, #50	@ 0x32
 8004bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8004be0:	095b      	lsrs	r3, r3, #5
 8004be2:	005a      	lsls	r2, r3, #1
 8004be4:	f402 72f8 	and.w	r2, r2, #496	@ 0x1f0
 8004be8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	6821      	ldr	r1, [r4, #0]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	608b      	str	r3, [r1, #8]
 8004bf6:	e7d4      	b.n	8004ba2 <UART_SetConfig+0xb2>
 8004bf8:	40011000 	.word	0x40011000
 8004bfc:	51eb851f 	.word	0x51eb851f

08004c00 <UART_WaitOnFlagUntilTimeout>:
{
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4605      	mov	r5, r0
 8004c06:	460f      	mov	r7, r1
 8004c08:	4616      	mov	r6, r2
 8004c0a:	4699      	mov	r9, r3
 8004c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c10:	682b      	ldr	r3, [r5, #0]
 8004c12:	681c      	ldr	r4, [r3, #0]
 8004c14:	ea37 0404 	bics.w	r4, r7, r4
 8004c18:	bf0c      	ite	eq
 8004c1a:	2401      	moveq	r4, #1
 8004c1c:	2400      	movne	r4, #0
 8004c1e:	42b4      	cmp	r4, r6
 8004c20:	d12d      	bne.n	8004c7e <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8004c22:	f1b8 3fff 	cmp.w	r8, #4294967295
 8004c26:	d0f3      	beq.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x10>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c28:	f1b8 0f00 	cmp.w	r8, #0
 8004c2c:	d005      	beq.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x3a>
 8004c2e:	f7fd ffbd 	bl	8002bac <HAL_GetTick>
 8004c32:	eba0 0009 	sub.w	r0, r0, r9
 8004c36:	4540      	cmp	r0, r8
 8004c38:	d9ea      	bls.n	8004c10 <UART_WaitOnFlagUntilTimeout+0x10>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c3a:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	f102 030c 	add.w	r3, r2, #12
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	320c      	adds	r2, #12
 8004c4a:	e842 3100 	strex	r1, r3, [r2]
 8004c4e:	2900      	cmp	r1, #0
 8004c50:	d1f3      	bne.n	8004c3a <UART_WaitOnFlagUntilTimeout+0x3a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c52:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c54:	f102 0314 	add.w	r3, r2, #20
 8004c58:	e853 3f00 	ldrex	r3, [r3]
 8004c5c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	3214      	adds	r2, #20
 8004c62:	e842 3100 	strex	r1, r3, [r2]
 8004c66:	2900      	cmp	r1, #0
 8004c68:	d1f3      	bne.n	8004c52 <UART_WaitOnFlagUntilTimeout+0x52>
        huart->gState  = HAL_UART_STATE_READY;
 8004c6a:	2320      	movs	r3, #32
 8004c6c:	f885 303d 	strb.w	r3, [r5, #61]	@ 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004c70:	f885 303e 	strb.w	r3, [r5, #62]	@ 0x3e
        __HAL_UNLOCK(huart);
 8004c74:	2300      	movs	r3, #0
 8004c76:	f885 303c 	strb.w	r3, [r5, #60]	@ 0x3c
        return HAL_TIMEOUT;
 8004c7a:	2003      	movs	r0, #3
 8004c7c:	e000      	b.n	8004c80 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8004c7e:	2000      	movs	r0, #0
}
 8004c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08004c84 <HAL_UART_Init>:
  if (huart == NULL)
 8004c84:	b358      	cbz	r0, 8004cde <HAL_UART_Init+0x5a>
{
 8004c86:	b510      	push	{r4, lr}
 8004c88:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004c8e:	b30b      	cbz	r3, 8004cd4 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	2324      	movs	r3, #36	@ 0x24
 8004c92:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_UART_DISABLE(huart);
 8004c96:	6822      	ldr	r2, [r4, #0]
 8004c98:	68d3      	ldr	r3, [r2, #12]
 8004c9a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c9e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	f7ff ff25 	bl	8004af0 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	6913      	ldr	r3, [r2, #16]
 8004caa:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8004cae:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb0:	6822      	ldr	r2, [r4, #0]
 8004cb2:	6953      	ldr	r3, [r2, #20]
 8004cb4:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8004cb8:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8004cba:	6822      	ldr	r2, [r4, #0]
 8004cbc:	68d3      	ldr	r3, [r2, #12]
 8004cbe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cc2:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	6420      	str	r0, [r4, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004cce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
}
 8004cd2:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8004cd4:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    HAL_UART_MspInit(huart);
 8004cd8:	f7fd fc3e 	bl	8002558 <HAL_UART_MspInit>
 8004cdc:	e7d8      	b.n	8004c90 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8004cde:	2001      	movs	r0, #1
}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_UART_Transmit>:
{
 8004ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8004cea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8004cee:	b2db      	uxtb	r3, r3
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d154      	bne.n	8004d9e <HAL_UART_Transmit+0xbc>
 8004cf4:	4604      	mov	r4, r0
 8004cf6:	460d      	mov	r5, r1
 8004cf8:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8004cfa:	2900      	cmp	r1, #0
 8004cfc:	d053      	beq.n	8004da6 <HAL_UART_Transmit+0xc4>
 8004cfe:	2a00      	cmp	r2, #0
 8004d00:	d053      	beq.n	8004daa <HAL_UART_Transmit+0xc8>
    __HAL_LOCK(huart);
 8004d02:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d051      	beq.n	8004dae <HAL_UART_Transmit+0xcc>
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	2300      	movs	r3, #0
 8004d12:	6403      	str	r3, [r0, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d14:	2321      	movs	r3, #33	@ 0x21
 8004d16:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    tickstart = HAL_GetTick();
 8004d1a:	f7fd ff47 	bl	8002bac <HAL_GetTick>
 8004d1e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8004d20:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004d24:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d28:	68a3      	ldr	r3, [r4, #8]
 8004d2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d2e:	d005      	beq.n	8004d3c <HAL_UART_Transmit+0x5a>
      pdata16bits = NULL;
 8004d30:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8004d34:	2300      	movs	r3, #0
 8004d36:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    while (huart->TxXferCount > 0U)
 8004d3a:	e012      	b.n	8004d62 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d3c:	6923      	ldr	r3, [r4, #16]
 8004d3e:	b113      	cbz	r3, 8004d46 <HAL_UART_Transmit+0x64>
      pdata16bits = NULL;
 8004d40:	f04f 0800 	mov.w	r8, #0
 8004d44:	e7f6      	b.n	8004d34 <HAL_UART_Transmit+0x52>
      pdata16bits = (const uint16_t *) pData;
 8004d46:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004d48:	2500      	movs	r5, #0
 8004d4a:	e7f3      	b.n	8004d34 <HAL_UART_Transmit+0x52>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d4c:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d56:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004d58:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	b292      	uxth	r2, r2
 8004d60:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004d62:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	b173      	cbz	r3, 8004d86 <HAL_UART_Transmit+0xa4>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d68:	9600      	str	r6, [sp, #0]
 8004d6a:	463b      	mov	r3, r7
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	2180      	movs	r1, #128	@ 0x80
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff ff45 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004d76:	b9e0      	cbnz	r0, 8004db2 <HAL_UART_Transmit+0xd0>
      if (pdata8bits == NULL)
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	d0e7      	beq.n	8004d4c <HAL_UART_Transmit+0x6a>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d7c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d84:	e7e8      	b.n	8004d58 <HAL_UART_Transmit+0x76>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d86:	9600      	str	r6, [sp, #0]
 8004d88:	463b      	mov	r3, r7
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2140      	movs	r1, #64	@ 0x40
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff ff36 	bl	8004c00 <UART_WaitOnFlagUntilTimeout>
 8004d94:	b978      	cbnz	r0, 8004db6 <HAL_UART_Transmit+0xd4>
    huart->gState = HAL_UART_STATE_READY;
 8004d96:	2320      	movs	r3, #32
 8004d98:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_OK;
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8004d9e:	2002      	movs	r0, #2
}
 8004da0:	b002      	add	sp, #8
 8004da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8004da6:	2001      	movs	r0, #1
 8004da8:	e7fa      	b.n	8004da0 <HAL_UART_Transmit+0xbe>
 8004daa:	2001      	movs	r0, #1
 8004dac:	e7f8      	b.n	8004da0 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8004dae:	2002      	movs	r0, #2
 8004db0:	e7f6      	b.n	8004da0 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8004db2:	2003      	movs	r0, #3
 8004db4:	e7f4      	b.n	8004da0 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8004db6:	2003      	movs	r0, #3
 8004db8:	e7f2      	b.n	8004da0 <HAL_UART_Transmit+0xbe>

08004dba <HAL_UART_TxCpltCallback>:
}
 8004dba:	4770      	bx	lr

08004dbc <UART_EndTransmit_IT>:
{
 8004dbc:	b508      	push	{r3, lr}
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004dbe:	6801      	ldr	r1, [r0, #0]
 8004dc0:	68ca      	ldr	r2, [r1, #12]
 8004dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004dc6:	60ca      	str	r2, [r1, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004dc8:	2220      	movs	r2, #32
 8004dca:	f880 203d 	strb.w	r2, [r0, #61]	@ 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004dce:	f7ff fff4 	bl	8004dba <HAL_UART_TxCpltCallback>
}
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	bd08      	pop	{r3, pc}

08004dd6 <HAL_UART_ErrorCallback>:
}
 8004dd6:	4770      	bx	lr

08004dd8 <UART_DMAAbortOnError>:
{
 8004dd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dda:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0x00U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004de0:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8004de2:	f7ff fff8 	bl	8004dd6 <HAL_UART_ErrorCallback>
}
 8004de6:	bd08      	pop	{r3, pc}

08004de8 <HAL_UARTEx_RxEventCallback>:
}
 8004de8:	4770      	bx	lr

08004dea <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dea:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	2b22      	cmp	r3, #34	@ 0x22
 8004df2:	d167      	bne.n	8004ec4 <UART_Receive_IT+0xda>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004df4:	6883      	ldr	r3, [r0, #8]
 8004df6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dfa:	d04d      	beq.n	8004e98 <UART_Receive_IT+0xae>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004dfc:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e02:	d004      	beq.n	8004e0e <UART_Receive_IT+0x24>
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d154      	bne.n	8004eb2 <UART_Receive_IT+0xc8>
 8004e08:	6903      	ldr	r3, [r0, #16]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d151      	bne.n	8004eb2 <UART_Receive_IT+0xc8>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e0e:	6803      	ldr	r3, [r0, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004e14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004e16:	3301      	adds	r3, #1
 8004e18:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8004e1a:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d14f      	bne.n	8004ec8 <UART_Receive_IT+0xde>
{
 8004e28:	b500      	push	{lr}
 8004e2a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e2c:	6802      	ldr	r2, [r0, #0]
 8004e2e:	68d3      	ldr	r3, [r2, #12]
 8004e30:	f023 0320 	bic.w	r3, r3, #32
 8004e34:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e36:	6802      	ldr	r2, [r0, #0]
 8004e38:	68d3      	ldr	r3, [r2, #12]
 8004e3a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e3e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e40:	6802      	ldr	r2, [r0, #0]
 8004e42:	6953      	ldr	r3, [r2, #20]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004e4a:	2320      	movs	r3, #32
 8004e4c:	f880 303e 	strb.w	r3, [r0, #62]	@ 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e50:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d133      	bne.n	8004ebe <UART_Receive_IT+0xd4>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	2300      	movs	r3, #0
 8004e58:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e5a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	f102 030c 	add.w	r3, r2, #12
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	320c      	adds	r2, #12
 8004e6a:	e842 3100 	strex	r1, r3, [r2]
 8004e6e:	2900      	cmp	r1, #0
 8004e70:	d1f3      	bne.n	8004e5a <UART_Receive_IT+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e72:	6803      	ldr	r3, [r0, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	f012 0f10 	tst.w	r2, #16
 8004e7a:	d006      	beq.n	8004e8a <UART_Receive_IT+0xa0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	9201      	str	r2, [sp, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	9201      	str	r2, [sp, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e8a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8004e8c:	f7ff ffac 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 8004e90:	2000      	movs	r0, #0
}
 8004e92:	b003      	add	sp, #12
 8004e94:	f85d fb04 	ldr.w	pc, [sp], #4
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e98:	6902      	ldr	r2, [r0, #16]
 8004e9a:	2a00      	cmp	r2, #0
 8004e9c:	d1ae      	bne.n	8004dfc <UART_Receive_IT+0x12>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e9e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ea0:	6803      	ldr	r3, [r0, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ea8:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8004eaa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8004eac:	3302      	adds	r3, #2
 8004eae:	6283      	str	r3, [r0, #40]	@ 0x28
 8004eb0:	e7b3      	b.n	8004e1a <UART_Receive_IT+0x30>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb2:	6803      	ldr	r3, [r0, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eba:	7013      	strb	r3, [r2, #0]
 8004ebc:	e7aa      	b.n	8004e14 <UART_Receive_IT+0x2a>
        HAL_UART_RxCpltCallback(huart);
 8004ebe:	f7fc ffaf 	bl	8001e20 <HAL_UART_RxCpltCallback>
 8004ec2:	e7e5      	b.n	8004e90 <UART_Receive_IT+0xa6>
    return HAL_BUSY;
 8004ec4:	2002      	movs	r0, #2
 8004ec6:	4770      	bx	lr
    return HAL_OK;
 8004ec8:	2000      	movs	r0, #0
}
 8004eca:	4770      	bx	lr

08004ecc <HAL_UART_IRQHandler>:
{
 8004ecc:	b510      	push	{r4, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ed2:	6802      	ldr	r2, [r0, #0]
 8004ed4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ed6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 8004eda:	f013 0f0f 	tst.w	r3, #15
 8004ede:	d109      	bne.n	8004ef4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ee0:	f013 0f20 	tst.w	r3, #32
 8004ee4:	d00c      	beq.n	8004f00 <HAL_UART_IRQHandler+0x34>
 8004ee6:	f010 0f20 	tst.w	r0, #32
 8004eea:	d009      	beq.n	8004f00 <HAL_UART_IRQHandler+0x34>
      UART_Receive_IT(huart);
 8004eec:	4620      	mov	r0, r4
 8004eee:	f7ff ff7c 	bl	8004dea <UART_Receive_IT>
      return;
 8004ef2:	e016      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ef4:	f011 0101 	ands.w	r1, r1, #1
 8004ef8:	d115      	bne.n	8004f26 <HAL_UART_IRQHandler+0x5a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004efa:	f410 7f90 	tst.w	r0, #288	@ 0x120
 8004efe:	d112      	bne.n	8004f26 <HAL_UART_IRQHandler+0x5a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8004f02:	2901      	cmp	r1, #1
 8004f04:	d079      	beq.n	8004ffa <HAL_UART_IRQHandler+0x12e>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f0a:	d003      	beq.n	8004f14 <HAL_UART_IRQHandler+0x48>
 8004f0c:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8004f10:	f040 8110 	bne.w	8005134 <HAL_UART_IRQHandler+0x268>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f14:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004f18:	d003      	beq.n	8004f22 <HAL_UART_IRQHandler+0x56>
 8004f1a:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8004f1e:	f040 810d 	bne.w	800513c <HAL_UART_IRQHandler+0x270>
}
 8004f22:	b002      	add	sp, #8
 8004f24:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f26:	f013 0f01 	tst.w	r3, #1
 8004f2a:	d006      	beq.n	8004f3a <HAL_UART_IRQHandler+0x6e>
 8004f2c:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8004f30:	d003      	beq.n	8004f3a <HAL_UART_IRQHandler+0x6e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f32:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f34:	f042 0201 	orr.w	r2, r2, #1
 8004f38:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f3a:	f013 0f04 	tst.w	r3, #4
 8004f3e:	d004      	beq.n	8004f4a <HAL_UART_IRQHandler+0x7e>
 8004f40:	b119      	cbz	r1, 8004f4a <HAL_UART_IRQHandler+0x7e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f42:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f44:	f042 0202 	orr.w	r2, r2, #2
 8004f48:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f4a:	f013 0f02 	tst.w	r3, #2
 8004f4e:	d004      	beq.n	8004f5a <HAL_UART_IRQHandler+0x8e>
 8004f50:	b119      	cbz	r1, 8004f5a <HAL_UART_IRQHandler+0x8e>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f52:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f54:	f042 0204 	orr.w	r2, r2, #4
 8004f58:	6422      	str	r2, [r4, #64]	@ 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f5a:	f013 0f08 	tst.w	r3, #8
 8004f5e:	d007      	beq.n	8004f70 <HAL_UART_IRQHandler+0xa4>
 8004f60:	f010 0f20 	tst.w	r0, #32
 8004f64:	d100      	bne.n	8004f68 <HAL_UART_IRQHandler+0x9c>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f66:	b119      	cbz	r1, 8004f70 <HAL_UART_IRQHandler+0xa4>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f68:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f6a:	f042 0208 	orr.w	r2, r2, #8
 8004f6e:	6422      	str	r2, [r4, #64]	@ 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f70:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	d0d5      	beq.n	8004f22 <HAL_UART_IRQHandler+0x56>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f76:	f013 0f20 	tst.w	r3, #32
 8004f7a:	d002      	beq.n	8004f82 <HAL_UART_IRQHandler+0xb6>
 8004f7c:	f010 0f20 	tst.w	r0, #32
 8004f80:	d129      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x10a>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f8a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8004f8c:	f012 0f08 	tst.w	r2, #8
 8004f90:	d100      	bne.n	8004f94 <HAL_UART_IRQHandler+0xc8>
 8004f92:	b363      	cbz	r3, 8004fee <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff fd4d 	bl	8004a34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	695b      	ldr	r3, [r3, #20]
 8004f9e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8004fa2:	d020      	beq.n	8004fe6 <HAL_UART_IRQHandler+0x11a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	f102 0314 	add.w	r3, r2, #20
 8004faa:	e853 3f00 	ldrex	r3, [r3]
 8004fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	3214      	adds	r2, #20
 8004fb4:	e842 3100 	strex	r1, r3, [r2]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d1f3      	bne.n	8004fa4 <HAL_UART_IRQHandler+0xd8>
          if (huart->hdmarx != NULL)
 8004fbc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8004fbe:	b173      	cbz	r3, 8004fde <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fc0:	4a60      	ldr	r2, [pc, #384]	@ (8005144 <HAL_UART_IRQHandler+0x278>)
 8004fc2:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fc4:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004fc6:	f7fe fa9a 	bl	80034fe <HAL_DMA_Abort_IT>
 8004fca:	2800      	cmp	r0, #0
 8004fcc:	d0a9      	beq.n	8004f22 <HAL_UART_IRQHandler+0x56>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fce:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004fd0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004fd2:	4798      	blx	r3
 8004fd4:	e7a5      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
        UART_Receive_IT(huart);
 8004fd6:	4620      	mov	r0, r4
 8004fd8:	f7ff ff07 	bl	8004dea <UART_Receive_IT>
 8004fdc:	e7d1      	b.n	8004f82 <HAL_UART_IRQHandler+0xb6>
            HAL_UART_ErrorCallback(huart);
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f7ff fef9 	bl	8004dd6 <HAL_UART_ErrorCallback>
 8004fe4:	e79d      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
          HAL_UART_ErrorCallback(huart);
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	f7ff fef5 	bl	8004dd6 <HAL_UART_ErrorCallback>
 8004fec:	e799      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
        HAL_UART_ErrorCallback(huart);
 8004fee:	4620      	mov	r0, r4
 8004ff0:	f7ff fef1 	bl	8004dd6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	6423      	str	r3, [r4, #64]	@ 0x40
    return;
 8004ff8:	e793      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ffa:	f013 0f10 	tst.w	r3, #16
 8004ffe:	d082      	beq.n	8004f06 <HAL_UART_IRQHandler+0x3a>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005000:	f010 0f10 	tst.w	r0, #16
 8005004:	f43f af7f 	beq.w	8004f06 <HAL_UART_IRQHandler+0x3a>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005008:	2300      	movs	r3, #0
 800500a:	9301      	str	r3, [sp, #4]
 800500c:	6813      	ldr	r3, [r2, #0]
 800500e:	9301      	str	r3, [sp, #4]
 8005010:	6853      	ldr	r3, [r2, #4]
 8005012:	9301      	str	r3, [sp, #4]
 8005014:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005016:	6953      	ldr	r3, [r2, #20]
 8005018:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800501c:	d050      	beq.n	80050c0 <HAL_UART_IRQHandler+0x1f4>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800501e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8005020:	6813      	ldr	r3, [r2, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8005026:	2b00      	cmp	r3, #0
 8005028:	f43f af7b 	beq.w	8004f22 <HAL_UART_IRQHandler+0x56>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800502c:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800502e:	4299      	cmp	r1, r3
 8005030:	f67f af77 	bls.w	8004f22 <HAL_UART_IRQHandler+0x56>
        huart->RxXferCount = nb_remaining_rx_data;
 8005034:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005036:	69d3      	ldr	r3, [r2, #28]
 8005038:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800503c:	d037      	beq.n	80050ae <HAL_UART_IRQHandler+0x1e2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800503e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	f102 030c 	add.w	r3, r2, #12
 8005044:	e853 3f00 	ldrex	r3, [r3]
 8005048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504c:	320c      	adds	r2, #12
 800504e:	e842 3100 	strex	r1, r3, [r2]
 8005052:	2900      	cmp	r1, #0
 8005054:	d1f3      	bne.n	800503e <HAL_UART_IRQHandler+0x172>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005056:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005058:	f102 0314 	add.w	r3, r2, #20
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005064:	3214      	adds	r2, #20
 8005066:	e842 3100 	strex	r1, r3, [r2]
 800506a:	2900      	cmp	r1, #0
 800506c:	d1f3      	bne.n	8005056 <HAL_UART_IRQHandler+0x18a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800506e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	f102 0314 	add.w	r3, r2, #20
 8005074:	e853 3f00 	ldrex	r3, [r3]
 8005078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800507c:	3214      	adds	r2, #20
 800507e:	e842 3100 	strex	r1, r3, [r2]
 8005082:	2900      	cmp	r1, #0
 8005084:	d1f3      	bne.n	800506e <HAL_UART_IRQHandler+0x1a2>
          huart->RxState = HAL_UART_STATE_READY;
 8005086:	2320      	movs	r3, #32
 8005088:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508c:	2300      	movs	r3, #0
 800508e:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005090:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005092:	f102 030c 	add.w	r3, r2, #12
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509e:	320c      	adds	r2, #12
 80050a0:	e842 3100 	strex	r1, r3, [r2]
 80050a4:	2900      	cmp	r1, #0
 80050a6:	d1f3      	bne.n	8005090 <HAL_UART_IRQHandler+0x1c4>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050a8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80050aa:	f7fe f9de 	bl	800346a <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050ae:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80050b0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	1ac9      	subs	r1, r1, r3
 80050b6:	b289      	uxth	r1, r1
 80050b8:	4620      	mov	r0, r4
 80050ba:	f7ff fe95 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
      return;
 80050be:	e730      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050c0:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80050c2:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	1ac9      	subs	r1, r1, r3
 80050c8:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 80050ca:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	f43f af27 	beq.w	8004f22 <HAL_UART_IRQHandler+0x56>
          && (nb_rx_data > 0U))
 80050d4:	2900      	cmp	r1, #0
 80050d6:	f43f af24 	beq.w	8004f22 <HAL_UART_IRQHandler+0x56>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050da:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050dc:	f102 030c 	add.w	r3, r2, #12
 80050e0:	e853 3f00 	ldrex	r3, [r3]
 80050e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e8:	320c      	adds	r2, #12
 80050ea:	e842 3000 	strex	r0, r3, [r2]
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d1f3      	bne.n	80050da <HAL_UART_IRQHandler+0x20e>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f4:	f102 0314 	add.w	r3, r2, #20
 80050f8:	e853 3f00 	ldrex	r3, [r3]
 80050fc:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	3214      	adds	r2, #20
 8005102:	e842 3000 	strex	r0, r3, [r2]
 8005106:	2800      	cmp	r0, #0
 8005108:	d1f3      	bne.n	80050f2 <HAL_UART_IRQHandler+0x226>
        huart->RxState = HAL_UART_STATE_READY;
 800510a:	2320      	movs	r3, #32
 800510c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	2300      	movs	r3, #0
 8005112:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005116:	f102 030c 	add.w	r3, r2, #12
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005122:	320c      	adds	r2, #12
 8005124:	e842 3000 	strex	r0, r3, [r2]
 8005128:	2800      	cmp	r0, #0
 800512a:	d1f3      	bne.n	8005114 <HAL_UART_IRQHandler+0x248>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800512c:	4620      	mov	r0, r4
 800512e:	f7ff fe5b 	bl	8004de8 <HAL_UARTEx_RxEventCallback>
      return;
 8005132:	e6f6      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
    UART_Transmit_IT(huart);
 8005134:	4620      	mov	r0, r4
 8005136:	f7ff fcab 	bl	8004a90 <UART_Transmit_IT>
    return;
 800513a:	e6f2      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
    UART_EndTransmit_IT(huart);
 800513c:	4620      	mov	r0, r4
 800513e:	f7ff fe3d 	bl	8004dbc <UART_EndTransmit_IT>
    return;
 8005142:	e6ee      	b.n	8004f22 <HAL_UART_IRQHandler+0x56>
 8005144:	08004dd9 	.word	0x08004dd9

08005148 <UART_Start_Receive_IT>:
  huart->pRxBuffPtr = pData;
 8005148:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800514a:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800514c:	85c2      	strh	r2, [r0, #46]	@ 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514e:	2300      	movs	r3, #0
 8005150:	6403      	str	r3, [r0, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005152:	2222      	movs	r2, #34	@ 0x22
 8005154:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
  __HAL_UNLOCK(huart);
 8005158:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  if (huart->Init.Parity != UART_PARITY_NONE)
 800515c:	6903      	ldr	r3, [r0, #16]
 800515e:	b123      	cbz	r3, 800516a <UART_Start_Receive_IT+0x22>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005160:	6802      	ldr	r2, [r0, #0]
 8005162:	68d3      	ldr	r3, [r2, #12]
 8005164:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005168:	60d3      	str	r3, [r2, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800516a:	6802      	ldr	r2, [r0, #0]
 800516c:	6953      	ldr	r3, [r2, #20]
 800516e:	f043 0301 	orr.w	r3, r3, #1
 8005172:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005174:	6802      	ldr	r2, [r0, #0]
 8005176:	68d3      	ldr	r3, [r2, #12]
 8005178:	f043 0320 	orr.w	r3, r3, #32
 800517c:	60d3      	str	r3, [r2, #12]
}
 800517e:	2000      	movs	r0, #0
 8005180:	4770      	bx	lr

08005182 <HAL_UART_Receive_IT>:
{
 8005182:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005184:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b20      	cmp	r3, #32
 800518c:	d10d      	bne.n	80051aa <HAL_UART_Receive_IT+0x28>
    if ((pData == NULL) || (Size == 0U))
 800518e:	b171      	cbz	r1, 80051ae <HAL_UART_Receive_IT+0x2c>
 8005190:	b17a      	cbz	r2, 80051b2 <HAL_UART_Receive_IT+0x30>
    __HAL_LOCK(huart);
 8005192:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8005196:	2b01      	cmp	r3, #1
 8005198:	d00d      	beq.n	80051b6 <HAL_UART_Receive_IT+0x34>
 800519a:	2301      	movs	r3, #1
 800519c:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	2300      	movs	r3, #0
 80051a2:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_IT(huart, pData, Size));
 80051a4:	f7ff ffd0 	bl	8005148 <UART_Start_Receive_IT>
 80051a8:	e000      	b.n	80051ac <HAL_UART_Receive_IT+0x2a>
    return HAL_BUSY;
 80051aa:	2002      	movs	r0, #2
}
 80051ac:	bd08      	pop	{r3, pc}
      return HAL_ERROR;
 80051ae:	2001      	movs	r0, #1
 80051b0:	e7fc      	b.n	80051ac <HAL_UART_Receive_IT+0x2a>
 80051b2:	2001      	movs	r0, #1
 80051b4:	e7fa      	b.n	80051ac <HAL_UART_Receive_IT+0x2a>
    __HAL_LOCK(huart);
 80051b6:	2002      	movs	r0, #2
 80051b8:	e7f8      	b.n	80051ac <HAL_UART_Receive_IT+0x2a>

080051ba <__cvt>:
 80051ba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051be:	ec57 6b10 	vmov	r6, r7, d0
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	460c      	mov	r4, r1
 80051c6:	4619      	mov	r1, r3
 80051c8:	463b      	mov	r3, r7
 80051ca:	bfbb      	ittet	lt
 80051cc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80051d0:	461f      	movlt	r7, r3
 80051d2:	2300      	movge	r3, #0
 80051d4:	232d      	movlt	r3, #45	@ 0x2d
 80051d6:	700b      	strb	r3, [r1, #0]
 80051d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80051da:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80051de:	4691      	mov	r9, r2
 80051e0:	f023 0820 	bic.w	r8, r3, #32
 80051e4:	bfbc      	itt	lt
 80051e6:	4632      	movlt	r2, r6
 80051e8:	4616      	movlt	r6, r2
 80051ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80051ee:	d005      	beq.n	80051fc <__cvt+0x42>
 80051f0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80051f4:	d100      	bne.n	80051f8 <__cvt+0x3e>
 80051f6:	3401      	adds	r4, #1
 80051f8:	2102      	movs	r1, #2
 80051fa:	e000      	b.n	80051fe <__cvt+0x44>
 80051fc:	2103      	movs	r1, #3
 80051fe:	ab03      	add	r3, sp, #12
 8005200:	9301      	str	r3, [sp, #4]
 8005202:	ab02      	add	r3, sp, #8
 8005204:	9300      	str	r3, [sp, #0]
 8005206:	ec47 6b10 	vmov	d0, r6, r7
 800520a:	4653      	mov	r3, sl
 800520c:	4622      	mov	r2, r4
 800520e:	f000 fe47 	bl	8005ea0 <_dtoa_r>
 8005212:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005216:	4605      	mov	r5, r0
 8005218:	d119      	bne.n	800524e <__cvt+0x94>
 800521a:	f019 0f01 	tst.w	r9, #1
 800521e:	d00e      	beq.n	800523e <__cvt+0x84>
 8005220:	eb00 0904 	add.w	r9, r0, r4
 8005224:	2200      	movs	r2, #0
 8005226:	2300      	movs	r3, #0
 8005228:	4630      	mov	r0, r6
 800522a:	4639      	mov	r1, r7
 800522c:	f7fb fc6c 	bl	8000b08 <__aeabi_dcmpeq>
 8005230:	b108      	cbz	r0, 8005236 <__cvt+0x7c>
 8005232:	f8cd 900c 	str.w	r9, [sp, #12]
 8005236:	2230      	movs	r2, #48	@ 0x30
 8005238:	9b03      	ldr	r3, [sp, #12]
 800523a:	454b      	cmp	r3, r9
 800523c:	d31e      	bcc.n	800527c <__cvt+0xc2>
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005242:	1b5b      	subs	r3, r3, r5
 8005244:	4628      	mov	r0, r5
 8005246:	6013      	str	r3, [r2, #0]
 8005248:	b004      	add	sp, #16
 800524a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800524e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005252:	eb00 0904 	add.w	r9, r0, r4
 8005256:	d1e5      	bne.n	8005224 <__cvt+0x6a>
 8005258:	7803      	ldrb	r3, [r0, #0]
 800525a:	2b30      	cmp	r3, #48	@ 0x30
 800525c:	d10a      	bne.n	8005274 <__cvt+0xba>
 800525e:	2200      	movs	r2, #0
 8005260:	2300      	movs	r3, #0
 8005262:	4630      	mov	r0, r6
 8005264:	4639      	mov	r1, r7
 8005266:	f7fb fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800526a:	b918      	cbnz	r0, 8005274 <__cvt+0xba>
 800526c:	f1c4 0401 	rsb	r4, r4, #1
 8005270:	f8ca 4000 	str.w	r4, [sl]
 8005274:	f8da 3000 	ldr.w	r3, [sl]
 8005278:	4499      	add	r9, r3
 800527a:	e7d3      	b.n	8005224 <__cvt+0x6a>
 800527c:	1c59      	adds	r1, r3, #1
 800527e:	9103      	str	r1, [sp, #12]
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	e7d9      	b.n	8005238 <__cvt+0x7e>

08005284 <__exponent>:
 8005284:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005286:	2900      	cmp	r1, #0
 8005288:	bfba      	itte	lt
 800528a:	4249      	neglt	r1, r1
 800528c:	232d      	movlt	r3, #45	@ 0x2d
 800528e:	232b      	movge	r3, #43	@ 0x2b
 8005290:	2909      	cmp	r1, #9
 8005292:	7002      	strb	r2, [r0, #0]
 8005294:	7043      	strb	r3, [r0, #1]
 8005296:	dd29      	ble.n	80052ec <__exponent+0x68>
 8005298:	f10d 0307 	add.w	r3, sp, #7
 800529c:	461d      	mov	r5, r3
 800529e:	270a      	movs	r7, #10
 80052a0:	461a      	mov	r2, r3
 80052a2:	fbb1 f6f7 	udiv	r6, r1, r7
 80052a6:	fb07 1416 	mls	r4, r7, r6, r1
 80052aa:	3430      	adds	r4, #48	@ 0x30
 80052ac:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052b0:	460c      	mov	r4, r1
 80052b2:	2c63      	cmp	r4, #99	@ 0x63
 80052b4:	f103 33ff 	add.w	r3, r3, #4294967295
 80052b8:	4631      	mov	r1, r6
 80052ba:	dcf1      	bgt.n	80052a0 <__exponent+0x1c>
 80052bc:	3130      	adds	r1, #48	@ 0x30
 80052be:	1e94      	subs	r4, r2, #2
 80052c0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052c4:	1c41      	adds	r1, r0, #1
 80052c6:	4623      	mov	r3, r4
 80052c8:	42ab      	cmp	r3, r5
 80052ca:	d30a      	bcc.n	80052e2 <__exponent+0x5e>
 80052cc:	f10d 0309 	add.w	r3, sp, #9
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	42ac      	cmp	r4, r5
 80052d4:	bf88      	it	hi
 80052d6:	2300      	movhi	r3, #0
 80052d8:	3302      	adds	r3, #2
 80052da:	4403      	add	r3, r0
 80052dc:	1a18      	subs	r0, r3, r0
 80052de:	b003      	add	sp, #12
 80052e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80052e6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80052ea:	e7ed      	b.n	80052c8 <__exponent+0x44>
 80052ec:	2330      	movs	r3, #48	@ 0x30
 80052ee:	3130      	adds	r1, #48	@ 0x30
 80052f0:	7083      	strb	r3, [r0, #2]
 80052f2:	70c1      	strb	r1, [r0, #3]
 80052f4:	1d03      	adds	r3, r0, #4
 80052f6:	e7f1      	b.n	80052dc <__exponent+0x58>

080052f8 <_printf_float>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	b08d      	sub	sp, #52	@ 0x34
 80052fe:	460c      	mov	r4, r1
 8005300:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005304:	4616      	mov	r6, r2
 8005306:	461f      	mov	r7, r3
 8005308:	4605      	mov	r5, r0
 800530a:	f000 fcb9 	bl	8005c80 <_localeconv_r>
 800530e:	6803      	ldr	r3, [r0, #0]
 8005310:	9304      	str	r3, [sp, #16]
 8005312:	4618      	mov	r0, r3
 8005314:	f7fa ffcc 	bl	80002b0 <strlen>
 8005318:	2300      	movs	r3, #0
 800531a:	930a      	str	r3, [sp, #40]	@ 0x28
 800531c:	f8d8 3000 	ldr.w	r3, [r8]
 8005320:	9005      	str	r0, [sp, #20]
 8005322:	3307      	adds	r3, #7
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005330:	f8d4 b000 	ldr.w	fp, [r4]
 8005334:	f8c8 2000 	str.w	r2, [r8]
 8005338:	e9d3 8900 	ldrd	r8, r9, [r3]
 800533c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005340:	9307      	str	r3, [sp, #28]
 8005342:	f8cd 8018 	str.w	r8, [sp, #24]
 8005346:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800534a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800534e:	4b9c      	ldr	r3, [pc, #624]	@ (80055c0 <_printf_float+0x2c8>)
 8005350:	f04f 32ff 	mov.w	r2, #4294967295
 8005354:	f7fb fc0a 	bl	8000b6c <__aeabi_dcmpun>
 8005358:	bb70      	cbnz	r0, 80053b8 <_printf_float+0xc0>
 800535a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800535e:	4b98      	ldr	r3, [pc, #608]	@ (80055c0 <_printf_float+0x2c8>)
 8005360:	f04f 32ff 	mov.w	r2, #4294967295
 8005364:	f7fb fbe4 	bl	8000b30 <__aeabi_dcmple>
 8005368:	bb30      	cbnz	r0, 80053b8 <_printf_float+0xc0>
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	4640      	mov	r0, r8
 8005370:	4649      	mov	r1, r9
 8005372:	f7fb fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8005376:	b110      	cbz	r0, 800537e <_printf_float+0x86>
 8005378:	232d      	movs	r3, #45	@ 0x2d
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800537e:	4a91      	ldr	r2, [pc, #580]	@ (80055c4 <_printf_float+0x2cc>)
 8005380:	4b91      	ldr	r3, [pc, #580]	@ (80055c8 <_printf_float+0x2d0>)
 8005382:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005386:	bf8c      	ite	hi
 8005388:	4690      	movhi	r8, r2
 800538a:	4698      	movls	r8, r3
 800538c:	2303      	movs	r3, #3
 800538e:	6123      	str	r3, [r4, #16]
 8005390:	f02b 0304 	bic.w	r3, fp, #4
 8005394:	6023      	str	r3, [r4, #0]
 8005396:	f04f 0900 	mov.w	r9, #0
 800539a:	9700      	str	r7, [sp, #0]
 800539c:	4633      	mov	r3, r6
 800539e:	aa0b      	add	r2, sp, #44	@ 0x2c
 80053a0:	4621      	mov	r1, r4
 80053a2:	4628      	mov	r0, r5
 80053a4:	f000 f9d2 	bl	800574c <_printf_common>
 80053a8:	3001      	adds	r0, #1
 80053aa:	f040 808d 	bne.w	80054c8 <_printf_float+0x1d0>
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	b00d      	add	sp, #52	@ 0x34
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	4642      	mov	r2, r8
 80053ba:	464b      	mov	r3, r9
 80053bc:	4640      	mov	r0, r8
 80053be:	4649      	mov	r1, r9
 80053c0:	f7fb fbd4 	bl	8000b6c <__aeabi_dcmpun>
 80053c4:	b140      	cbz	r0, 80053d8 <_printf_float+0xe0>
 80053c6:	464b      	mov	r3, r9
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bfbc      	itt	lt
 80053cc:	232d      	movlt	r3, #45	@ 0x2d
 80053ce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053d2:	4a7e      	ldr	r2, [pc, #504]	@ (80055cc <_printf_float+0x2d4>)
 80053d4:	4b7e      	ldr	r3, [pc, #504]	@ (80055d0 <_printf_float+0x2d8>)
 80053d6:	e7d4      	b.n	8005382 <_printf_float+0x8a>
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80053de:	9206      	str	r2, [sp, #24]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	d13b      	bne.n	800545c <_printf_float+0x164>
 80053e4:	2306      	movs	r3, #6
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80053ec:	2300      	movs	r3, #0
 80053ee:	6022      	str	r2, [r4, #0]
 80053f0:	9303      	str	r3, [sp, #12]
 80053f2:	ab0a      	add	r3, sp, #40	@ 0x28
 80053f4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80053f8:	ab09      	add	r3, sp, #36	@ 0x24
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	ec49 8b10 	vmov	d0, r8, r9
 8005402:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005406:	4628      	mov	r0, r5
 8005408:	f7ff fed7 	bl	80051ba <__cvt>
 800540c:	9b06      	ldr	r3, [sp, #24]
 800540e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005410:	2b47      	cmp	r3, #71	@ 0x47
 8005412:	4680      	mov	r8, r0
 8005414:	d129      	bne.n	800546a <_printf_float+0x172>
 8005416:	1cc8      	adds	r0, r1, #3
 8005418:	db02      	blt.n	8005420 <_printf_float+0x128>
 800541a:	6863      	ldr	r3, [r4, #4]
 800541c:	4299      	cmp	r1, r3
 800541e:	dd41      	ble.n	80054a4 <_printf_float+0x1ac>
 8005420:	f1aa 0a02 	sub.w	sl, sl, #2
 8005424:	fa5f fa8a 	uxtb.w	sl, sl
 8005428:	3901      	subs	r1, #1
 800542a:	4652      	mov	r2, sl
 800542c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005430:	9109      	str	r1, [sp, #36]	@ 0x24
 8005432:	f7ff ff27 	bl	8005284 <__exponent>
 8005436:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005438:	1813      	adds	r3, r2, r0
 800543a:	2a01      	cmp	r2, #1
 800543c:	4681      	mov	r9, r0
 800543e:	6123      	str	r3, [r4, #16]
 8005440:	dc02      	bgt.n	8005448 <_printf_float+0x150>
 8005442:	6822      	ldr	r2, [r4, #0]
 8005444:	07d2      	lsls	r2, r2, #31
 8005446:	d501      	bpl.n	800544c <_printf_float+0x154>
 8005448:	3301      	adds	r3, #1
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0a2      	beq.n	800539a <_printf_float+0xa2>
 8005454:	232d      	movs	r3, #45	@ 0x2d
 8005456:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800545a:	e79e      	b.n	800539a <_printf_float+0xa2>
 800545c:	9a06      	ldr	r2, [sp, #24]
 800545e:	2a47      	cmp	r2, #71	@ 0x47
 8005460:	d1c2      	bne.n	80053e8 <_printf_float+0xf0>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1c0      	bne.n	80053e8 <_printf_float+0xf0>
 8005466:	2301      	movs	r3, #1
 8005468:	e7bd      	b.n	80053e6 <_printf_float+0xee>
 800546a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800546e:	d9db      	bls.n	8005428 <_printf_float+0x130>
 8005470:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005474:	d118      	bne.n	80054a8 <_printf_float+0x1b0>
 8005476:	2900      	cmp	r1, #0
 8005478:	6863      	ldr	r3, [r4, #4]
 800547a:	dd0b      	ble.n	8005494 <_printf_float+0x19c>
 800547c:	6121      	str	r1, [r4, #16]
 800547e:	b913      	cbnz	r3, 8005486 <_printf_float+0x18e>
 8005480:	6822      	ldr	r2, [r4, #0]
 8005482:	07d0      	lsls	r0, r2, #31
 8005484:	d502      	bpl.n	800548c <_printf_float+0x194>
 8005486:	3301      	adds	r3, #1
 8005488:	440b      	add	r3, r1
 800548a:	6123      	str	r3, [r4, #16]
 800548c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800548e:	f04f 0900 	mov.w	r9, #0
 8005492:	e7db      	b.n	800544c <_printf_float+0x154>
 8005494:	b913      	cbnz	r3, 800549c <_printf_float+0x1a4>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	07d2      	lsls	r2, r2, #31
 800549a:	d501      	bpl.n	80054a0 <_printf_float+0x1a8>
 800549c:	3302      	adds	r3, #2
 800549e:	e7f4      	b.n	800548a <_printf_float+0x192>
 80054a0:	2301      	movs	r3, #1
 80054a2:	e7f2      	b.n	800548a <_printf_float+0x192>
 80054a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80054aa:	4299      	cmp	r1, r3
 80054ac:	db05      	blt.n	80054ba <_printf_float+0x1c2>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	6121      	str	r1, [r4, #16]
 80054b2:	07d8      	lsls	r0, r3, #31
 80054b4:	d5ea      	bpl.n	800548c <_printf_float+0x194>
 80054b6:	1c4b      	adds	r3, r1, #1
 80054b8:	e7e7      	b.n	800548a <_printf_float+0x192>
 80054ba:	2900      	cmp	r1, #0
 80054bc:	bfd4      	ite	le
 80054be:	f1c1 0202 	rsble	r2, r1, #2
 80054c2:	2201      	movgt	r2, #1
 80054c4:	4413      	add	r3, r2
 80054c6:	e7e0      	b.n	800548a <_printf_float+0x192>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	055a      	lsls	r2, r3, #21
 80054cc:	d407      	bmi.n	80054de <_printf_float+0x1e6>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	4642      	mov	r2, r8
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	d12b      	bne.n	8005534 <_printf_float+0x23c>
 80054dc:	e767      	b.n	80053ae <_printf_float+0xb6>
 80054de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80054e2:	f240 80dd 	bls.w	80056a0 <_printf_float+0x3a8>
 80054e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054ea:	2200      	movs	r2, #0
 80054ec:	2300      	movs	r3, #0
 80054ee:	f7fb fb0b 	bl	8000b08 <__aeabi_dcmpeq>
 80054f2:	2800      	cmp	r0, #0
 80054f4:	d033      	beq.n	800555e <_printf_float+0x266>
 80054f6:	4a37      	ldr	r2, [pc, #220]	@ (80055d4 <_printf_float+0x2dc>)
 80054f8:	2301      	movs	r3, #1
 80054fa:	4631      	mov	r1, r6
 80054fc:	4628      	mov	r0, r5
 80054fe:	47b8      	blx	r7
 8005500:	3001      	adds	r0, #1
 8005502:	f43f af54 	beq.w	80053ae <_printf_float+0xb6>
 8005506:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800550a:	4543      	cmp	r3, r8
 800550c:	db02      	blt.n	8005514 <_printf_float+0x21c>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	07d8      	lsls	r0, r3, #31
 8005512:	d50f      	bpl.n	8005534 <_printf_float+0x23c>
 8005514:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005518:	4631      	mov	r1, r6
 800551a:	4628      	mov	r0, r5
 800551c:	47b8      	blx	r7
 800551e:	3001      	adds	r0, #1
 8005520:	f43f af45 	beq.w	80053ae <_printf_float+0xb6>
 8005524:	f04f 0900 	mov.w	r9, #0
 8005528:	f108 38ff 	add.w	r8, r8, #4294967295
 800552c:	f104 0a1a 	add.w	sl, r4, #26
 8005530:	45c8      	cmp	r8, r9
 8005532:	dc09      	bgt.n	8005548 <_printf_float+0x250>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	079b      	lsls	r3, r3, #30
 8005538:	f100 8103 	bmi.w	8005742 <_printf_float+0x44a>
 800553c:	68e0      	ldr	r0, [r4, #12]
 800553e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005540:	4298      	cmp	r0, r3
 8005542:	bfb8      	it	lt
 8005544:	4618      	movlt	r0, r3
 8005546:	e734      	b.n	80053b2 <_printf_float+0xba>
 8005548:	2301      	movs	r3, #1
 800554a:	4652      	mov	r2, sl
 800554c:	4631      	mov	r1, r6
 800554e:	4628      	mov	r0, r5
 8005550:	47b8      	blx	r7
 8005552:	3001      	adds	r0, #1
 8005554:	f43f af2b 	beq.w	80053ae <_printf_float+0xb6>
 8005558:	f109 0901 	add.w	r9, r9, #1
 800555c:	e7e8      	b.n	8005530 <_printf_float+0x238>
 800555e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005560:	2b00      	cmp	r3, #0
 8005562:	dc39      	bgt.n	80055d8 <_printf_float+0x2e0>
 8005564:	4a1b      	ldr	r2, [pc, #108]	@ (80055d4 <_printf_float+0x2dc>)
 8005566:	2301      	movs	r3, #1
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af1d 	beq.w	80053ae <_printf_float+0xb6>
 8005574:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005578:	ea59 0303 	orrs.w	r3, r9, r3
 800557c:	d102      	bne.n	8005584 <_printf_float+0x28c>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	07d9      	lsls	r1, r3, #31
 8005582:	d5d7      	bpl.n	8005534 <_printf_float+0x23c>
 8005584:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005588:	4631      	mov	r1, r6
 800558a:	4628      	mov	r0, r5
 800558c:	47b8      	blx	r7
 800558e:	3001      	adds	r0, #1
 8005590:	f43f af0d 	beq.w	80053ae <_printf_float+0xb6>
 8005594:	f04f 0a00 	mov.w	sl, #0
 8005598:	f104 0b1a 	add.w	fp, r4, #26
 800559c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559e:	425b      	negs	r3, r3
 80055a0:	4553      	cmp	r3, sl
 80055a2:	dc01      	bgt.n	80055a8 <_printf_float+0x2b0>
 80055a4:	464b      	mov	r3, r9
 80055a6:	e793      	b.n	80054d0 <_printf_float+0x1d8>
 80055a8:	2301      	movs	r3, #1
 80055aa:	465a      	mov	r2, fp
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	47b8      	blx	r7
 80055b2:	3001      	adds	r0, #1
 80055b4:	f43f aefb 	beq.w	80053ae <_printf_float+0xb6>
 80055b8:	f10a 0a01 	add.w	sl, sl, #1
 80055bc:	e7ee      	b.n	800559c <_printf_float+0x2a4>
 80055be:	bf00      	nop
 80055c0:	7fefffff 	.word	0x7fefffff
 80055c4:	08007afc 	.word	0x08007afc
 80055c8:	08007af8 	.word	0x08007af8
 80055cc:	08007b04 	.word	0x08007b04
 80055d0:	08007b00 	.word	0x08007b00
 80055d4:	08007b08 	.word	0x08007b08
 80055d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80055de:	4553      	cmp	r3, sl
 80055e0:	bfa8      	it	ge
 80055e2:	4653      	movge	r3, sl
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	4699      	mov	r9, r3
 80055e8:	dc36      	bgt.n	8005658 <_printf_float+0x360>
 80055ea:	f04f 0b00 	mov.w	fp, #0
 80055ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f2:	f104 021a 	add.w	r2, r4, #26
 80055f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055f8:	9306      	str	r3, [sp, #24]
 80055fa:	eba3 0309 	sub.w	r3, r3, r9
 80055fe:	455b      	cmp	r3, fp
 8005600:	dc31      	bgt.n	8005666 <_printf_float+0x36e>
 8005602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005604:	459a      	cmp	sl, r3
 8005606:	dc3a      	bgt.n	800567e <_printf_float+0x386>
 8005608:	6823      	ldr	r3, [r4, #0]
 800560a:	07da      	lsls	r2, r3, #31
 800560c:	d437      	bmi.n	800567e <_printf_float+0x386>
 800560e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005610:	ebaa 0903 	sub.w	r9, sl, r3
 8005614:	9b06      	ldr	r3, [sp, #24]
 8005616:	ebaa 0303 	sub.w	r3, sl, r3
 800561a:	4599      	cmp	r9, r3
 800561c:	bfa8      	it	ge
 800561e:	4699      	movge	r9, r3
 8005620:	f1b9 0f00 	cmp.w	r9, #0
 8005624:	dc33      	bgt.n	800568e <_printf_float+0x396>
 8005626:	f04f 0800 	mov.w	r8, #0
 800562a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800562e:	f104 0b1a 	add.w	fp, r4, #26
 8005632:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005634:	ebaa 0303 	sub.w	r3, sl, r3
 8005638:	eba3 0309 	sub.w	r3, r3, r9
 800563c:	4543      	cmp	r3, r8
 800563e:	f77f af79 	ble.w	8005534 <_printf_float+0x23c>
 8005642:	2301      	movs	r3, #1
 8005644:	465a      	mov	r2, fp
 8005646:	4631      	mov	r1, r6
 8005648:	4628      	mov	r0, r5
 800564a:	47b8      	blx	r7
 800564c:	3001      	adds	r0, #1
 800564e:	f43f aeae 	beq.w	80053ae <_printf_float+0xb6>
 8005652:	f108 0801 	add.w	r8, r8, #1
 8005656:	e7ec      	b.n	8005632 <_printf_float+0x33a>
 8005658:	4642      	mov	r2, r8
 800565a:	4631      	mov	r1, r6
 800565c:	4628      	mov	r0, r5
 800565e:	47b8      	blx	r7
 8005660:	3001      	adds	r0, #1
 8005662:	d1c2      	bne.n	80055ea <_printf_float+0x2f2>
 8005664:	e6a3      	b.n	80053ae <_printf_float+0xb6>
 8005666:	2301      	movs	r3, #1
 8005668:	4631      	mov	r1, r6
 800566a:	4628      	mov	r0, r5
 800566c:	9206      	str	r2, [sp, #24]
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f ae9c 	beq.w	80053ae <_printf_float+0xb6>
 8005676:	9a06      	ldr	r2, [sp, #24]
 8005678:	f10b 0b01 	add.w	fp, fp, #1
 800567c:	e7bb      	b.n	80055f6 <_printf_float+0x2fe>
 800567e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005682:	4631      	mov	r1, r6
 8005684:	4628      	mov	r0, r5
 8005686:	47b8      	blx	r7
 8005688:	3001      	adds	r0, #1
 800568a:	d1c0      	bne.n	800560e <_printf_float+0x316>
 800568c:	e68f      	b.n	80053ae <_printf_float+0xb6>
 800568e:	9a06      	ldr	r2, [sp, #24]
 8005690:	464b      	mov	r3, r9
 8005692:	4442      	add	r2, r8
 8005694:	4631      	mov	r1, r6
 8005696:	4628      	mov	r0, r5
 8005698:	47b8      	blx	r7
 800569a:	3001      	adds	r0, #1
 800569c:	d1c3      	bne.n	8005626 <_printf_float+0x32e>
 800569e:	e686      	b.n	80053ae <_printf_float+0xb6>
 80056a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056a4:	f1ba 0f01 	cmp.w	sl, #1
 80056a8:	dc01      	bgt.n	80056ae <_printf_float+0x3b6>
 80056aa:	07db      	lsls	r3, r3, #31
 80056ac:	d536      	bpl.n	800571c <_printf_float+0x424>
 80056ae:	2301      	movs	r3, #1
 80056b0:	4642      	mov	r2, r8
 80056b2:	4631      	mov	r1, r6
 80056b4:	4628      	mov	r0, r5
 80056b6:	47b8      	blx	r7
 80056b8:	3001      	adds	r0, #1
 80056ba:	f43f ae78 	beq.w	80053ae <_printf_float+0xb6>
 80056be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b8      	blx	r7
 80056c8:	3001      	adds	r0, #1
 80056ca:	f43f ae70 	beq.w	80053ae <_printf_float+0xb6>
 80056ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056d2:	2200      	movs	r2, #0
 80056d4:	2300      	movs	r3, #0
 80056d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056da:	f7fb fa15 	bl	8000b08 <__aeabi_dcmpeq>
 80056de:	b9c0      	cbnz	r0, 8005712 <_printf_float+0x41a>
 80056e0:	4653      	mov	r3, sl
 80056e2:	f108 0201 	add.w	r2, r8, #1
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	d10c      	bne.n	800570a <_printf_float+0x412>
 80056f0:	e65d      	b.n	80053ae <_printf_float+0xb6>
 80056f2:	2301      	movs	r3, #1
 80056f4:	465a      	mov	r2, fp
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f ae56 	beq.w	80053ae <_printf_float+0xb6>
 8005702:	f108 0801 	add.w	r8, r8, #1
 8005706:	45d0      	cmp	r8, sl
 8005708:	dbf3      	blt.n	80056f2 <_printf_float+0x3fa>
 800570a:	464b      	mov	r3, r9
 800570c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005710:	e6df      	b.n	80054d2 <_printf_float+0x1da>
 8005712:	f04f 0800 	mov.w	r8, #0
 8005716:	f104 0b1a 	add.w	fp, r4, #26
 800571a:	e7f4      	b.n	8005706 <_printf_float+0x40e>
 800571c:	2301      	movs	r3, #1
 800571e:	4642      	mov	r2, r8
 8005720:	e7e1      	b.n	80056e6 <_printf_float+0x3ee>
 8005722:	2301      	movs	r3, #1
 8005724:	464a      	mov	r2, r9
 8005726:	4631      	mov	r1, r6
 8005728:	4628      	mov	r0, r5
 800572a:	47b8      	blx	r7
 800572c:	3001      	adds	r0, #1
 800572e:	f43f ae3e 	beq.w	80053ae <_printf_float+0xb6>
 8005732:	f108 0801 	add.w	r8, r8, #1
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800573a:	1a5b      	subs	r3, r3, r1
 800573c:	4543      	cmp	r3, r8
 800573e:	dcf0      	bgt.n	8005722 <_printf_float+0x42a>
 8005740:	e6fc      	b.n	800553c <_printf_float+0x244>
 8005742:	f04f 0800 	mov.w	r8, #0
 8005746:	f104 0919 	add.w	r9, r4, #25
 800574a:	e7f4      	b.n	8005736 <_printf_float+0x43e>

0800574c <_printf_common>:
 800574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005750:	4616      	mov	r6, r2
 8005752:	4698      	mov	r8, r3
 8005754:	688a      	ldr	r2, [r1, #8]
 8005756:	690b      	ldr	r3, [r1, #16]
 8005758:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800575c:	4293      	cmp	r3, r2
 800575e:	bfb8      	it	lt
 8005760:	4613      	movlt	r3, r2
 8005762:	6033      	str	r3, [r6, #0]
 8005764:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005768:	4607      	mov	r7, r0
 800576a:	460c      	mov	r4, r1
 800576c:	b10a      	cbz	r2, 8005772 <_printf_common+0x26>
 800576e:	3301      	adds	r3, #1
 8005770:	6033      	str	r3, [r6, #0]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	0699      	lsls	r1, r3, #26
 8005776:	bf42      	ittt	mi
 8005778:	6833      	ldrmi	r3, [r6, #0]
 800577a:	3302      	addmi	r3, #2
 800577c:	6033      	strmi	r3, [r6, #0]
 800577e:	6825      	ldr	r5, [r4, #0]
 8005780:	f015 0506 	ands.w	r5, r5, #6
 8005784:	d106      	bne.n	8005794 <_printf_common+0x48>
 8005786:	f104 0a19 	add.w	sl, r4, #25
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	6832      	ldr	r2, [r6, #0]
 800578e:	1a9b      	subs	r3, r3, r2
 8005790:	42ab      	cmp	r3, r5
 8005792:	dc26      	bgt.n	80057e2 <_printf_common+0x96>
 8005794:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005798:	6822      	ldr	r2, [r4, #0]
 800579a:	3b00      	subs	r3, #0
 800579c:	bf18      	it	ne
 800579e:	2301      	movne	r3, #1
 80057a0:	0692      	lsls	r2, r2, #26
 80057a2:	d42b      	bmi.n	80057fc <_printf_common+0xb0>
 80057a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80057a8:	4641      	mov	r1, r8
 80057aa:	4638      	mov	r0, r7
 80057ac:	47c8      	blx	r9
 80057ae:	3001      	adds	r0, #1
 80057b0:	d01e      	beq.n	80057f0 <_printf_common+0xa4>
 80057b2:	6823      	ldr	r3, [r4, #0]
 80057b4:	6922      	ldr	r2, [r4, #16]
 80057b6:	f003 0306 	and.w	r3, r3, #6
 80057ba:	2b04      	cmp	r3, #4
 80057bc:	bf02      	ittt	eq
 80057be:	68e5      	ldreq	r5, [r4, #12]
 80057c0:	6833      	ldreq	r3, [r6, #0]
 80057c2:	1aed      	subeq	r5, r5, r3
 80057c4:	68a3      	ldr	r3, [r4, #8]
 80057c6:	bf0c      	ite	eq
 80057c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057cc:	2500      	movne	r5, #0
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bfc4      	itt	gt
 80057d2:	1a9b      	subgt	r3, r3, r2
 80057d4:	18ed      	addgt	r5, r5, r3
 80057d6:	2600      	movs	r6, #0
 80057d8:	341a      	adds	r4, #26
 80057da:	42b5      	cmp	r5, r6
 80057dc:	d11a      	bne.n	8005814 <_printf_common+0xc8>
 80057de:	2000      	movs	r0, #0
 80057e0:	e008      	b.n	80057f4 <_printf_common+0xa8>
 80057e2:	2301      	movs	r3, #1
 80057e4:	4652      	mov	r2, sl
 80057e6:	4641      	mov	r1, r8
 80057e8:	4638      	mov	r0, r7
 80057ea:	47c8      	blx	r9
 80057ec:	3001      	adds	r0, #1
 80057ee:	d103      	bne.n	80057f8 <_printf_common+0xac>
 80057f0:	f04f 30ff 	mov.w	r0, #4294967295
 80057f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057f8:	3501      	adds	r5, #1
 80057fa:	e7c6      	b.n	800578a <_printf_common+0x3e>
 80057fc:	18e1      	adds	r1, r4, r3
 80057fe:	1c5a      	adds	r2, r3, #1
 8005800:	2030      	movs	r0, #48	@ 0x30
 8005802:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005806:	4422      	add	r2, r4
 8005808:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800580c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005810:	3302      	adds	r3, #2
 8005812:	e7c7      	b.n	80057a4 <_printf_common+0x58>
 8005814:	2301      	movs	r3, #1
 8005816:	4622      	mov	r2, r4
 8005818:	4641      	mov	r1, r8
 800581a:	4638      	mov	r0, r7
 800581c:	47c8      	blx	r9
 800581e:	3001      	adds	r0, #1
 8005820:	d0e6      	beq.n	80057f0 <_printf_common+0xa4>
 8005822:	3601      	adds	r6, #1
 8005824:	e7d9      	b.n	80057da <_printf_common+0x8e>
	...

08005828 <_printf_i>:
 8005828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800582c:	7e0f      	ldrb	r7, [r1, #24]
 800582e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005830:	2f78      	cmp	r7, #120	@ 0x78
 8005832:	4691      	mov	r9, r2
 8005834:	4680      	mov	r8, r0
 8005836:	460c      	mov	r4, r1
 8005838:	469a      	mov	sl, r3
 800583a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800583e:	d807      	bhi.n	8005850 <_printf_i+0x28>
 8005840:	2f62      	cmp	r7, #98	@ 0x62
 8005842:	d80a      	bhi.n	800585a <_printf_i+0x32>
 8005844:	2f00      	cmp	r7, #0
 8005846:	f000 80d1 	beq.w	80059ec <_printf_i+0x1c4>
 800584a:	2f58      	cmp	r7, #88	@ 0x58
 800584c:	f000 80b8 	beq.w	80059c0 <_printf_i+0x198>
 8005850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005854:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005858:	e03a      	b.n	80058d0 <_printf_i+0xa8>
 800585a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800585e:	2b15      	cmp	r3, #21
 8005860:	d8f6      	bhi.n	8005850 <_printf_i+0x28>
 8005862:	a101      	add	r1, pc, #4	@ (adr r1, 8005868 <_printf_i+0x40>)
 8005864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005868:	080058c1 	.word	0x080058c1
 800586c:	080058d5 	.word	0x080058d5
 8005870:	08005851 	.word	0x08005851
 8005874:	08005851 	.word	0x08005851
 8005878:	08005851 	.word	0x08005851
 800587c:	08005851 	.word	0x08005851
 8005880:	080058d5 	.word	0x080058d5
 8005884:	08005851 	.word	0x08005851
 8005888:	08005851 	.word	0x08005851
 800588c:	08005851 	.word	0x08005851
 8005890:	08005851 	.word	0x08005851
 8005894:	080059d3 	.word	0x080059d3
 8005898:	080058ff 	.word	0x080058ff
 800589c:	0800598d 	.word	0x0800598d
 80058a0:	08005851 	.word	0x08005851
 80058a4:	08005851 	.word	0x08005851
 80058a8:	080059f5 	.word	0x080059f5
 80058ac:	08005851 	.word	0x08005851
 80058b0:	080058ff 	.word	0x080058ff
 80058b4:	08005851 	.word	0x08005851
 80058b8:	08005851 	.word	0x08005851
 80058bc:	08005995 	.word	0x08005995
 80058c0:	6833      	ldr	r3, [r6, #0]
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	6032      	str	r2, [r6, #0]
 80058c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80058d0:	2301      	movs	r3, #1
 80058d2:	e09c      	b.n	8005a0e <_printf_i+0x1e6>
 80058d4:	6833      	ldr	r3, [r6, #0]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1d19      	adds	r1, r3, #4
 80058da:	6031      	str	r1, [r6, #0]
 80058dc:	0606      	lsls	r6, r0, #24
 80058de:	d501      	bpl.n	80058e4 <_printf_i+0xbc>
 80058e0:	681d      	ldr	r5, [r3, #0]
 80058e2:	e003      	b.n	80058ec <_printf_i+0xc4>
 80058e4:	0645      	lsls	r5, r0, #25
 80058e6:	d5fb      	bpl.n	80058e0 <_printf_i+0xb8>
 80058e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xd0>
 80058f0:	232d      	movs	r3, #45	@ 0x2d
 80058f2:	426d      	negs	r5, r5
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058f8:	4858      	ldr	r0, [pc, #352]	@ (8005a5c <_printf_i+0x234>)
 80058fa:	230a      	movs	r3, #10
 80058fc:	e011      	b.n	8005922 <_printf_i+0xfa>
 80058fe:	6821      	ldr	r1, [r4, #0]
 8005900:	6833      	ldr	r3, [r6, #0]
 8005902:	0608      	lsls	r0, r1, #24
 8005904:	f853 5b04 	ldr.w	r5, [r3], #4
 8005908:	d402      	bmi.n	8005910 <_printf_i+0xe8>
 800590a:	0649      	lsls	r1, r1, #25
 800590c:	bf48      	it	mi
 800590e:	b2ad      	uxthmi	r5, r5
 8005910:	2f6f      	cmp	r7, #111	@ 0x6f
 8005912:	4852      	ldr	r0, [pc, #328]	@ (8005a5c <_printf_i+0x234>)
 8005914:	6033      	str	r3, [r6, #0]
 8005916:	bf14      	ite	ne
 8005918:	230a      	movne	r3, #10
 800591a:	2308      	moveq	r3, #8
 800591c:	2100      	movs	r1, #0
 800591e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005922:	6866      	ldr	r6, [r4, #4]
 8005924:	60a6      	str	r6, [r4, #8]
 8005926:	2e00      	cmp	r6, #0
 8005928:	db05      	blt.n	8005936 <_printf_i+0x10e>
 800592a:	6821      	ldr	r1, [r4, #0]
 800592c:	432e      	orrs	r6, r5
 800592e:	f021 0104 	bic.w	r1, r1, #4
 8005932:	6021      	str	r1, [r4, #0]
 8005934:	d04b      	beq.n	80059ce <_printf_i+0x1a6>
 8005936:	4616      	mov	r6, r2
 8005938:	fbb5 f1f3 	udiv	r1, r5, r3
 800593c:	fb03 5711 	mls	r7, r3, r1, r5
 8005940:	5dc7      	ldrb	r7, [r0, r7]
 8005942:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005946:	462f      	mov	r7, r5
 8005948:	42bb      	cmp	r3, r7
 800594a:	460d      	mov	r5, r1
 800594c:	d9f4      	bls.n	8005938 <_printf_i+0x110>
 800594e:	2b08      	cmp	r3, #8
 8005950:	d10b      	bne.n	800596a <_printf_i+0x142>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	07df      	lsls	r7, r3, #31
 8005956:	d508      	bpl.n	800596a <_printf_i+0x142>
 8005958:	6923      	ldr	r3, [r4, #16]
 800595a:	6861      	ldr	r1, [r4, #4]
 800595c:	4299      	cmp	r1, r3
 800595e:	bfde      	ittt	le
 8005960:	2330      	movle	r3, #48	@ 0x30
 8005962:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005966:	f106 36ff 	addle.w	r6, r6, #4294967295
 800596a:	1b92      	subs	r2, r2, r6
 800596c:	6122      	str	r2, [r4, #16]
 800596e:	f8cd a000 	str.w	sl, [sp]
 8005972:	464b      	mov	r3, r9
 8005974:	aa03      	add	r2, sp, #12
 8005976:	4621      	mov	r1, r4
 8005978:	4640      	mov	r0, r8
 800597a:	f7ff fee7 	bl	800574c <_printf_common>
 800597e:	3001      	adds	r0, #1
 8005980:	d14a      	bne.n	8005a18 <_printf_i+0x1f0>
 8005982:	f04f 30ff 	mov.w	r0, #4294967295
 8005986:	b004      	add	sp, #16
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	6823      	ldr	r3, [r4, #0]
 800598e:	f043 0320 	orr.w	r3, r3, #32
 8005992:	6023      	str	r3, [r4, #0]
 8005994:	4832      	ldr	r0, [pc, #200]	@ (8005a60 <_printf_i+0x238>)
 8005996:	2778      	movs	r7, #120	@ 0x78
 8005998:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800599c:	6823      	ldr	r3, [r4, #0]
 800599e:	6831      	ldr	r1, [r6, #0]
 80059a0:	061f      	lsls	r7, r3, #24
 80059a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80059a6:	d402      	bmi.n	80059ae <_printf_i+0x186>
 80059a8:	065f      	lsls	r7, r3, #25
 80059aa:	bf48      	it	mi
 80059ac:	b2ad      	uxthmi	r5, r5
 80059ae:	6031      	str	r1, [r6, #0]
 80059b0:	07d9      	lsls	r1, r3, #31
 80059b2:	bf44      	itt	mi
 80059b4:	f043 0320 	orrmi.w	r3, r3, #32
 80059b8:	6023      	strmi	r3, [r4, #0]
 80059ba:	b11d      	cbz	r5, 80059c4 <_printf_i+0x19c>
 80059bc:	2310      	movs	r3, #16
 80059be:	e7ad      	b.n	800591c <_printf_i+0xf4>
 80059c0:	4826      	ldr	r0, [pc, #152]	@ (8005a5c <_printf_i+0x234>)
 80059c2:	e7e9      	b.n	8005998 <_printf_i+0x170>
 80059c4:	6823      	ldr	r3, [r4, #0]
 80059c6:	f023 0320 	bic.w	r3, r3, #32
 80059ca:	6023      	str	r3, [r4, #0]
 80059cc:	e7f6      	b.n	80059bc <_printf_i+0x194>
 80059ce:	4616      	mov	r6, r2
 80059d0:	e7bd      	b.n	800594e <_printf_i+0x126>
 80059d2:	6833      	ldr	r3, [r6, #0]
 80059d4:	6825      	ldr	r5, [r4, #0]
 80059d6:	6961      	ldr	r1, [r4, #20]
 80059d8:	1d18      	adds	r0, r3, #4
 80059da:	6030      	str	r0, [r6, #0]
 80059dc:	062e      	lsls	r6, r5, #24
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	d501      	bpl.n	80059e6 <_printf_i+0x1be>
 80059e2:	6019      	str	r1, [r3, #0]
 80059e4:	e002      	b.n	80059ec <_printf_i+0x1c4>
 80059e6:	0668      	lsls	r0, r5, #25
 80059e8:	d5fb      	bpl.n	80059e2 <_printf_i+0x1ba>
 80059ea:	8019      	strh	r1, [r3, #0]
 80059ec:	2300      	movs	r3, #0
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	4616      	mov	r6, r2
 80059f2:	e7bc      	b.n	800596e <_printf_i+0x146>
 80059f4:	6833      	ldr	r3, [r6, #0]
 80059f6:	1d1a      	adds	r2, r3, #4
 80059f8:	6032      	str	r2, [r6, #0]
 80059fa:	681e      	ldr	r6, [r3, #0]
 80059fc:	6862      	ldr	r2, [r4, #4]
 80059fe:	2100      	movs	r1, #0
 8005a00:	4630      	mov	r0, r6
 8005a02:	f7fa fc05 	bl	8000210 <memchr>
 8005a06:	b108      	cbz	r0, 8005a0c <_printf_i+0x1e4>
 8005a08:	1b80      	subs	r0, r0, r6
 8005a0a:	6060      	str	r0, [r4, #4]
 8005a0c:	6863      	ldr	r3, [r4, #4]
 8005a0e:	6123      	str	r3, [r4, #16]
 8005a10:	2300      	movs	r3, #0
 8005a12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a16:	e7aa      	b.n	800596e <_printf_i+0x146>
 8005a18:	6923      	ldr	r3, [r4, #16]
 8005a1a:	4632      	mov	r2, r6
 8005a1c:	4649      	mov	r1, r9
 8005a1e:	4640      	mov	r0, r8
 8005a20:	47d0      	blx	sl
 8005a22:	3001      	adds	r0, #1
 8005a24:	d0ad      	beq.n	8005982 <_printf_i+0x15a>
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	079b      	lsls	r3, r3, #30
 8005a2a:	d413      	bmi.n	8005a54 <_printf_i+0x22c>
 8005a2c:	68e0      	ldr	r0, [r4, #12]
 8005a2e:	9b03      	ldr	r3, [sp, #12]
 8005a30:	4298      	cmp	r0, r3
 8005a32:	bfb8      	it	lt
 8005a34:	4618      	movlt	r0, r3
 8005a36:	e7a6      	b.n	8005986 <_printf_i+0x15e>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	4632      	mov	r2, r6
 8005a3c:	4649      	mov	r1, r9
 8005a3e:	4640      	mov	r0, r8
 8005a40:	47d0      	blx	sl
 8005a42:	3001      	adds	r0, #1
 8005a44:	d09d      	beq.n	8005982 <_printf_i+0x15a>
 8005a46:	3501      	adds	r5, #1
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	9903      	ldr	r1, [sp, #12]
 8005a4c:	1a5b      	subs	r3, r3, r1
 8005a4e:	42ab      	cmp	r3, r5
 8005a50:	dcf2      	bgt.n	8005a38 <_printf_i+0x210>
 8005a52:	e7eb      	b.n	8005a2c <_printf_i+0x204>
 8005a54:	2500      	movs	r5, #0
 8005a56:	f104 0619 	add.w	r6, r4, #25
 8005a5a:	e7f5      	b.n	8005a48 <_printf_i+0x220>
 8005a5c:	08007b0a 	.word	0x08007b0a
 8005a60:	08007b1b 	.word	0x08007b1b

08005a64 <std>:
 8005a64:	2300      	movs	r3, #0
 8005a66:	b510      	push	{r4, lr}
 8005a68:	4604      	mov	r4, r0
 8005a6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a72:	6083      	str	r3, [r0, #8]
 8005a74:	8181      	strh	r1, [r0, #12]
 8005a76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a78:	81c2      	strh	r2, [r0, #14]
 8005a7a:	6183      	str	r3, [r0, #24]
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	2208      	movs	r2, #8
 8005a80:	305c      	adds	r0, #92	@ 0x5c
 8005a82:	f000 f8f4 	bl	8005c6e <memset>
 8005a86:	4b0d      	ldr	r3, [pc, #52]	@ (8005abc <std+0x58>)
 8005a88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac0 <std+0x5c>)
 8005a8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac4 <std+0x60>)
 8005a90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a92:	4b0d      	ldr	r3, [pc, #52]	@ (8005ac8 <std+0x64>)
 8005a94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a96:	4b0d      	ldr	r3, [pc, #52]	@ (8005acc <std+0x68>)
 8005a98:	6224      	str	r4, [r4, #32]
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d006      	beq.n	8005aac <std+0x48>
 8005a9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005aa2:	4294      	cmp	r4, r2
 8005aa4:	d002      	beq.n	8005aac <std+0x48>
 8005aa6:	33d0      	adds	r3, #208	@ 0xd0
 8005aa8:	429c      	cmp	r4, r3
 8005aaa:	d105      	bne.n	8005ab8 <std+0x54>
 8005aac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f000 b958 	b.w	8005d68 <__retarget_lock_init_recursive>
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	08005be9 	.word	0x08005be9
 8005ac0:	08005c0b 	.word	0x08005c0b
 8005ac4:	08005c43 	.word	0x08005c43
 8005ac8:	08005c67 	.word	0x08005c67
 8005acc:	20000c78 	.word	0x20000c78

08005ad0 <stdio_exit_handler>:
 8005ad0:	4a02      	ldr	r2, [pc, #8]	@ (8005adc <stdio_exit_handler+0xc>)
 8005ad2:	4903      	ldr	r1, [pc, #12]	@ (8005ae0 <stdio_exit_handler+0x10>)
 8005ad4:	4803      	ldr	r0, [pc, #12]	@ (8005ae4 <stdio_exit_handler+0x14>)
 8005ad6:	f000 b869 	b.w	8005bac <_fwalk_sglue>
 8005ada:	bf00      	nop
 8005adc:	20000050 	.word	0x20000050
 8005ae0:	0800743d 	.word	0x0800743d
 8005ae4:	20000060 	.word	0x20000060

08005ae8 <cleanup_stdio>:
 8005ae8:	6841      	ldr	r1, [r0, #4]
 8005aea:	4b0c      	ldr	r3, [pc, #48]	@ (8005b1c <cleanup_stdio+0x34>)
 8005aec:	4299      	cmp	r1, r3
 8005aee:	b510      	push	{r4, lr}
 8005af0:	4604      	mov	r4, r0
 8005af2:	d001      	beq.n	8005af8 <cleanup_stdio+0x10>
 8005af4:	f001 fca2 	bl	800743c <_fflush_r>
 8005af8:	68a1      	ldr	r1, [r4, #8]
 8005afa:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <cleanup_stdio+0x38>)
 8005afc:	4299      	cmp	r1, r3
 8005afe:	d002      	beq.n	8005b06 <cleanup_stdio+0x1e>
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 fc9b 	bl	800743c <_fflush_r>
 8005b06:	68e1      	ldr	r1, [r4, #12]
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <cleanup_stdio+0x3c>)
 8005b0a:	4299      	cmp	r1, r3
 8005b0c:	d004      	beq.n	8005b18 <cleanup_stdio+0x30>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b14:	f001 bc92 	b.w	800743c <_fflush_r>
 8005b18:	bd10      	pop	{r4, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000c78 	.word	0x20000c78
 8005b20:	20000ce0 	.word	0x20000ce0
 8005b24:	20000d48 	.word	0x20000d48

08005b28 <global_stdio_init.part.0>:
 8005b28:	b510      	push	{r4, lr}
 8005b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <global_stdio_init.part.0+0x30>)
 8005b2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005b5c <global_stdio_init.part.0+0x34>)
 8005b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005b60 <global_stdio_init.part.0+0x38>)
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4620      	mov	r0, r4
 8005b34:	2200      	movs	r2, #0
 8005b36:	2104      	movs	r1, #4
 8005b38:	f7ff ff94 	bl	8005a64 <std>
 8005b3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005b40:	2201      	movs	r2, #1
 8005b42:	2109      	movs	r1, #9
 8005b44:	f7ff ff8e 	bl	8005a64 <std>
 8005b48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005b4c:	2202      	movs	r2, #2
 8005b4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b52:	2112      	movs	r1, #18
 8005b54:	f7ff bf86 	b.w	8005a64 <std>
 8005b58:	20000db0 	.word	0x20000db0
 8005b5c:	20000c78 	.word	0x20000c78
 8005b60:	08005ad1 	.word	0x08005ad1

08005b64 <__sfp_lock_acquire>:
 8005b64:	4801      	ldr	r0, [pc, #4]	@ (8005b6c <__sfp_lock_acquire+0x8>)
 8005b66:	f000 b900 	b.w	8005d6a <__retarget_lock_acquire_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20000db9 	.word	0x20000db9

08005b70 <__sfp_lock_release>:
 8005b70:	4801      	ldr	r0, [pc, #4]	@ (8005b78 <__sfp_lock_release+0x8>)
 8005b72:	f000 b8fb 	b.w	8005d6c <__retarget_lock_release_recursive>
 8005b76:	bf00      	nop
 8005b78:	20000db9 	.word	0x20000db9

08005b7c <__sinit>:
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	f7ff fff0 	bl	8005b64 <__sfp_lock_acquire>
 8005b84:	6a23      	ldr	r3, [r4, #32]
 8005b86:	b11b      	cbz	r3, 8005b90 <__sinit+0x14>
 8005b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b8c:	f7ff bff0 	b.w	8005b70 <__sfp_lock_release>
 8005b90:	4b04      	ldr	r3, [pc, #16]	@ (8005ba4 <__sinit+0x28>)
 8005b92:	6223      	str	r3, [r4, #32]
 8005b94:	4b04      	ldr	r3, [pc, #16]	@ (8005ba8 <__sinit+0x2c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1f5      	bne.n	8005b88 <__sinit+0xc>
 8005b9c:	f7ff ffc4 	bl	8005b28 <global_stdio_init.part.0>
 8005ba0:	e7f2      	b.n	8005b88 <__sinit+0xc>
 8005ba2:	bf00      	nop
 8005ba4:	08005ae9 	.word	0x08005ae9
 8005ba8:	20000db0 	.word	0x20000db0

08005bac <_fwalk_sglue>:
 8005bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb0:	4607      	mov	r7, r0
 8005bb2:	4688      	mov	r8, r1
 8005bb4:	4614      	mov	r4, r2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005bbc:	f1b9 0901 	subs.w	r9, r9, #1
 8005bc0:	d505      	bpl.n	8005bce <_fwalk_sglue+0x22>
 8005bc2:	6824      	ldr	r4, [r4, #0]
 8005bc4:	2c00      	cmp	r4, #0
 8005bc6:	d1f7      	bne.n	8005bb8 <_fwalk_sglue+0xc>
 8005bc8:	4630      	mov	r0, r6
 8005bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bce:	89ab      	ldrh	r3, [r5, #12]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d907      	bls.n	8005be4 <_fwalk_sglue+0x38>
 8005bd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	d003      	beq.n	8005be4 <_fwalk_sglue+0x38>
 8005bdc:	4629      	mov	r1, r5
 8005bde:	4638      	mov	r0, r7
 8005be0:	47c0      	blx	r8
 8005be2:	4306      	orrs	r6, r0
 8005be4:	3568      	adds	r5, #104	@ 0x68
 8005be6:	e7e9      	b.n	8005bbc <_fwalk_sglue+0x10>

08005be8 <__sread>:
 8005be8:	b510      	push	{r4, lr}
 8005bea:	460c      	mov	r4, r1
 8005bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bf0:	f000 f86c 	bl	8005ccc <_read_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	bfab      	itete	ge
 8005bf8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bfa:	89a3      	ldrhlt	r3, [r4, #12]
 8005bfc:	181b      	addge	r3, r3, r0
 8005bfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c02:	bfac      	ite	ge
 8005c04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c06:	81a3      	strhlt	r3, [r4, #12]
 8005c08:	bd10      	pop	{r4, pc}

08005c0a <__swrite>:
 8005c0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c0e:	461f      	mov	r7, r3
 8005c10:	898b      	ldrh	r3, [r1, #12]
 8005c12:	05db      	lsls	r3, r3, #23
 8005c14:	4605      	mov	r5, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	4616      	mov	r6, r2
 8005c1a:	d505      	bpl.n	8005c28 <__swrite+0x1e>
 8005c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c20:	2302      	movs	r3, #2
 8005c22:	2200      	movs	r2, #0
 8005c24:	f000 f840 	bl	8005ca8 <_lseek_r>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	4632      	mov	r2, r6
 8005c36:	463b      	mov	r3, r7
 8005c38:	4628      	mov	r0, r5
 8005c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c3e:	f000 b857 	b.w	8005cf0 <_write_r>

08005c42 <__sseek>:
 8005c42:	b510      	push	{r4, lr}
 8005c44:	460c      	mov	r4, r1
 8005c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4a:	f000 f82d 	bl	8005ca8 <_lseek_r>
 8005c4e:	1c43      	adds	r3, r0, #1
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	bf15      	itete	ne
 8005c54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c5e:	81a3      	strheq	r3, [r4, #12]
 8005c60:	bf18      	it	ne
 8005c62:	81a3      	strhne	r3, [r4, #12]
 8005c64:	bd10      	pop	{r4, pc}

08005c66 <__sclose>:
 8005c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c6a:	f000 b80d 	b.w	8005c88 <_close_r>

08005c6e <memset>:
 8005c6e:	4402      	add	r2, r0
 8005c70:	4603      	mov	r3, r0
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d100      	bne.n	8005c78 <memset+0xa>
 8005c76:	4770      	bx	lr
 8005c78:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7c:	e7f9      	b.n	8005c72 <memset+0x4>
	...

08005c80 <_localeconv_r>:
 8005c80:	4800      	ldr	r0, [pc, #0]	@ (8005c84 <_localeconv_r+0x4>)
 8005c82:	4770      	bx	lr
 8005c84:	2000019c 	.word	0x2000019c

08005c88 <_close_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d06      	ldr	r5, [pc, #24]	@ (8005ca4 <_close_r+0x1c>)
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	4608      	mov	r0, r1
 8005c92:	602b      	str	r3, [r5, #0]
 8005c94:	f7fc f920 	bl	8001ed8 <_close>
 8005c98:	1c43      	adds	r3, r0, #1
 8005c9a:	d102      	bne.n	8005ca2 <_close_r+0x1a>
 8005c9c:	682b      	ldr	r3, [r5, #0]
 8005c9e:	b103      	cbz	r3, 8005ca2 <_close_r+0x1a>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd38      	pop	{r3, r4, r5, pc}
 8005ca4:	20000db4 	.word	0x20000db4

08005ca8 <_lseek_r>:
 8005ca8:	b538      	push	{r3, r4, r5, lr}
 8005caa:	4d07      	ldr	r5, [pc, #28]	@ (8005cc8 <_lseek_r+0x20>)
 8005cac:	4604      	mov	r4, r0
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	602a      	str	r2, [r5, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f7fc f918 	bl	8001eec <_lseek>
 8005cbc:	1c43      	adds	r3, r0, #1
 8005cbe:	d102      	bne.n	8005cc6 <_lseek_r+0x1e>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	b103      	cbz	r3, 8005cc6 <_lseek_r+0x1e>
 8005cc4:	6023      	str	r3, [r4, #0]
 8005cc6:	bd38      	pop	{r3, r4, r5, pc}
 8005cc8:	20000db4 	.word	0x20000db4

08005ccc <_read_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	4d07      	ldr	r5, [pc, #28]	@ (8005cec <_read_r+0x20>)
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	4608      	mov	r0, r1
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	602a      	str	r2, [r5, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	f7fc f8de 	bl	8001e9c <_read>
 8005ce0:	1c43      	adds	r3, r0, #1
 8005ce2:	d102      	bne.n	8005cea <_read_r+0x1e>
 8005ce4:	682b      	ldr	r3, [r5, #0]
 8005ce6:	b103      	cbz	r3, 8005cea <_read_r+0x1e>
 8005ce8:	6023      	str	r3, [r4, #0]
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	20000db4 	.word	0x20000db4

08005cf0 <_write_r>:
 8005cf0:	b538      	push	{r3, r4, r5, lr}
 8005cf2:	4d07      	ldr	r5, [pc, #28]	@ (8005d10 <_write_r+0x20>)
 8005cf4:	4604      	mov	r4, r0
 8005cf6:	4608      	mov	r0, r1
 8005cf8:	4611      	mov	r1, r2
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	602a      	str	r2, [r5, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f7fc f8dc 	bl	8001ebc <_write>
 8005d04:	1c43      	adds	r3, r0, #1
 8005d06:	d102      	bne.n	8005d0e <_write_r+0x1e>
 8005d08:	682b      	ldr	r3, [r5, #0]
 8005d0a:	b103      	cbz	r3, 8005d0e <_write_r+0x1e>
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	bd38      	pop	{r3, r4, r5, pc}
 8005d10:	20000db4 	.word	0x20000db4

08005d14 <__errno>:
 8005d14:	4b01      	ldr	r3, [pc, #4]	@ (8005d1c <__errno+0x8>)
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	4770      	bx	lr
 8005d1a:	bf00      	nop
 8005d1c:	2000005c 	.word	0x2000005c

08005d20 <__libc_init_array>:
 8005d20:	b570      	push	{r4, r5, r6, lr}
 8005d22:	4d0d      	ldr	r5, [pc, #52]	@ (8005d58 <__libc_init_array+0x38>)
 8005d24:	4c0d      	ldr	r4, [pc, #52]	@ (8005d5c <__libc_init_array+0x3c>)
 8005d26:	1b64      	subs	r4, r4, r5
 8005d28:	10a4      	asrs	r4, r4, #2
 8005d2a:	2600      	movs	r6, #0
 8005d2c:	42a6      	cmp	r6, r4
 8005d2e:	d109      	bne.n	8005d44 <__libc_init_array+0x24>
 8005d30:	4d0b      	ldr	r5, [pc, #44]	@ (8005d60 <__libc_init_array+0x40>)
 8005d32:	4c0c      	ldr	r4, [pc, #48]	@ (8005d64 <__libc_init_array+0x44>)
 8005d34:	f001 fec2 	bl	8007abc <_init>
 8005d38:	1b64      	subs	r4, r4, r5
 8005d3a:	10a4      	asrs	r4, r4, #2
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	42a6      	cmp	r6, r4
 8005d40:	d105      	bne.n	8005d4e <__libc_init_array+0x2e>
 8005d42:	bd70      	pop	{r4, r5, r6, pc}
 8005d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d48:	4798      	blx	r3
 8005d4a:	3601      	adds	r6, #1
 8005d4c:	e7ee      	b.n	8005d2c <__libc_init_array+0xc>
 8005d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d52:	4798      	blx	r3
 8005d54:	3601      	adds	r6, #1
 8005d56:	e7f2      	b.n	8005d3e <__libc_init_array+0x1e>
 8005d58:	08007e74 	.word	0x08007e74
 8005d5c:	08007e74 	.word	0x08007e74
 8005d60:	08007e74 	.word	0x08007e74
 8005d64:	08007e78 	.word	0x08007e78

08005d68 <__retarget_lock_init_recursive>:
 8005d68:	4770      	bx	lr

08005d6a <__retarget_lock_acquire_recursive>:
 8005d6a:	4770      	bx	lr

08005d6c <__retarget_lock_release_recursive>:
 8005d6c:	4770      	bx	lr

08005d6e <memcpy>:
 8005d6e:	440a      	add	r2, r1
 8005d70:	4291      	cmp	r1, r2
 8005d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d76:	d100      	bne.n	8005d7a <memcpy+0xc>
 8005d78:	4770      	bx	lr
 8005d7a:	b510      	push	{r4, lr}
 8005d7c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d80:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d84:	4291      	cmp	r1, r2
 8005d86:	d1f9      	bne.n	8005d7c <memcpy+0xe>
 8005d88:	bd10      	pop	{r4, pc}

08005d8a <quorem>:
 8005d8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d8e:	6903      	ldr	r3, [r0, #16]
 8005d90:	690c      	ldr	r4, [r1, #16]
 8005d92:	42a3      	cmp	r3, r4
 8005d94:	4607      	mov	r7, r0
 8005d96:	db7e      	blt.n	8005e96 <quorem+0x10c>
 8005d98:	3c01      	subs	r4, #1
 8005d9a:	f101 0814 	add.w	r8, r1, #20
 8005d9e:	00a3      	lsls	r3, r4, #2
 8005da0:	f100 0514 	add.w	r5, r0, #20
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005db4:	3301      	adds	r3, #1
 8005db6:	429a      	cmp	r2, r3
 8005db8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005dbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8005dc0:	d32e      	bcc.n	8005e20 <quorem+0x96>
 8005dc2:	f04f 0a00 	mov.w	sl, #0
 8005dc6:	46c4      	mov	ip, r8
 8005dc8:	46ae      	mov	lr, r5
 8005dca:	46d3      	mov	fp, sl
 8005dcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005dd0:	b298      	uxth	r0, r3
 8005dd2:	fb06 a000 	mla	r0, r6, r0, sl
 8005dd6:	0c02      	lsrs	r2, r0, #16
 8005dd8:	0c1b      	lsrs	r3, r3, #16
 8005dda:	fb06 2303 	mla	r3, r6, r3, r2
 8005dde:	f8de 2000 	ldr.w	r2, [lr]
 8005de2:	b280      	uxth	r0, r0
 8005de4:	b292      	uxth	r2, r2
 8005de6:	1a12      	subs	r2, r2, r0
 8005de8:	445a      	add	r2, fp
 8005dea:	f8de 0000 	ldr.w	r0, [lr]
 8005dee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005df8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dfc:	b292      	uxth	r2, r2
 8005dfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005e02:	45e1      	cmp	r9, ip
 8005e04:	f84e 2b04 	str.w	r2, [lr], #4
 8005e08:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005e0c:	d2de      	bcs.n	8005dcc <quorem+0x42>
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	58eb      	ldr	r3, [r5, r3]
 8005e12:	b92b      	cbnz	r3, 8005e20 <quorem+0x96>
 8005e14:	9b01      	ldr	r3, [sp, #4]
 8005e16:	3b04      	subs	r3, #4
 8005e18:	429d      	cmp	r5, r3
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	d32f      	bcc.n	8005e7e <quorem+0xf4>
 8005e1e:	613c      	str	r4, [r7, #16]
 8005e20:	4638      	mov	r0, r7
 8005e22:	f001 f97f 	bl	8007124 <__mcmp>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	db25      	blt.n	8005e76 <quorem+0xec>
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e32:	f8d1 c000 	ldr.w	ip, [r1]
 8005e36:	fa1f fe82 	uxth.w	lr, r2
 8005e3a:	fa1f f38c 	uxth.w	r3, ip
 8005e3e:	eba3 030e 	sub.w	r3, r3, lr
 8005e42:	4403      	add	r3, r0
 8005e44:	0c12      	lsrs	r2, r2, #16
 8005e46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e54:	45c1      	cmp	r9, r8
 8005e56:	f841 3b04 	str.w	r3, [r1], #4
 8005e5a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e5e:	d2e6      	bcs.n	8005e2e <quorem+0xa4>
 8005e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e68:	b922      	cbnz	r2, 8005e74 <quorem+0xea>
 8005e6a:	3b04      	subs	r3, #4
 8005e6c:	429d      	cmp	r5, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	d30b      	bcc.n	8005e8a <quorem+0x100>
 8005e72:	613c      	str	r4, [r7, #16]
 8005e74:	3601      	adds	r6, #1
 8005e76:	4630      	mov	r0, r6
 8005e78:	b003      	add	sp, #12
 8005e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7e:	6812      	ldr	r2, [r2, #0]
 8005e80:	3b04      	subs	r3, #4
 8005e82:	2a00      	cmp	r2, #0
 8005e84:	d1cb      	bne.n	8005e1e <quorem+0x94>
 8005e86:	3c01      	subs	r4, #1
 8005e88:	e7c6      	b.n	8005e18 <quorem+0x8e>
 8005e8a:	6812      	ldr	r2, [r2, #0]
 8005e8c:	3b04      	subs	r3, #4
 8005e8e:	2a00      	cmp	r2, #0
 8005e90:	d1ef      	bne.n	8005e72 <quorem+0xe8>
 8005e92:	3c01      	subs	r4, #1
 8005e94:	e7ea      	b.n	8005e6c <quorem+0xe2>
 8005e96:	2000      	movs	r0, #0
 8005e98:	e7ee      	b.n	8005e78 <quorem+0xee>
 8005e9a:	0000      	movs	r0, r0
 8005e9c:	0000      	movs	r0, r0
	...

08005ea0 <_dtoa_r>:
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	69c7      	ldr	r7, [r0, #28]
 8005ea6:	b097      	sub	sp, #92	@ 0x5c
 8005ea8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005eac:	ec55 4b10 	vmov	r4, r5, d0
 8005eb0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005eb2:	9107      	str	r1, [sp, #28]
 8005eb4:	4681      	mov	r9, r0
 8005eb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005eb8:	9311      	str	r3, [sp, #68]	@ 0x44
 8005eba:	b97f      	cbnz	r7, 8005edc <_dtoa_r+0x3c>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f000 fe09 	bl	8006ad4 <malloc>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	f8c9 001c 	str.w	r0, [r9, #28]
 8005ec8:	b920      	cbnz	r0, 8005ed4 <_dtoa_r+0x34>
 8005eca:	4ba9      	ldr	r3, [pc, #676]	@ (8006170 <_dtoa_r+0x2d0>)
 8005ecc:	21ef      	movs	r1, #239	@ 0xef
 8005ece:	48a9      	ldr	r0, [pc, #676]	@ (8006174 <_dtoa_r+0x2d4>)
 8005ed0:	f001 faec 	bl	80074ac <__assert_func>
 8005ed4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ed8:	6007      	str	r7, [r0, #0]
 8005eda:	60c7      	str	r7, [r0, #12]
 8005edc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ee0:	6819      	ldr	r1, [r3, #0]
 8005ee2:	b159      	cbz	r1, 8005efc <_dtoa_r+0x5c>
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	604a      	str	r2, [r1, #4]
 8005ee8:	2301      	movs	r3, #1
 8005eea:	4093      	lsls	r3, r2
 8005eec:	608b      	str	r3, [r1, #8]
 8005eee:	4648      	mov	r0, r9
 8005ef0:	f000 fee6 	bl	8006cc0 <_Bfree>
 8005ef4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]
 8005efc:	1e2b      	subs	r3, r5, #0
 8005efe:	bfb9      	ittee	lt
 8005f00:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005f04:	9305      	strlt	r3, [sp, #20]
 8005f06:	2300      	movge	r3, #0
 8005f08:	6033      	strge	r3, [r6, #0]
 8005f0a:	9f05      	ldr	r7, [sp, #20]
 8005f0c:	4b9a      	ldr	r3, [pc, #616]	@ (8006178 <_dtoa_r+0x2d8>)
 8005f0e:	bfbc      	itt	lt
 8005f10:	2201      	movlt	r2, #1
 8005f12:	6032      	strlt	r2, [r6, #0]
 8005f14:	43bb      	bics	r3, r7
 8005f16:	d112      	bne.n	8005f3e <_dtoa_r+0x9e>
 8005f18:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f1a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005f1e:	6013      	str	r3, [r2, #0]
 8005f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f24:	4323      	orrs	r3, r4
 8005f26:	f000 855a 	beq.w	80069de <_dtoa_r+0xb3e>
 8005f2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f2c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800618c <_dtoa_r+0x2ec>
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 855c 	beq.w	80069ee <_dtoa_r+0xb4e>
 8005f36:	f10a 0303 	add.w	r3, sl, #3
 8005f3a:	f000 bd56 	b.w	80069ea <_dtoa_r+0xb4a>
 8005f3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005f42:	2200      	movs	r2, #0
 8005f44:	ec51 0b17 	vmov	r0, r1, d7
 8005f48:	2300      	movs	r3, #0
 8005f4a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005f4e:	f7fa fddb 	bl	8000b08 <__aeabi_dcmpeq>
 8005f52:	4680      	mov	r8, r0
 8005f54:	b158      	cbz	r0, 8005f6e <_dtoa_r+0xce>
 8005f56:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f58:	2301      	movs	r3, #1
 8005f5a:	6013      	str	r3, [r2, #0]
 8005f5c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005f5e:	b113      	cbz	r3, 8005f66 <_dtoa_r+0xc6>
 8005f60:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005f62:	4b86      	ldr	r3, [pc, #536]	@ (800617c <_dtoa_r+0x2dc>)
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006190 <_dtoa_r+0x2f0>
 8005f6a:	f000 bd40 	b.w	80069ee <_dtoa_r+0xb4e>
 8005f6e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005f72:	aa14      	add	r2, sp, #80	@ 0x50
 8005f74:	a915      	add	r1, sp, #84	@ 0x54
 8005f76:	4648      	mov	r0, r9
 8005f78:	f001 f984 	bl	8007284 <__d2b>
 8005f7c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f80:	9002      	str	r0, [sp, #8]
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d078      	beq.n	8006078 <_dtoa_r+0x1d8>
 8005f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f88:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005f94:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f98:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f9c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	4b76      	ldr	r3, [pc, #472]	@ (8006180 <_dtoa_r+0x2e0>)
 8005fa6:	f7fa f98f 	bl	80002c8 <__aeabi_dsub>
 8005faa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006158 <_dtoa_r+0x2b8>)
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f7fa fb42 	bl	8000638 <__aeabi_dmul>
 8005fb4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006160 <_dtoa_r+0x2c0>)
 8005fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fba:	f7fa f987 	bl	80002cc <__adddf3>
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4630      	mov	r0, r6
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	f7fa face 	bl	8000564 <__aeabi_i2d>
 8005fc8:	a367      	add	r3, pc, #412	@ (adr r3, 8006168 <_dtoa_r+0x2c8>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fb33 	bl	8000638 <__aeabi_dmul>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	4629      	mov	r1, r5
 8005fda:	f7fa f977 	bl	80002cc <__adddf3>
 8005fde:	4604      	mov	r4, r0
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	f7fa fdd9 	bl	8000b98 <__aeabi_d2iz>
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	4607      	mov	r7, r0
 8005fea:	2300      	movs	r3, #0
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fd94 	bl	8000b1c <__aeabi_dcmplt>
 8005ff4:	b140      	cbz	r0, 8006008 <_dtoa_r+0x168>
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f7fa fab4 	bl	8000564 <__aeabi_i2d>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	462b      	mov	r3, r5
 8006000:	f7fa fd82 	bl	8000b08 <__aeabi_dcmpeq>
 8006004:	b900      	cbnz	r0, 8006008 <_dtoa_r+0x168>
 8006006:	3f01      	subs	r7, #1
 8006008:	2f16      	cmp	r7, #22
 800600a:	d852      	bhi.n	80060b2 <_dtoa_r+0x212>
 800600c:	4b5d      	ldr	r3, [pc, #372]	@ (8006184 <_dtoa_r+0x2e4>)
 800600e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800601a:	f7fa fd7f 	bl	8000b1c <__aeabi_dcmplt>
 800601e:	2800      	cmp	r0, #0
 8006020:	d049      	beq.n	80060b6 <_dtoa_r+0x216>
 8006022:	3f01      	subs	r7, #1
 8006024:	2300      	movs	r3, #0
 8006026:	9310      	str	r3, [sp, #64]	@ 0x40
 8006028:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800602a:	1b9b      	subs	r3, r3, r6
 800602c:	1e5a      	subs	r2, r3, #1
 800602e:	bf45      	ittet	mi
 8006030:	f1c3 0301 	rsbmi	r3, r3, #1
 8006034:	9300      	strmi	r3, [sp, #0]
 8006036:	2300      	movpl	r3, #0
 8006038:	2300      	movmi	r3, #0
 800603a:	9206      	str	r2, [sp, #24]
 800603c:	bf54      	ite	pl
 800603e:	9300      	strpl	r3, [sp, #0]
 8006040:	9306      	strmi	r3, [sp, #24]
 8006042:	2f00      	cmp	r7, #0
 8006044:	db39      	blt.n	80060ba <_dtoa_r+0x21a>
 8006046:	9b06      	ldr	r3, [sp, #24]
 8006048:	970d      	str	r7, [sp, #52]	@ 0x34
 800604a:	443b      	add	r3, r7
 800604c:	9306      	str	r3, [sp, #24]
 800604e:	2300      	movs	r3, #0
 8006050:	9308      	str	r3, [sp, #32]
 8006052:	9b07      	ldr	r3, [sp, #28]
 8006054:	2b09      	cmp	r3, #9
 8006056:	d863      	bhi.n	8006120 <_dtoa_r+0x280>
 8006058:	2b05      	cmp	r3, #5
 800605a:	bfc4      	itt	gt
 800605c:	3b04      	subgt	r3, #4
 800605e:	9307      	strgt	r3, [sp, #28]
 8006060:	9b07      	ldr	r3, [sp, #28]
 8006062:	f1a3 0302 	sub.w	r3, r3, #2
 8006066:	bfcc      	ite	gt
 8006068:	2400      	movgt	r4, #0
 800606a:	2401      	movle	r4, #1
 800606c:	2b03      	cmp	r3, #3
 800606e:	d863      	bhi.n	8006138 <_dtoa_r+0x298>
 8006070:	e8df f003 	tbb	[pc, r3]
 8006074:	2b375452 	.word	0x2b375452
 8006078:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800607c:	441e      	add	r6, r3
 800607e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006082:	2b20      	cmp	r3, #32
 8006084:	bfc1      	itttt	gt
 8006086:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800608a:	409f      	lslgt	r7, r3
 800608c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006090:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006094:	bfd6      	itet	le
 8006096:	f1c3 0320 	rsble	r3, r3, #32
 800609a:	ea47 0003 	orrgt.w	r0, r7, r3
 800609e:	fa04 f003 	lslle.w	r0, r4, r3
 80060a2:	f7fa fa4f 	bl	8000544 <__aeabi_ui2d>
 80060a6:	2201      	movs	r2, #1
 80060a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80060ac:	3e01      	subs	r6, #1
 80060ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80060b0:	e776      	b.n	8005fa0 <_dtoa_r+0x100>
 80060b2:	2301      	movs	r3, #1
 80060b4:	e7b7      	b.n	8006026 <_dtoa_r+0x186>
 80060b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80060b8:	e7b6      	b.n	8006028 <_dtoa_r+0x188>
 80060ba:	9b00      	ldr	r3, [sp, #0]
 80060bc:	1bdb      	subs	r3, r3, r7
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	427b      	negs	r3, r7
 80060c2:	9308      	str	r3, [sp, #32]
 80060c4:	2300      	movs	r3, #0
 80060c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80060c8:	e7c3      	b.n	8006052 <_dtoa_r+0x1b2>
 80060ca:	2301      	movs	r3, #1
 80060cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060d0:	eb07 0b03 	add.w	fp, r7, r3
 80060d4:	f10b 0301 	add.w	r3, fp, #1
 80060d8:	2b01      	cmp	r3, #1
 80060da:	9303      	str	r3, [sp, #12]
 80060dc:	bfb8      	it	lt
 80060de:	2301      	movlt	r3, #1
 80060e0:	e006      	b.n	80060f0 <_dtoa_r+0x250>
 80060e2:	2301      	movs	r3, #1
 80060e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dd28      	ble.n	800613e <_dtoa_r+0x29e>
 80060ec:	469b      	mov	fp, r3
 80060ee:	9303      	str	r3, [sp, #12]
 80060f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80060f4:	2100      	movs	r1, #0
 80060f6:	2204      	movs	r2, #4
 80060f8:	f102 0514 	add.w	r5, r2, #20
 80060fc:	429d      	cmp	r5, r3
 80060fe:	d926      	bls.n	800614e <_dtoa_r+0x2ae>
 8006100:	6041      	str	r1, [r0, #4]
 8006102:	4648      	mov	r0, r9
 8006104:	f000 fd9c 	bl	8006c40 <_Balloc>
 8006108:	4682      	mov	sl, r0
 800610a:	2800      	cmp	r0, #0
 800610c:	d142      	bne.n	8006194 <_dtoa_r+0x2f4>
 800610e:	4b1e      	ldr	r3, [pc, #120]	@ (8006188 <_dtoa_r+0x2e8>)
 8006110:	4602      	mov	r2, r0
 8006112:	f240 11af 	movw	r1, #431	@ 0x1af
 8006116:	e6da      	b.n	8005ece <_dtoa_r+0x2e>
 8006118:	2300      	movs	r3, #0
 800611a:	e7e3      	b.n	80060e4 <_dtoa_r+0x244>
 800611c:	2300      	movs	r3, #0
 800611e:	e7d5      	b.n	80060cc <_dtoa_r+0x22c>
 8006120:	2401      	movs	r4, #1
 8006122:	2300      	movs	r3, #0
 8006124:	9307      	str	r3, [sp, #28]
 8006126:	9409      	str	r4, [sp, #36]	@ 0x24
 8006128:	f04f 3bff 	mov.w	fp, #4294967295
 800612c:	2200      	movs	r2, #0
 800612e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006132:	2312      	movs	r3, #18
 8006134:	920c      	str	r2, [sp, #48]	@ 0x30
 8006136:	e7db      	b.n	80060f0 <_dtoa_r+0x250>
 8006138:	2301      	movs	r3, #1
 800613a:	9309      	str	r3, [sp, #36]	@ 0x24
 800613c:	e7f4      	b.n	8006128 <_dtoa_r+0x288>
 800613e:	f04f 0b01 	mov.w	fp, #1
 8006142:	f8cd b00c 	str.w	fp, [sp, #12]
 8006146:	465b      	mov	r3, fp
 8006148:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800614c:	e7d0      	b.n	80060f0 <_dtoa_r+0x250>
 800614e:	3101      	adds	r1, #1
 8006150:	0052      	lsls	r2, r2, #1
 8006152:	e7d1      	b.n	80060f8 <_dtoa_r+0x258>
 8006154:	f3af 8000 	nop.w
 8006158:	636f4361 	.word	0x636f4361
 800615c:	3fd287a7 	.word	0x3fd287a7
 8006160:	8b60c8b3 	.word	0x8b60c8b3
 8006164:	3fc68a28 	.word	0x3fc68a28
 8006168:	509f79fb 	.word	0x509f79fb
 800616c:	3fd34413 	.word	0x3fd34413
 8006170:	08007b39 	.word	0x08007b39
 8006174:	08007b50 	.word	0x08007b50
 8006178:	7ff00000 	.word	0x7ff00000
 800617c:	08007b09 	.word	0x08007b09
 8006180:	3ff80000 	.word	0x3ff80000
 8006184:	08007ca0 	.word	0x08007ca0
 8006188:	08007ba8 	.word	0x08007ba8
 800618c:	08007b35 	.word	0x08007b35
 8006190:	08007b08 	.word	0x08007b08
 8006194:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006198:	6018      	str	r0, [r3, #0]
 800619a:	9b03      	ldr	r3, [sp, #12]
 800619c:	2b0e      	cmp	r3, #14
 800619e:	f200 80a1 	bhi.w	80062e4 <_dtoa_r+0x444>
 80061a2:	2c00      	cmp	r4, #0
 80061a4:	f000 809e 	beq.w	80062e4 <_dtoa_r+0x444>
 80061a8:	2f00      	cmp	r7, #0
 80061aa:	dd33      	ble.n	8006214 <_dtoa_r+0x374>
 80061ac:	4b9c      	ldr	r3, [pc, #624]	@ (8006420 <_dtoa_r+0x580>)
 80061ae:	f007 020f 	and.w	r2, r7, #15
 80061b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061b6:	ed93 7b00 	vldr	d7, [r3]
 80061ba:	05f8      	lsls	r0, r7, #23
 80061bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80061c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80061c4:	d516      	bpl.n	80061f4 <_dtoa_r+0x354>
 80061c6:	4b97      	ldr	r3, [pc, #604]	@ (8006424 <_dtoa_r+0x584>)
 80061c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80061cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061d0:	f7fa fb5c 	bl	800088c <__aeabi_ddiv>
 80061d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061d8:	f004 040f 	and.w	r4, r4, #15
 80061dc:	2603      	movs	r6, #3
 80061de:	4d91      	ldr	r5, [pc, #580]	@ (8006424 <_dtoa_r+0x584>)
 80061e0:	b954      	cbnz	r4, 80061f8 <_dtoa_r+0x358>
 80061e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80061e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061ea:	f7fa fb4f 	bl	800088c <__aeabi_ddiv>
 80061ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061f2:	e028      	b.n	8006246 <_dtoa_r+0x3a6>
 80061f4:	2602      	movs	r6, #2
 80061f6:	e7f2      	b.n	80061de <_dtoa_r+0x33e>
 80061f8:	07e1      	lsls	r1, r4, #31
 80061fa:	d508      	bpl.n	800620e <_dtoa_r+0x36e>
 80061fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006200:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006204:	f7fa fa18 	bl	8000638 <__aeabi_dmul>
 8006208:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800620c:	3601      	adds	r6, #1
 800620e:	1064      	asrs	r4, r4, #1
 8006210:	3508      	adds	r5, #8
 8006212:	e7e5      	b.n	80061e0 <_dtoa_r+0x340>
 8006214:	f000 80af 	beq.w	8006376 <_dtoa_r+0x4d6>
 8006218:	427c      	negs	r4, r7
 800621a:	4b81      	ldr	r3, [pc, #516]	@ (8006420 <_dtoa_r+0x580>)
 800621c:	4d81      	ldr	r5, [pc, #516]	@ (8006424 <_dtoa_r+0x584>)
 800621e:	f004 020f 	and.w	r2, r4, #15
 8006222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800622e:	f7fa fa03 	bl	8000638 <__aeabi_dmul>
 8006232:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006236:	1124      	asrs	r4, r4, #4
 8006238:	2300      	movs	r3, #0
 800623a:	2602      	movs	r6, #2
 800623c:	2c00      	cmp	r4, #0
 800623e:	f040 808f 	bne.w	8006360 <_dtoa_r+0x4c0>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1d3      	bne.n	80061ee <_dtoa_r+0x34e>
 8006246:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006248:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8094 	beq.w	800637a <_dtoa_r+0x4da>
 8006252:	4b75      	ldr	r3, [pc, #468]	@ (8006428 <_dtoa_r+0x588>)
 8006254:	2200      	movs	r2, #0
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	f7fa fc5f 	bl	8000b1c <__aeabi_dcmplt>
 800625e:	2800      	cmp	r0, #0
 8006260:	f000 808b 	beq.w	800637a <_dtoa_r+0x4da>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f000 8087 	beq.w	800637a <_dtoa_r+0x4da>
 800626c:	f1bb 0f00 	cmp.w	fp, #0
 8006270:	dd34      	ble.n	80062dc <_dtoa_r+0x43c>
 8006272:	4620      	mov	r0, r4
 8006274:	4b6d      	ldr	r3, [pc, #436]	@ (800642c <_dtoa_r+0x58c>)
 8006276:	2200      	movs	r2, #0
 8006278:	4629      	mov	r1, r5
 800627a:	f7fa f9dd 	bl	8000638 <__aeabi_dmul>
 800627e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006282:	f107 38ff 	add.w	r8, r7, #4294967295
 8006286:	3601      	adds	r6, #1
 8006288:	465c      	mov	r4, fp
 800628a:	4630      	mov	r0, r6
 800628c:	f7fa f96a 	bl	8000564 <__aeabi_i2d>
 8006290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006294:	f7fa f9d0 	bl	8000638 <__aeabi_dmul>
 8006298:	4b65      	ldr	r3, [pc, #404]	@ (8006430 <_dtoa_r+0x590>)
 800629a:	2200      	movs	r2, #0
 800629c:	f7fa f816 	bl	80002cc <__adddf3>
 80062a0:	4605      	mov	r5, r0
 80062a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	d16a      	bne.n	8006380 <_dtoa_r+0x4e0>
 80062aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ae:	4b61      	ldr	r3, [pc, #388]	@ (8006434 <_dtoa_r+0x594>)
 80062b0:	2200      	movs	r2, #0
 80062b2:	f7fa f809 	bl	80002c8 <__aeabi_dsub>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062be:	462a      	mov	r2, r5
 80062c0:	4633      	mov	r3, r6
 80062c2:	f7fa fc49 	bl	8000b58 <__aeabi_dcmpgt>
 80062c6:	2800      	cmp	r0, #0
 80062c8:	f040 8298 	bne.w	80067fc <_dtoa_r+0x95c>
 80062cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062d0:	462a      	mov	r2, r5
 80062d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062d6:	f7fa fc21 	bl	8000b1c <__aeabi_dcmplt>
 80062da:	bb38      	cbnz	r0, 800632c <_dtoa_r+0x48c>
 80062dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80062e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80062e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f2c0 8157 	blt.w	800659a <_dtoa_r+0x6fa>
 80062ec:	2f0e      	cmp	r7, #14
 80062ee:	f300 8154 	bgt.w	800659a <_dtoa_r+0x6fa>
 80062f2:	4b4b      	ldr	r3, [pc, #300]	@ (8006420 <_dtoa_r+0x580>)
 80062f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062f8:	ed93 7b00 	vldr	d7, [r3]
 80062fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80062fe:	2b00      	cmp	r3, #0
 8006300:	ed8d 7b00 	vstr	d7, [sp]
 8006304:	f280 80e5 	bge.w	80064d2 <_dtoa_r+0x632>
 8006308:	9b03      	ldr	r3, [sp, #12]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f300 80e1 	bgt.w	80064d2 <_dtoa_r+0x632>
 8006310:	d10c      	bne.n	800632c <_dtoa_r+0x48c>
 8006312:	4b48      	ldr	r3, [pc, #288]	@ (8006434 <_dtoa_r+0x594>)
 8006314:	2200      	movs	r2, #0
 8006316:	ec51 0b17 	vmov	r0, r1, d7
 800631a:	f7fa f98d 	bl	8000638 <__aeabi_dmul>
 800631e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006322:	f7fa fc0f 	bl	8000b44 <__aeabi_dcmpge>
 8006326:	2800      	cmp	r0, #0
 8006328:	f000 8266 	beq.w	80067f8 <_dtoa_r+0x958>
 800632c:	2400      	movs	r4, #0
 800632e:	4625      	mov	r5, r4
 8006330:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006332:	4656      	mov	r6, sl
 8006334:	ea6f 0803 	mvn.w	r8, r3
 8006338:	2700      	movs	r7, #0
 800633a:	4621      	mov	r1, r4
 800633c:	4648      	mov	r0, r9
 800633e:	f000 fcbf 	bl	8006cc0 <_Bfree>
 8006342:	2d00      	cmp	r5, #0
 8006344:	f000 80bd 	beq.w	80064c2 <_dtoa_r+0x622>
 8006348:	b12f      	cbz	r7, 8006356 <_dtoa_r+0x4b6>
 800634a:	42af      	cmp	r7, r5
 800634c:	d003      	beq.n	8006356 <_dtoa_r+0x4b6>
 800634e:	4639      	mov	r1, r7
 8006350:	4648      	mov	r0, r9
 8006352:	f000 fcb5 	bl	8006cc0 <_Bfree>
 8006356:	4629      	mov	r1, r5
 8006358:	4648      	mov	r0, r9
 800635a:	f000 fcb1 	bl	8006cc0 <_Bfree>
 800635e:	e0b0      	b.n	80064c2 <_dtoa_r+0x622>
 8006360:	07e2      	lsls	r2, r4, #31
 8006362:	d505      	bpl.n	8006370 <_dtoa_r+0x4d0>
 8006364:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006368:	f7fa f966 	bl	8000638 <__aeabi_dmul>
 800636c:	3601      	adds	r6, #1
 800636e:	2301      	movs	r3, #1
 8006370:	1064      	asrs	r4, r4, #1
 8006372:	3508      	adds	r5, #8
 8006374:	e762      	b.n	800623c <_dtoa_r+0x39c>
 8006376:	2602      	movs	r6, #2
 8006378:	e765      	b.n	8006246 <_dtoa_r+0x3a6>
 800637a:	9c03      	ldr	r4, [sp, #12]
 800637c:	46b8      	mov	r8, r7
 800637e:	e784      	b.n	800628a <_dtoa_r+0x3ea>
 8006380:	4b27      	ldr	r3, [pc, #156]	@ (8006420 <_dtoa_r+0x580>)
 8006382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006388:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800638c:	4454      	add	r4, sl
 800638e:	2900      	cmp	r1, #0
 8006390:	d054      	beq.n	800643c <_dtoa_r+0x59c>
 8006392:	4929      	ldr	r1, [pc, #164]	@ (8006438 <_dtoa_r+0x598>)
 8006394:	2000      	movs	r0, #0
 8006396:	f7fa fa79 	bl	800088c <__aeabi_ddiv>
 800639a:	4633      	mov	r3, r6
 800639c:	462a      	mov	r2, r5
 800639e:	f7f9 ff93 	bl	80002c8 <__aeabi_dsub>
 80063a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80063a6:	4656      	mov	r6, sl
 80063a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ac:	f7fa fbf4 	bl	8000b98 <__aeabi_d2iz>
 80063b0:	4605      	mov	r5, r0
 80063b2:	f7fa f8d7 	bl	8000564 <__aeabi_i2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063be:	f7f9 ff83 	bl	80002c8 <__aeabi_dsub>
 80063c2:	3530      	adds	r5, #48	@ 0x30
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80063cc:	f806 5b01 	strb.w	r5, [r6], #1
 80063d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063d4:	f7fa fba2 	bl	8000b1c <__aeabi_dcmplt>
 80063d8:	2800      	cmp	r0, #0
 80063da:	d172      	bne.n	80064c2 <_dtoa_r+0x622>
 80063dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063e0:	4911      	ldr	r1, [pc, #68]	@ (8006428 <_dtoa_r+0x588>)
 80063e2:	2000      	movs	r0, #0
 80063e4:	f7f9 ff70 	bl	80002c8 <__aeabi_dsub>
 80063e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80063ec:	f7fa fb96 	bl	8000b1c <__aeabi_dcmplt>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f040 80b4 	bne.w	800655e <_dtoa_r+0x6be>
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	f43f af70 	beq.w	80062dc <_dtoa_r+0x43c>
 80063fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006400:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <_dtoa_r+0x58c>)
 8006402:	2200      	movs	r2, #0
 8006404:	f7fa f918 	bl	8000638 <__aeabi_dmul>
 8006408:	4b08      	ldr	r3, [pc, #32]	@ (800642c <_dtoa_r+0x58c>)
 800640a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800640e:	2200      	movs	r2, #0
 8006410:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006414:	f7fa f910 	bl	8000638 <__aeabi_dmul>
 8006418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800641c:	e7c4      	b.n	80063a8 <_dtoa_r+0x508>
 800641e:	bf00      	nop
 8006420:	08007ca0 	.word	0x08007ca0
 8006424:	08007c78 	.word	0x08007c78
 8006428:	3ff00000 	.word	0x3ff00000
 800642c:	40240000 	.word	0x40240000
 8006430:	401c0000 	.word	0x401c0000
 8006434:	40140000 	.word	0x40140000
 8006438:	3fe00000 	.word	0x3fe00000
 800643c:	4631      	mov	r1, r6
 800643e:	4628      	mov	r0, r5
 8006440:	f7fa f8fa 	bl	8000638 <__aeabi_dmul>
 8006444:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006448:	9413      	str	r4, [sp, #76]	@ 0x4c
 800644a:	4656      	mov	r6, sl
 800644c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006450:	f7fa fba2 	bl	8000b98 <__aeabi_d2iz>
 8006454:	4605      	mov	r5, r0
 8006456:	f7fa f885 	bl	8000564 <__aeabi_i2d>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006462:	f7f9 ff31 	bl	80002c8 <__aeabi_dsub>
 8006466:	3530      	adds	r5, #48	@ 0x30
 8006468:	f806 5b01 	strb.w	r5, [r6], #1
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	42a6      	cmp	r6, r4
 8006472:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006476:	f04f 0200 	mov.w	r2, #0
 800647a:	d124      	bne.n	80064c6 <_dtoa_r+0x626>
 800647c:	4baf      	ldr	r3, [pc, #700]	@ (800673c <_dtoa_r+0x89c>)
 800647e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006482:	f7f9 ff23 	bl	80002cc <__adddf3>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800648e:	f7fa fb63 	bl	8000b58 <__aeabi_dcmpgt>
 8006492:	2800      	cmp	r0, #0
 8006494:	d163      	bne.n	800655e <_dtoa_r+0x6be>
 8006496:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800649a:	49a8      	ldr	r1, [pc, #672]	@ (800673c <_dtoa_r+0x89c>)
 800649c:	2000      	movs	r0, #0
 800649e:	f7f9 ff13 	bl	80002c8 <__aeabi_dsub>
 80064a2:	4602      	mov	r2, r0
 80064a4:	460b      	mov	r3, r1
 80064a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064aa:	f7fa fb37 	bl	8000b1c <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f43f af14 	beq.w	80062dc <_dtoa_r+0x43c>
 80064b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80064b6:	1e73      	subs	r3, r6, #1
 80064b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80064ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064be:	2b30      	cmp	r3, #48	@ 0x30
 80064c0:	d0f8      	beq.n	80064b4 <_dtoa_r+0x614>
 80064c2:	4647      	mov	r7, r8
 80064c4:	e03b      	b.n	800653e <_dtoa_r+0x69e>
 80064c6:	4b9e      	ldr	r3, [pc, #632]	@ (8006740 <_dtoa_r+0x8a0>)
 80064c8:	f7fa f8b6 	bl	8000638 <__aeabi_dmul>
 80064cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064d0:	e7bc      	b.n	800644c <_dtoa_r+0x5ac>
 80064d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80064d6:	4656      	mov	r6, sl
 80064d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064dc:	4620      	mov	r0, r4
 80064de:	4629      	mov	r1, r5
 80064e0:	f7fa f9d4 	bl	800088c <__aeabi_ddiv>
 80064e4:	f7fa fb58 	bl	8000b98 <__aeabi_d2iz>
 80064e8:	4680      	mov	r8, r0
 80064ea:	f7fa f83b 	bl	8000564 <__aeabi_i2d>
 80064ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064f2:	f7fa f8a1 	bl	8000638 <__aeabi_dmul>
 80064f6:	4602      	mov	r2, r0
 80064f8:	460b      	mov	r3, r1
 80064fa:	4620      	mov	r0, r4
 80064fc:	4629      	mov	r1, r5
 80064fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006502:	f7f9 fee1 	bl	80002c8 <__aeabi_dsub>
 8006506:	f806 4b01 	strb.w	r4, [r6], #1
 800650a:	9d03      	ldr	r5, [sp, #12]
 800650c:	eba6 040a 	sub.w	r4, r6, sl
 8006510:	42a5      	cmp	r5, r4
 8006512:	4602      	mov	r2, r0
 8006514:	460b      	mov	r3, r1
 8006516:	d133      	bne.n	8006580 <_dtoa_r+0x6e0>
 8006518:	f7f9 fed8 	bl	80002cc <__adddf3>
 800651c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006520:	4604      	mov	r4, r0
 8006522:	460d      	mov	r5, r1
 8006524:	f7fa fb18 	bl	8000b58 <__aeabi_dcmpgt>
 8006528:	b9c0      	cbnz	r0, 800655c <_dtoa_r+0x6bc>
 800652a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800652e:	4620      	mov	r0, r4
 8006530:	4629      	mov	r1, r5
 8006532:	f7fa fae9 	bl	8000b08 <__aeabi_dcmpeq>
 8006536:	b110      	cbz	r0, 800653e <_dtoa_r+0x69e>
 8006538:	f018 0f01 	tst.w	r8, #1
 800653c:	d10e      	bne.n	800655c <_dtoa_r+0x6bc>
 800653e:	9902      	ldr	r1, [sp, #8]
 8006540:	4648      	mov	r0, r9
 8006542:	f000 fbbd 	bl	8006cc0 <_Bfree>
 8006546:	2300      	movs	r3, #0
 8006548:	7033      	strb	r3, [r6, #0]
 800654a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800654c:	3701      	adds	r7, #1
 800654e:	601f      	str	r7, [r3, #0]
 8006550:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 824b 	beq.w	80069ee <_dtoa_r+0xb4e>
 8006558:	601e      	str	r6, [r3, #0]
 800655a:	e248      	b.n	80069ee <_dtoa_r+0xb4e>
 800655c:	46b8      	mov	r8, r7
 800655e:	4633      	mov	r3, r6
 8006560:	461e      	mov	r6, r3
 8006562:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006566:	2a39      	cmp	r2, #57	@ 0x39
 8006568:	d106      	bne.n	8006578 <_dtoa_r+0x6d8>
 800656a:	459a      	cmp	sl, r3
 800656c:	d1f8      	bne.n	8006560 <_dtoa_r+0x6c0>
 800656e:	2230      	movs	r2, #48	@ 0x30
 8006570:	f108 0801 	add.w	r8, r8, #1
 8006574:	f88a 2000 	strb.w	r2, [sl]
 8006578:	781a      	ldrb	r2, [r3, #0]
 800657a:	3201      	adds	r2, #1
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	e7a0      	b.n	80064c2 <_dtoa_r+0x622>
 8006580:	4b6f      	ldr	r3, [pc, #444]	@ (8006740 <_dtoa_r+0x8a0>)
 8006582:	2200      	movs	r2, #0
 8006584:	f7fa f858 	bl	8000638 <__aeabi_dmul>
 8006588:	2200      	movs	r2, #0
 800658a:	2300      	movs	r3, #0
 800658c:	4604      	mov	r4, r0
 800658e:	460d      	mov	r5, r1
 8006590:	f7fa faba 	bl	8000b08 <__aeabi_dcmpeq>
 8006594:	2800      	cmp	r0, #0
 8006596:	d09f      	beq.n	80064d8 <_dtoa_r+0x638>
 8006598:	e7d1      	b.n	800653e <_dtoa_r+0x69e>
 800659a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800659c:	2a00      	cmp	r2, #0
 800659e:	f000 80ea 	beq.w	8006776 <_dtoa_r+0x8d6>
 80065a2:	9a07      	ldr	r2, [sp, #28]
 80065a4:	2a01      	cmp	r2, #1
 80065a6:	f300 80cd 	bgt.w	8006744 <_dtoa_r+0x8a4>
 80065aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80065ac:	2a00      	cmp	r2, #0
 80065ae:	f000 80c1 	beq.w	8006734 <_dtoa_r+0x894>
 80065b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80065b6:	9c08      	ldr	r4, [sp, #32]
 80065b8:	9e00      	ldr	r6, [sp, #0]
 80065ba:	9a00      	ldr	r2, [sp, #0]
 80065bc:	441a      	add	r2, r3
 80065be:	9200      	str	r2, [sp, #0]
 80065c0:	9a06      	ldr	r2, [sp, #24]
 80065c2:	2101      	movs	r1, #1
 80065c4:	441a      	add	r2, r3
 80065c6:	4648      	mov	r0, r9
 80065c8:	9206      	str	r2, [sp, #24]
 80065ca:	f000 fc2d 	bl	8006e28 <__i2b>
 80065ce:	4605      	mov	r5, r0
 80065d0:	b166      	cbz	r6, 80065ec <_dtoa_r+0x74c>
 80065d2:	9b06      	ldr	r3, [sp, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd09      	ble.n	80065ec <_dtoa_r+0x74c>
 80065d8:	42b3      	cmp	r3, r6
 80065da:	9a00      	ldr	r2, [sp, #0]
 80065dc:	bfa8      	it	ge
 80065de:	4633      	movge	r3, r6
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	9200      	str	r2, [sp, #0]
 80065e4:	9a06      	ldr	r2, [sp, #24]
 80065e6:	1af6      	subs	r6, r6, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	9306      	str	r3, [sp, #24]
 80065ec:	9b08      	ldr	r3, [sp, #32]
 80065ee:	b30b      	cbz	r3, 8006634 <_dtoa_r+0x794>
 80065f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80c6 	beq.w	8006784 <_dtoa_r+0x8e4>
 80065f8:	2c00      	cmp	r4, #0
 80065fa:	f000 80c0 	beq.w	800677e <_dtoa_r+0x8de>
 80065fe:	4629      	mov	r1, r5
 8006600:	4622      	mov	r2, r4
 8006602:	4648      	mov	r0, r9
 8006604:	f000 fcc8 	bl	8006f98 <__pow5mult>
 8006608:	9a02      	ldr	r2, [sp, #8]
 800660a:	4601      	mov	r1, r0
 800660c:	4605      	mov	r5, r0
 800660e:	4648      	mov	r0, r9
 8006610:	f000 fc20 	bl	8006e54 <__multiply>
 8006614:	9902      	ldr	r1, [sp, #8]
 8006616:	4680      	mov	r8, r0
 8006618:	4648      	mov	r0, r9
 800661a:	f000 fb51 	bl	8006cc0 <_Bfree>
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	1b1b      	subs	r3, r3, r4
 8006622:	9308      	str	r3, [sp, #32]
 8006624:	f000 80b1 	beq.w	800678a <_dtoa_r+0x8ea>
 8006628:	9a08      	ldr	r2, [sp, #32]
 800662a:	4641      	mov	r1, r8
 800662c:	4648      	mov	r0, r9
 800662e:	f000 fcb3 	bl	8006f98 <__pow5mult>
 8006632:	9002      	str	r0, [sp, #8]
 8006634:	2101      	movs	r1, #1
 8006636:	4648      	mov	r0, r9
 8006638:	f000 fbf6 	bl	8006e28 <__i2b>
 800663c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800663e:	4604      	mov	r4, r0
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 81d8 	beq.w	80069f6 <_dtoa_r+0xb56>
 8006646:	461a      	mov	r2, r3
 8006648:	4601      	mov	r1, r0
 800664a:	4648      	mov	r0, r9
 800664c:	f000 fca4 	bl	8006f98 <__pow5mult>
 8006650:	9b07      	ldr	r3, [sp, #28]
 8006652:	2b01      	cmp	r3, #1
 8006654:	4604      	mov	r4, r0
 8006656:	f300 809f 	bgt.w	8006798 <_dtoa_r+0x8f8>
 800665a:	9b04      	ldr	r3, [sp, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f040 8097 	bne.w	8006790 <_dtoa_r+0x8f0>
 8006662:	9b05      	ldr	r3, [sp, #20]
 8006664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006668:	2b00      	cmp	r3, #0
 800666a:	f040 8093 	bne.w	8006794 <_dtoa_r+0x8f4>
 800666e:	9b05      	ldr	r3, [sp, #20]
 8006670:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006674:	0d1b      	lsrs	r3, r3, #20
 8006676:	051b      	lsls	r3, r3, #20
 8006678:	b133      	cbz	r3, 8006688 <_dtoa_r+0x7e8>
 800667a:	9b00      	ldr	r3, [sp, #0]
 800667c:	3301      	adds	r3, #1
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	9b06      	ldr	r3, [sp, #24]
 8006682:	3301      	adds	r3, #1
 8006684:	9306      	str	r3, [sp, #24]
 8006686:	2301      	movs	r3, #1
 8006688:	9308      	str	r3, [sp, #32]
 800668a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 81b8 	beq.w	8006a02 <_dtoa_r+0xb62>
 8006692:	6923      	ldr	r3, [r4, #16]
 8006694:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006698:	6918      	ldr	r0, [r3, #16]
 800669a:	f000 fb79 	bl	8006d90 <__hi0bits>
 800669e:	f1c0 0020 	rsb	r0, r0, #32
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	4418      	add	r0, r3
 80066a6:	f010 001f 	ands.w	r0, r0, #31
 80066aa:	f000 8082 	beq.w	80067b2 <_dtoa_r+0x912>
 80066ae:	f1c0 0320 	rsb	r3, r0, #32
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	dd73      	ble.n	800679e <_dtoa_r+0x8fe>
 80066b6:	9b00      	ldr	r3, [sp, #0]
 80066b8:	f1c0 001c 	rsb	r0, r0, #28
 80066bc:	4403      	add	r3, r0
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	9b06      	ldr	r3, [sp, #24]
 80066c2:	4403      	add	r3, r0
 80066c4:	4406      	add	r6, r0
 80066c6:	9306      	str	r3, [sp, #24]
 80066c8:	9b00      	ldr	r3, [sp, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	dd05      	ble.n	80066da <_dtoa_r+0x83a>
 80066ce:	9902      	ldr	r1, [sp, #8]
 80066d0:	461a      	mov	r2, r3
 80066d2:	4648      	mov	r0, r9
 80066d4:	f000 fcba 	bl	800704c <__lshift>
 80066d8:	9002      	str	r0, [sp, #8]
 80066da:	9b06      	ldr	r3, [sp, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	dd05      	ble.n	80066ec <_dtoa_r+0x84c>
 80066e0:	4621      	mov	r1, r4
 80066e2:	461a      	mov	r2, r3
 80066e4:	4648      	mov	r0, r9
 80066e6:	f000 fcb1 	bl	800704c <__lshift>
 80066ea:	4604      	mov	r4, r0
 80066ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d061      	beq.n	80067b6 <_dtoa_r+0x916>
 80066f2:	9802      	ldr	r0, [sp, #8]
 80066f4:	4621      	mov	r1, r4
 80066f6:	f000 fd15 	bl	8007124 <__mcmp>
 80066fa:	2800      	cmp	r0, #0
 80066fc:	da5b      	bge.n	80067b6 <_dtoa_r+0x916>
 80066fe:	2300      	movs	r3, #0
 8006700:	9902      	ldr	r1, [sp, #8]
 8006702:	220a      	movs	r2, #10
 8006704:	4648      	mov	r0, r9
 8006706:	f000 fafd 	bl	8006d04 <__multadd>
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	9002      	str	r0, [sp, #8]
 800670e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006712:	2b00      	cmp	r3, #0
 8006714:	f000 8177 	beq.w	8006a06 <_dtoa_r+0xb66>
 8006718:	4629      	mov	r1, r5
 800671a:	2300      	movs	r3, #0
 800671c:	220a      	movs	r2, #10
 800671e:	4648      	mov	r0, r9
 8006720:	f000 faf0 	bl	8006d04 <__multadd>
 8006724:	f1bb 0f00 	cmp.w	fp, #0
 8006728:	4605      	mov	r5, r0
 800672a:	dc6f      	bgt.n	800680c <_dtoa_r+0x96c>
 800672c:	9b07      	ldr	r3, [sp, #28]
 800672e:	2b02      	cmp	r3, #2
 8006730:	dc49      	bgt.n	80067c6 <_dtoa_r+0x926>
 8006732:	e06b      	b.n	800680c <_dtoa_r+0x96c>
 8006734:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006736:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800673a:	e73c      	b.n	80065b6 <_dtoa_r+0x716>
 800673c:	3fe00000 	.word	0x3fe00000
 8006740:	40240000 	.word	0x40240000
 8006744:	9b03      	ldr	r3, [sp, #12]
 8006746:	1e5c      	subs	r4, r3, #1
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	42a3      	cmp	r3, r4
 800674c:	db09      	blt.n	8006762 <_dtoa_r+0x8c2>
 800674e:	1b1c      	subs	r4, r3, r4
 8006750:	9b03      	ldr	r3, [sp, #12]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f6bf af30 	bge.w	80065b8 <_dtoa_r+0x718>
 8006758:	9b00      	ldr	r3, [sp, #0]
 800675a:	9a03      	ldr	r2, [sp, #12]
 800675c:	1a9e      	subs	r6, r3, r2
 800675e:	2300      	movs	r3, #0
 8006760:	e72b      	b.n	80065ba <_dtoa_r+0x71a>
 8006762:	9b08      	ldr	r3, [sp, #32]
 8006764:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006766:	9408      	str	r4, [sp, #32]
 8006768:	1ae3      	subs	r3, r4, r3
 800676a:	441a      	add	r2, r3
 800676c:	9e00      	ldr	r6, [sp, #0]
 800676e:	9b03      	ldr	r3, [sp, #12]
 8006770:	920d      	str	r2, [sp, #52]	@ 0x34
 8006772:	2400      	movs	r4, #0
 8006774:	e721      	b.n	80065ba <_dtoa_r+0x71a>
 8006776:	9c08      	ldr	r4, [sp, #32]
 8006778:	9e00      	ldr	r6, [sp, #0]
 800677a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800677c:	e728      	b.n	80065d0 <_dtoa_r+0x730>
 800677e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006782:	e751      	b.n	8006628 <_dtoa_r+0x788>
 8006784:	9a08      	ldr	r2, [sp, #32]
 8006786:	9902      	ldr	r1, [sp, #8]
 8006788:	e750      	b.n	800662c <_dtoa_r+0x78c>
 800678a:	f8cd 8008 	str.w	r8, [sp, #8]
 800678e:	e751      	b.n	8006634 <_dtoa_r+0x794>
 8006790:	2300      	movs	r3, #0
 8006792:	e779      	b.n	8006688 <_dtoa_r+0x7e8>
 8006794:	9b04      	ldr	r3, [sp, #16]
 8006796:	e777      	b.n	8006688 <_dtoa_r+0x7e8>
 8006798:	2300      	movs	r3, #0
 800679a:	9308      	str	r3, [sp, #32]
 800679c:	e779      	b.n	8006692 <_dtoa_r+0x7f2>
 800679e:	d093      	beq.n	80066c8 <_dtoa_r+0x828>
 80067a0:	9a00      	ldr	r2, [sp, #0]
 80067a2:	331c      	adds	r3, #28
 80067a4:	441a      	add	r2, r3
 80067a6:	9200      	str	r2, [sp, #0]
 80067a8:	9a06      	ldr	r2, [sp, #24]
 80067aa:	441a      	add	r2, r3
 80067ac:	441e      	add	r6, r3
 80067ae:	9206      	str	r2, [sp, #24]
 80067b0:	e78a      	b.n	80066c8 <_dtoa_r+0x828>
 80067b2:	4603      	mov	r3, r0
 80067b4:	e7f4      	b.n	80067a0 <_dtoa_r+0x900>
 80067b6:	9b03      	ldr	r3, [sp, #12]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	46b8      	mov	r8, r7
 80067bc:	dc20      	bgt.n	8006800 <_dtoa_r+0x960>
 80067be:	469b      	mov	fp, r3
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	2b02      	cmp	r3, #2
 80067c4:	dd1e      	ble.n	8006804 <_dtoa_r+0x964>
 80067c6:	f1bb 0f00 	cmp.w	fp, #0
 80067ca:	f47f adb1 	bne.w	8006330 <_dtoa_r+0x490>
 80067ce:	4621      	mov	r1, r4
 80067d0:	465b      	mov	r3, fp
 80067d2:	2205      	movs	r2, #5
 80067d4:	4648      	mov	r0, r9
 80067d6:	f000 fa95 	bl	8006d04 <__multadd>
 80067da:	4601      	mov	r1, r0
 80067dc:	4604      	mov	r4, r0
 80067de:	9802      	ldr	r0, [sp, #8]
 80067e0:	f000 fca0 	bl	8007124 <__mcmp>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f77f ada3 	ble.w	8006330 <_dtoa_r+0x490>
 80067ea:	4656      	mov	r6, sl
 80067ec:	2331      	movs	r3, #49	@ 0x31
 80067ee:	f806 3b01 	strb.w	r3, [r6], #1
 80067f2:	f108 0801 	add.w	r8, r8, #1
 80067f6:	e59f      	b.n	8006338 <_dtoa_r+0x498>
 80067f8:	9c03      	ldr	r4, [sp, #12]
 80067fa:	46b8      	mov	r8, r7
 80067fc:	4625      	mov	r5, r4
 80067fe:	e7f4      	b.n	80067ea <_dtoa_r+0x94a>
 8006800:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006804:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8101 	beq.w	8006a0e <_dtoa_r+0xb6e>
 800680c:	2e00      	cmp	r6, #0
 800680e:	dd05      	ble.n	800681c <_dtoa_r+0x97c>
 8006810:	4629      	mov	r1, r5
 8006812:	4632      	mov	r2, r6
 8006814:	4648      	mov	r0, r9
 8006816:	f000 fc19 	bl	800704c <__lshift>
 800681a:	4605      	mov	r5, r0
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d05c      	beq.n	80068dc <_dtoa_r+0xa3c>
 8006822:	6869      	ldr	r1, [r5, #4]
 8006824:	4648      	mov	r0, r9
 8006826:	f000 fa0b 	bl	8006c40 <_Balloc>
 800682a:	4606      	mov	r6, r0
 800682c:	b928      	cbnz	r0, 800683a <_dtoa_r+0x99a>
 800682e:	4b82      	ldr	r3, [pc, #520]	@ (8006a38 <_dtoa_r+0xb98>)
 8006830:	4602      	mov	r2, r0
 8006832:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006836:	f7ff bb4a 	b.w	8005ece <_dtoa_r+0x2e>
 800683a:	692a      	ldr	r2, [r5, #16]
 800683c:	3202      	adds	r2, #2
 800683e:	0092      	lsls	r2, r2, #2
 8006840:	f105 010c 	add.w	r1, r5, #12
 8006844:	300c      	adds	r0, #12
 8006846:	f7ff fa92 	bl	8005d6e <memcpy>
 800684a:	2201      	movs	r2, #1
 800684c:	4631      	mov	r1, r6
 800684e:	4648      	mov	r0, r9
 8006850:	f000 fbfc 	bl	800704c <__lshift>
 8006854:	f10a 0301 	add.w	r3, sl, #1
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	eb0a 030b 	add.w	r3, sl, fp
 800685e:	9308      	str	r3, [sp, #32]
 8006860:	9b04      	ldr	r3, [sp, #16]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	462f      	mov	r7, r5
 8006868:	9306      	str	r3, [sp, #24]
 800686a:	4605      	mov	r5, r0
 800686c:	9b00      	ldr	r3, [sp, #0]
 800686e:	9802      	ldr	r0, [sp, #8]
 8006870:	4621      	mov	r1, r4
 8006872:	f103 3bff 	add.w	fp, r3, #4294967295
 8006876:	f7ff fa88 	bl	8005d8a <quorem>
 800687a:	4603      	mov	r3, r0
 800687c:	3330      	adds	r3, #48	@ 0x30
 800687e:	9003      	str	r0, [sp, #12]
 8006880:	4639      	mov	r1, r7
 8006882:	9802      	ldr	r0, [sp, #8]
 8006884:	9309      	str	r3, [sp, #36]	@ 0x24
 8006886:	f000 fc4d 	bl	8007124 <__mcmp>
 800688a:	462a      	mov	r2, r5
 800688c:	9004      	str	r0, [sp, #16]
 800688e:	4621      	mov	r1, r4
 8006890:	4648      	mov	r0, r9
 8006892:	f000 fc63 	bl	800715c <__mdiff>
 8006896:	68c2      	ldr	r2, [r0, #12]
 8006898:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689a:	4606      	mov	r6, r0
 800689c:	bb02      	cbnz	r2, 80068e0 <_dtoa_r+0xa40>
 800689e:	4601      	mov	r1, r0
 80068a0:	9802      	ldr	r0, [sp, #8]
 80068a2:	f000 fc3f 	bl	8007124 <__mcmp>
 80068a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068a8:	4602      	mov	r2, r0
 80068aa:	4631      	mov	r1, r6
 80068ac:	4648      	mov	r0, r9
 80068ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80068b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80068b2:	f000 fa05 	bl	8006cc0 <_Bfree>
 80068b6:	9b07      	ldr	r3, [sp, #28]
 80068b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80068ba:	9e00      	ldr	r6, [sp, #0]
 80068bc:	ea42 0103 	orr.w	r1, r2, r3
 80068c0:	9b06      	ldr	r3, [sp, #24]
 80068c2:	4319      	orrs	r1, r3
 80068c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c6:	d10d      	bne.n	80068e4 <_dtoa_r+0xa44>
 80068c8:	2b39      	cmp	r3, #57	@ 0x39
 80068ca:	d027      	beq.n	800691c <_dtoa_r+0xa7c>
 80068cc:	9a04      	ldr	r2, [sp, #16]
 80068ce:	2a00      	cmp	r2, #0
 80068d0:	dd01      	ble.n	80068d6 <_dtoa_r+0xa36>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	3331      	adds	r3, #49	@ 0x31
 80068d6:	f88b 3000 	strb.w	r3, [fp]
 80068da:	e52e      	b.n	800633a <_dtoa_r+0x49a>
 80068dc:	4628      	mov	r0, r5
 80068de:	e7b9      	b.n	8006854 <_dtoa_r+0x9b4>
 80068e0:	2201      	movs	r2, #1
 80068e2:	e7e2      	b.n	80068aa <_dtoa_r+0xa0a>
 80068e4:	9904      	ldr	r1, [sp, #16]
 80068e6:	2900      	cmp	r1, #0
 80068e8:	db04      	blt.n	80068f4 <_dtoa_r+0xa54>
 80068ea:	9807      	ldr	r0, [sp, #28]
 80068ec:	4301      	orrs	r1, r0
 80068ee:	9806      	ldr	r0, [sp, #24]
 80068f0:	4301      	orrs	r1, r0
 80068f2:	d120      	bne.n	8006936 <_dtoa_r+0xa96>
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	ddee      	ble.n	80068d6 <_dtoa_r+0xa36>
 80068f8:	9902      	ldr	r1, [sp, #8]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	2201      	movs	r2, #1
 80068fe:	4648      	mov	r0, r9
 8006900:	f000 fba4 	bl	800704c <__lshift>
 8006904:	4621      	mov	r1, r4
 8006906:	9002      	str	r0, [sp, #8]
 8006908:	f000 fc0c 	bl	8007124 <__mcmp>
 800690c:	2800      	cmp	r0, #0
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	dc02      	bgt.n	8006918 <_dtoa_r+0xa78>
 8006912:	d1e0      	bne.n	80068d6 <_dtoa_r+0xa36>
 8006914:	07da      	lsls	r2, r3, #31
 8006916:	d5de      	bpl.n	80068d6 <_dtoa_r+0xa36>
 8006918:	2b39      	cmp	r3, #57	@ 0x39
 800691a:	d1da      	bne.n	80068d2 <_dtoa_r+0xa32>
 800691c:	2339      	movs	r3, #57	@ 0x39
 800691e:	f88b 3000 	strb.w	r3, [fp]
 8006922:	4633      	mov	r3, r6
 8006924:	461e      	mov	r6, r3
 8006926:	3b01      	subs	r3, #1
 8006928:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800692c:	2a39      	cmp	r2, #57	@ 0x39
 800692e:	d04e      	beq.n	80069ce <_dtoa_r+0xb2e>
 8006930:	3201      	adds	r2, #1
 8006932:	701a      	strb	r2, [r3, #0]
 8006934:	e501      	b.n	800633a <_dtoa_r+0x49a>
 8006936:	2a00      	cmp	r2, #0
 8006938:	dd03      	ble.n	8006942 <_dtoa_r+0xaa2>
 800693a:	2b39      	cmp	r3, #57	@ 0x39
 800693c:	d0ee      	beq.n	800691c <_dtoa_r+0xa7c>
 800693e:	3301      	adds	r3, #1
 8006940:	e7c9      	b.n	80068d6 <_dtoa_r+0xa36>
 8006942:	9a00      	ldr	r2, [sp, #0]
 8006944:	9908      	ldr	r1, [sp, #32]
 8006946:	f802 3c01 	strb.w	r3, [r2, #-1]
 800694a:	428a      	cmp	r2, r1
 800694c:	d028      	beq.n	80069a0 <_dtoa_r+0xb00>
 800694e:	9902      	ldr	r1, [sp, #8]
 8006950:	2300      	movs	r3, #0
 8006952:	220a      	movs	r2, #10
 8006954:	4648      	mov	r0, r9
 8006956:	f000 f9d5 	bl	8006d04 <__multadd>
 800695a:	42af      	cmp	r7, r5
 800695c:	9002      	str	r0, [sp, #8]
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 020a 	mov.w	r2, #10
 8006966:	4639      	mov	r1, r7
 8006968:	4648      	mov	r0, r9
 800696a:	d107      	bne.n	800697c <_dtoa_r+0xadc>
 800696c:	f000 f9ca 	bl	8006d04 <__multadd>
 8006970:	4607      	mov	r7, r0
 8006972:	4605      	mov	r5, r0
 8006974:	9b00      	ldr	r3, [sp, #0]
 8006976:	3301      	adds	r3, #1
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	e777      	b.n	800686c <_dtoa_r+0x9cc>
 800697c:	f000 f9c2 	bl	8006d04 <__multadd>
 8006980:	4629      	mov	r1, r5
 8006982:	4607      	mov	r7, r0
 8006984:	2300      	movs	r3, #0
 8006986:	220a      	movs	r2, #10
 8006988:	4648      	mov	r0, r9
 800698a:	f000 f9bb 	bl	8006d04 <__multadd>
 800698e:	4605      	mov	r5, r0
 8006990:	e7f0      	b.n	8006974 <_dtoa_r+0xad4>
 8006992:	f1bb 0f00 	cmp.w	fp, #0
 8006996:	bfcc      	ite	gt
 8006998:	465e      	movgt	r6, fp
 800699a:	2601      	movle	r6, #1
 800699c:	4456      	add	r6, sl
 800699e:	2700      	movs	r7, #0
 80069a0:	9902      	ldr	r1, [sp, #8]
 80069a2:	9300      	str	r3, [sp, #0]
 80069a4:	2201      	movs	r2, #1
 80069a6:	4648      	mov	r0, r9
 80069a8:	f000 fb50 	bl	800704c <__lshift>
 80069ac:	4621      	mov	r1, r4
 80069ae:	9002      	str	r0, [sp, #8]
 80069b0:	f000 fbb8 	bl	8007124 <__mcmp>
 80069b4:	2800      	cmp	r0, #0
 80069b6:	dcb4      	bgt.n	8006922 <_dtoa_r+0xa82>
 80069b8:	d102      	bne.n	80069c0 <_dtoa_r+0xb20>
 80069ba:	9b00      	ldr	r3, [sp, #0]
 80069bc:	07db      	lsls	r3, r3, #31
 80069be:	d4b0      	bmi.n	8006922 <_dtoa_r+0xa82>
 80069c0:	4633      	mov	r3, r6
 80069c2:	461e      	mov	r6, r3
 80069c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069c8:	2a30      	cmp	r2, #48	@ 0x30
 80069ca:	d0fa      	beq.n	80069c2 <_dtoa_r+0xb22>
 80069cc:	e4b5      	b.n	800633a <_dtoa_r+0x49a>
 80069ce:	459a      	cmp	sl, r3
 80069d0:	d1a8      	bne.n	8006924 <_dtoa_r+0xa84>
 80069d2:	2331      	movs	r3, #49	@ 0x31
 80069d4:	f108 0801 	add.w	r8, r8, #1
 80069d8:	f88a 3000 	strb.w	r3, [sl]
 80069dc:	e4ad      	b.n	800633a <_dtoa_r+0x49a>
 80069de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80069e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006a3c <_dtoa_r+0xb9c>
 80069e4:	b11b      	cbz	r3, 80069ee <_dtoa_r+0xb4e>
 80069e6:	f10a 0308 	add.w	r3, sl, #8
 80069ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4650      	mov	r0, sl
 80069f0:	b017      	add	sp, #92	@ 0x5c
 80069f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f6:	9b07      	ldr	r3, [sp, #28]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	f77f ae2e 	ble.w	800665a <_dtoa_r+0x7ba>
 80069fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006a00:	9308      	str	r3, [sp, #32]
 8006a02:	2001      	movs	r0, #1
 8006a04:	e64d      	b.n	80066a2 <_dtoa_r+0x802>
 8006a06:	f1bb 0f00 	cmp.w	fp, #0
 8006a0a:	f77f aed9 	ble.w	80067c0 <_dtoa_r+0x920>
 8006a0e:	4656      	mov	r6, sl
 8006a10:	9802      	ldr	r0, [sp, #8]
 8006a12:	4621      	mov	r1, r4
 8006a14:	f7ff f9b9 	bl	8005d8a <quorem>
 8006a18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006a1c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a20:	eba6 020a 	sub.w	r2, r6, sl
 8006a24:	4593      	cmp	fp, r2
 8006a26:	ddb4      	ble.n	8006992 <_dtoa_r+0xaf2>
 8006a28:	9902      	ldr	r1, [sp, #8]
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	220a      	movs	r2, #10
 8006a2e:	4648      	mov	r0, r9
 8006a30:	f000 f968 	bl	8006d04 <__multadd>
 8006a34:	9002      	str	r0, [sp, #8]
 8006a36:	e7eb      	b.n	8006a10 <_dtoa_r+0xb70>
 8006a38:	08007ba8 	.word	0x08007ba8
 8006a3c:	08007b2c 	.word	0x08007b2c

08006a40 <_free_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	4605      	mov	r5, r0
 8006a44:	2900      	cmp	r1, #0
 8006a46:	d041      	beq.n	8006acc <_free_r+0x8c>
 8006a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a4c:	1f0c      	subs	r4, r1, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	bfb8      	it	lt
 8006a52:	18e4      	addlt	r4, r4, r3
 8006a54:	f000 f8e8 	bl	8006c28 <__malloc_lock>
 8006a58:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad0 <_free_r+0x90>)
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	b933      	cbnz	r3, 8006a6c <_free_r+0x2c>
 8006a5e:	6063      	str	r3, [r4, #4]
 8006a60:	6014      	str	r4, [r2, #0]
 8006a62:	4628      	mov	r0, r5
 8006a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a68:	f000 b8e4 	b.w	8006c34 <__malloc_unlock>
 8006a6c:	42a3      	cmp	r3, r4
 8006a6e:	d908      	bls.n	8006a82 <_free_r+0x42>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	1821      	adds	r1, r4, r0
 8006a74:	428b      	cmp	r3, r1
 8006a76:	bf01      	itttt	eq
 8006a78:	6819      	ldreq	r1, [r3, #0]
 8006a7a:	685b      	ldreq	r3, [r3, #4]
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	e7ed      	b.n	8006a5e <_free_r+0x1e>
 8006a82:	461a      	mov	r2, r3
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	b10b      	cbz	r3, 8006a8c <_free_r+0x4c>
 8006a88:	42a3      	cmp	r3, r4
 8006a8a:	d9fa      	bls.n	8006a82 <_free_r+0x42>
 8006a8c:	6811      	ldr	r1, [r2, #0]
 8006a8e:	1850      	adds	r0, r2, r1
 8006a90:	42a0      	cmp	r0, r4
 8006a92:	d10b      	bne.n	8006aac <_free_r+0x6c>
 8006a94:	6820      	ldr	r0, [r4, #0]
 8006a96:	4401      	add	r1, r0
 8006a98:	1850      	adds	r0, r2, r1
 8006a9a:	4283      	cmp	r3, r0
 8006a9c:	6011      	str	r1, [r2, #0]
 8006a9e:	d1e0      	bne.n	8006a62 <_free_r+0x22>
 8006aa0:	6818      	ldr	r0, [r3, #0]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	6053      	str	r3, [r2, #4]
 8006aa6:	4408      	add	r0, r1
 8006aa8:	6010      	str	r0, [r2, #0]
 8006aaa:	e7da      	b.n	8006a62 <_free_r+0x22>
 8006aac:	d902      	bls.n	8006ab4 <_free_r+0x74>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	e7d6      	b.n	8006a62 <_free_r+0x22>
 8006ab4:	6820      	ldr	r0, [r4, #0]
 8006ab6:	1821      	adds	r1, r4, r0
 8006ab8:	428b      	cmp	r3, r1
 8006aba:	bf04      	itt	eq
 8006abc:	6819      	ldreq	r1, [r3, #0]
 8006abe:	685b      	ldreq	r3, [r3, #4]
 8006ac0:	6063      	str	r3, [r4, #4]
 8006ac2:	bf04      	itt	eq
 8006ac4:	1809      	addeq	r1, r1, r0
 8006ac6:	6021      	streq	r1, [r4, #0]
 8006ac8:	6054      	str	r4, [r2, #4]
 8006aca:	e7ca      	b.n	8006a62 <_free_r+0x22>
 8006acc:	bd38      	pop	{r3, r4, r5, pc}
 8006ace:	bf00      	nop
 8006ad0:	20000dc0 	.word	0x20000dc0

08006ad4 <malloc>:
 8006ad4:	4b02      	ldr	r3, [pc, #8]	@ (8006ae0 <malloc+0xc>)
 8006ad6:	4601      	mov	r1, r0
 8006ad8:	6818      	ldr	r0, [r3, #0]
 8006ada:	f000 b825 	b.w	8006b28 <_malloc_r>
 8006ade:	bf00      	nop
 8006ae0:	2000005c 	.word	0x2000005c

08006ae4 <sbrk_aligned>:
 8006ae4:	b570      	push	{r4, r5, r6, lr}
 8006ae6:	4e0f      	ldr	r6, [pc, #60]	@ (8006b24 <sbrk_aligned+0x40>)
 8006ae8:	460c      	mov	r4, r1
 8006aea:	6831      	ldr	r1, [r6, #0]
 8006aec:	4605      	mov	r5, r0
 8006aee:	b911      	cbnz	r1, 8006af6 <sbrk_aligned+0x12>
 8006af0:	f000 fccc 	bl	800748c <_sbrk_r>
 8006af4:	6030      	str	r0, [r6, #0]
 8006af6:	4621      	mov	r1, r4
 8006af8:	4628      	mov	r0, r5
 8006afa:	f000 fcc7 	bl	800748c <_sbrk_r>
 8006afe:	1c43      	adds	r3, r0, #1
 8006b00:	d103      	bne.n	8006b0a <sbrk_aligned+0x26>
 8006b02:	f04f 34ff 	mov.w	r4, #4294967295
 8006b06:	4620      	mov	r0, r4
 8006b08:	bd70      	pop	{r4, r5, r6, pc}
 8006b0a:	1cc4      	adds	r4, r0, #3
 8006b0c:	f024 0403 	bic.w	r4, r4, #3
 8006b10:	42a0      	cmp	r0, r4
 8006b12:	d0f8      	beq.n	8006b06 <sbrk_aligned+0x22>
 8006b14:	1a21      	subs	r1, r4, r0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fcb8 	bl	800748c <_sbrk_r>
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	d1f2      	bne.n	8006b06 <sbrk_aligned+0x22>
 8006b20:	e7ef      	b.n	8006b02 <sbrk_aligned+0x1e>
 8006b22:	bf00      	nop
 8006b24:	20000dbc 	.word	0x20000dbc

08006b28 <_malloc_r>:
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	1ccd      	adds	r5, r1, #3
 8006b2e:	f025 0503 	bic.w	r5, r5, #3
 8006b32:	3508      	adds	r5, #8
 8006b34:	2d0c      	cmp	r5, #12
 8006b36:	bf38      	it	cc
 8006b38:	250c      	movcc	r5, #12
 8006b3a:	2d00      	cmp	r5, #0
 8006b3c:	4606      	mov	r6, r0
 8006b3e:	db01      	blt.n	8006b44 <_malloc_r+0x1c>
 8006b40:	42a9      	cmp	r1, r5
 8006b42:	d904      	bls.n	8006b4e <_malloc_r+0x26>
 8006b44:	230c      	movs	r3, #12
 8006b46:	6033      	str	r3, [r6, #0]
 8006b48:	2000      	movs	r0, #0
 8006b4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c24 <_malloc_r+0xfc>
 8006b52:	f000 f869 	bl	8006c28 <__malloc_lock>
 8006b56:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5a:	461c      	mov	r4, r3
 8006b5c:	bb44      	cbnz	r4, 8006bb0 <_malloc_r+0x88>
 8006b5e:	4629      	mov	r1, r5
 8006b60:	4630      	mov	r0, r6
 8006b62:	f7ff ffbf 	bl	8006ae4 <sbrk_aligned>
 8006b66:	1c43      	adds	r3, r0, #1
 8006b68:	4604      	mov	r4, r0
 8006b6a:	d158      	bne.n	8006c1e <_malloc_r+0xf6>
 8006b6c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b70:	4627      	mov	r7, r4
 8006b72:	2f00      	cmp	r7, #0
 8006b74:	d143      	bne.n	8006bfe <_malloc_r+0xd6>
 8006b76:	2c00      	cmp	r4, #0
 8006b78:	d04b      	beq.n	8006c12 <_malloc_r+0xea>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	4639      	mov	r1, r7
 8006b7e:	4630      	mov	r0, r6
 8006b80:	eb04 0903 	add.w	r9, r4, r3
 8006b84:	f000 fc82 	bl	800748c <_sbrk_r>
 8006b88:	4581      	cmp	r9, r0
 8006b8a:	d142      	bne.n	8006c12 <_malloc_r+0xea>
 8006b8c:	6821      	ldr	r1, [r4, #0]
 8006b8e:	1a6d      	subs	r5, r5, r1
 8006b90:	4629      	mov	r1, r5
 8006b92:	4630      	mov	r0, r6
 8006b94:	f7ff ffa6 	bl	8006ae4 <sbrk_aligned>
 8006b98:	3001      	adds	r0, #1
 8006b9a:	d03a      	beq.n	8006c12 <_malloc_r+0xea>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	442b      	add	r3, r5
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	bb62      	cbnz	r2, 8006c04 <_malloc_r+0xdc>
 8006baa:	f8c8 7000 	str.w	r7, [r8]
 8006bae:	e00f      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bb0:	6822      	ldr	r2, [r4, #0]
 8006bb2:	1b52      	subs	r2, r2, r5
 8006bb4:	d420      	bmi.n	8006bf8 <_malloc_r+0xd0>
 8006bb6:	2a0b      	cmp	r2, #11
 8006bb8:	d917      	bls.n	8006bea <_malloc_r+0xc2>
 8006bba:	1961      	adds	r1, r4, r5
 8006bbc:	42a3      	cmp	r3, r4
 8006bbe:	6025      	str	r5, [r4, #0]
 8006bc0:	bf18      	it	ne
 8006bc2:	6059      	strne	r1, [r3, #4]
 8006bc4:	6863      	ldr	r3, [r4, #4]
 8006bc6:	bf08      	it	eq
 8006bc8:	f8c8 1000 	streq.w	r1, [r8]
 8006bcc:	5162      	str	r2, [r4, r5]
 8006bce:	604b      	str	r3, [r1, #4]
 8006bd0:	4630      	mov	r0, r6
 8006bd2:	f000 f82f 	bl	8006c34 <__malloc_unlock>
 8006bd6:	f104 000b 	add.w	r0, r4, #11
 8006bda:	1d23      	adds	r3, r4, #4
 8006bdc:	f020 0007 	bic.w	r0, r0, #7
 8006be0:	1ac2      	subs	r2, r0, r3
 8006be2:	bf1c      	itt	ne
 8006be4:	1a1b      	subne	r3, r3, r0
 8006be6:	50a3      	strne	r3, [r4, r2]
 8006be8:	e7af      	b.n	8006b4a <_malloc_r+0x22>
 8006bea:	6862      	ldr	r2, [r4, #4]
 8006bec:	42a3      	cmp	r3, r4
 8006bee:	bf0c      	ite	eq
 8006bf0:	f8c8 2000 	streq.w	r2, [r8]
 8006bf4:	605a      	strne	r2, [r3, #4]
 8006bf6:	e7eb      	b.n	8006bd0 <_malloc_r+0xa8>
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	6864      	ldr	r4, [r4, #4]
 8006bfc:	e7ae      	b.n	8006b5c <_malloc_r+0x34>
 8006bfe:	463c      	mov	r4, r7
 8006c00:	687f      	ldr	r7, [r7, #4]
 8006c02:	e7b6      	b.n	8006b72 <_malloc_r+0x4a>
 8006c04:	461a      	mov	r2, r3
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	42a3      	cmp	r3, r4
 8006c0a:	d1fb      	bne.n	8006c04 <_malloc_r+0xdc>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6053      	str	r3, [r2, #4]
 8006c10:	e7de      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c12:	230c      	movs	r3, #12
 8006c14:	6033      	str	r3, [r6, #0]
 8006c16:	4630      	mov	r0, r6
 8006c18:	f000 f80c 	bl	8006c34 <__malloc_unlock>
 8006c1c:	e794      	b.n	8006b48 <_malloc_r+0x20>
 8006c1e:	6005      	str	r5, [r0, #0]
 8006c20:	e7d6      	b.n	8006bd0 <_malloc_r+0xa8>
 8006c22:	bf00      	nop
 8006c24:	20000dc0 	.word	0x20000dc0

08006c28 <__malloc_lock>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__malloc_lock+0x8>)
 8006c2a:	f7ff b89e 	b.w	8005d6a <__retarget_lock_acquire_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000db8 	.word	0x20000db8

08006c34 <__malloc_unlock>:
 8006c34:	4801      	ldr	r0, [pc, #4]	@ (8006c3c <__malloc_unlock+0x8>)
 8006c36:	f7ff b899 	b.w	8005d6c <__retarget_lock_release_recursive>
 8006c3a:	bf00      	nop
 8006c3c:	20000db8 	.word	0x20000db8

08006c40 <_Balloc>:
 8006c40:	b570      	push	{r4, r5, r6, lr}
 8006c42:	69c6      	ldr	r6, [r0, #28]
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	b976      	cbnz	r6, 8006c68 <_Balloc+0x28>
 8006c4a:	2010      	movs	r0, #16
 8006c4c:	f7ff ff42 	bl	8006ad4 <malloc>
 8006c50:	4602      	mov	r2, r0
 8006c52:	61e0      	str	r0, [r4, #28]
 8006c54:	b920      	cbnz	r0, 8006c60 <_Balloc+0x20>
 8006c56:	4b18      	ldr	r3, [pc, #96]	@ (8006cb8 <_Balloc+0x78>)
 8006c58:	4818      	ldr	r0, [pc, #96]	@ (8006cbc <_Balloc+0x7c>)
 8006c5a:	216b      	movs	r1, #107	@ 0x6b
 8006c5c:	f000 fc26 	bl	80074ac <__assert_func>
 8006c60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c64:	6006      	str	r6, [r0, #0]
 8006c66:	60c6      	str	r6, [r0, #12]
 8006c68:	69e6      	ldr	r6, [r4, #28]
 8006c6a:	68f3      	ldr	r3, [r6, #12]
 8006c6c:	b183      	cbz	r3, 8006c90 <_Balloc+0x50>
 8006c6e:	69e3      	ldr	r3, [r4, #28]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c76:	b9b8      	cbnz	r0, 8006ca8 <_Balloc+0x68>
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f605 	lsl.w	r6, r1, r5
 8006c7e:	1d72      	adds	r2, r6, #5
 8006c80:	0092      	lsls	r2, r2, #2
 8006c82:	4620      	mov	r0, r4
 8006c84:	f000 fc30 	bl	80074e8 <_calloc_r>
 8006c88:	b160      	cbz	r0, 8006ca4 <_Balloc+0x64>
 8006c8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c8e:	e00e      	b.n	8006cae <_Balloc+0x6e>
 8006c90:	2221      	movs	r2, #33	@ 0x21
 8006c92:	2104      	movs	r1, #4
 8006c94:	4620      	mov	r0, r4
 8006c96:	f000 fc27 	bl	80074e8 <_calloc_r>
 8006c9a:	69e3      	ldr	r3, [r4, #28]
 8006c9c:	60f0      	str	r0, [r6, #12]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1e4      	bne.n	8006c6e <_Balloc+0x2e>
 8006ca4:	2000      	movs	r0, #0
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
 8006ca8:	6802      	ldr	r2, [r0, #0]
 8006caa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006cae:	2300      	movs	r3, #0
 8006cb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006cb4:	e7f7      	b.n	8006ca6 <_Balloc+0x66>
 8006cb6:	bf00      	nop
 8006cb8:	08007b39 	.word	0x08007b39
 8006cbc:	08007bb9 	.word	0x08007bb9

08006cc0 <_Bfree>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	69c6      	ldr	r6, [r0, #28]
 8006cc4:	4605      	mov	r5, r0
 8006cc6:	460c      	mov	r4, r1
 8006cc8:	b976      	cbnz	r6, 8006ce8 <_Bfree+0x28>
 8006cca:	2010      	movs	r0, #16
 8006ccc:	f7ff ff02 	bl	8006ad4 <malloc>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	61e8      	str	r0, [r5, #28]
 8006cd4:	b920      	cbnz	r0, 8006ce0 <_Bfree+0x20>
 8006cd6:	4b09      	ldr	r3, [pc, #36]	@ (8006cfc <_Bfree+0x3c>)
 8006cd8:	4809      	ldr	r0, [pc, #36]	@ (8006d00 <_Bfree+0x40>)
 8006cda:	218f      	movs	r1, #143	@ 0x8f
 8006cdc:	f000 fbe6 	bl	80074ac <__assert_func>
 8006ce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ce4:	6006      	str	r6, [r0, #0]
 8006ce6:	60c6      	str	r6, [r0, #12]
 8006ce8:	b13c      	cbz	r4, 8006cfa <_Bfree+0x3a>
 8006cea:	69eb      	ldr	r3, [r5, #28]
 8006cec:	6862      	ldr	r2, [r4, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cf4:	6021      	str	r1, [r4, #0]
 8006cf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	08007b39 	.word	0x08007b39
 8006d00:	08007bb9 	.word	0x08007bb9

08006d04 <__multadd>:
 8006d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d08:	690d      	ldr	r5, [r1, #16]
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	461e      	mov	r6, r3
 8006d10:	f101 0c14 	add.w	ip, r1, #20
 8006d14:	2000      	movs	r0, #0
 8006d16:	f8dc 3000 	ldr.w	r3, [ip]
 8006d1a:	b299      	uxth	r1, r3
 8006d1c:	fb02 6101 	mla	r1, r2, r1, r6
 8006d20:	0c1e      	lsrs	r6, r3, #16
 8006d22:	0c0b      	lsrs	r3, r1, #16
 8006d24:	fb02 3306 	mla	r3, r2, r6, r3
 8006d28:	b289      	uxth	r1, r1
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006d30:	4285      	cmp	r5, r0
 8006d32:	f84c 1b04 	str.w	r1, [ip], #4
 8006d36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006d3a:	dcec      	bgt.n	8006d16 <__multadd+0x12>
 8006d3c:	b30e      	cbz	r6, 8006d82 <__multadd+0x7e>
 8006d3e:	68a3      	ldr	r3, [r4, #8]
 8006d40:	42ab      	cmp	r3, r5
 8006d42:	dc19      	bgt.n	8006d78 <__multadd+0x74>
 8006d44:	6861      	ldr	r1, [r4, #4]
 8006d46:	4638      	mov	r0, r7
 8006d48:	3101      	adds	r1, #1
 8006d4a:	f7ff ff79 	bl	8006c40 <_Balloc>
 8006d4e:	4680      	mov	r8, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__multadd+0x5a>
 8006d52:	4602      	mov	r2, r0
 8006d54:	4b0c      	ldr	r3, [pc, #48]	@ (8006d88 <__multadd+0x84>)
 8006d56:	480d      	ldr	r0, [pc, #52]	@ (8006d8c <__multadd+0x88>)
 8006d58:	21ba      	movs	r1, #186	@ 0xba
 8006d5a:	f000 fba7 	bl	80074ac <__assert_func>
 8006d5e:	6922      	ldr	r2, [r4, #16]
 8006d60:	3202      	adds	r2, #2
 8006d62:	f104 010c 	add.w	r1, r4, #12
 8006d66:	0092      	lsls	r2, r2, #2
 8006d68:	300c      	adds	r0, #12
 8006d6a:	f7ff f800 	bl	8005d6e <memcpy>
 8006d6e:	4621      	mov	r1, r4
 8006d70:	4638      	mov	r0, r7
 8006d72:	f7ff ffa5 	bl	8006cc0 <_Bfree>
 8006d76:	4644      	mov	r4, r8
 8006d78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d7c:	3501      	adds	r5, #1
 8006d7e:	615e      	str	r6, [r3, #20]
 8006d80:	6125      	str	r5, [r4, #16]
 8006d82:	4620      	mov	r0, r4
 8006d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d88:	08007ba8 	.word	0x08007ba8
 8006d8c:	08007bb9 	.word	0x08007bb9

08006d90 <__hi0bits>:
 8006d90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006d94:	4603      	mov	r3, r0
 8006d96:	bf36      	itet	cc
 8006d98:	0403      	lslcc	r3, r0, #16
 8006d9a:	2000      	movcs	r0, #0
 8006d9c:	2010      	movcc	r0, #16
 8006d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006da2:	bf3c      	itt	cc
 8006da4:	021b      	lslcc	r3, r3, #8
 8006da6:	3008      	addcc	r0, #8
 8006da8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dac:	bf3c      	itt	cc
 8006dae:	011b      	lslcc	r3, r3, #4
 8006db0:	3004      	addcc	r0, #4
 8006db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006db6:	bf3c      	itt	cc
 8006db8:	009b      	lslcc	r3, r3, #2
 8006dba:	3002      	addcc	r0, #2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	db05      	blt.n	8006dcc <__hi0bits+0x3c>
 8006dc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006dc4:	f100 0001 	add.w	r0, r0, #1
 8006dc8:	bf08      	it	eq
 8006dca:	2020      	moveq	r0, #32
 8006dcc:	4770      	bx	lr

08006dce <__lo0bits>:
 8006dce:	6803      	ldr	r3, [r0, #0]
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	f013 0007 	ands.w	r0, r3, #7
 8006dd6:	d00b      	beq.n	8006df0 <__lo0bits+0x22>
 8006dd8:	07d9      	lsls	r1, r3, #31
 8006dda:	d421      	bmi.n	8006e20 <__lo0bits+0x52>
 8006ddc:	0798      	lsls	r0, r3, #30
 8006dde:	bf49      	itett	mi
 8006de0:	085b      	lsrmi	r3, r3, #1
 8006de2:	089b      	lsrpl	r3, r3, #2
 8006de4:	2001      	movmi	r0, #1
 8006de6:	6013      	strmi	r3, [r2, #0]
 8006de8:	bf5c      	itt	pl
 8006dea:	6013      	strpl	r3, [r2, #0]
 8006dec:	2002      	movpl	r0, #2
 8006dee:	4770      	bx	lr
 8006df0:	b299      	uxth	r1, r3
 8006df2:	b909      	cbnz	r1, 8006df8 <__lo0bits+0x2a>
 8006df4:	0c1b      	lsrs	r3, r3, #16
 8006df6:	2010      	movs	r0, #16
 8006df8:	b2d9      	uxtb	r1, r3
 8006dfa:	b909      	cbnz	r1, 8006e00 <__lo0bits+0x32>
 8006dfc:	3008      	adds	r0, #8
 8006dfe:	0a1b      	lsrs	r3, r3, #8
 8006e00:	0719      	lsls	r1, r3, #28
 8006e02:	bf04      	itt	eq
 8006e04:	091b      	lsreq	r3, r3, #4
 8006e06:	3004      	addeq	r0, #4
 8006e08:	0799      	lsls	r1, r3, #30
 8006e0a:	bf04      	itt	eq
 8006e0c:	089b      	lsreq	r3, r3, #2
 8006e0e:	3002      	addeq	r0, #2
 8006e10:	07d9      	lsls	r1, r3, #31
 8006e12:	d403      	bmi.n	8006e1c <__lo0bits+0x4e>
 8006e14:	085b      	lsrs	r3, r3, #1
 8006e16:	f100 0001 	add.w	r0, r0, #1
 8006e1a:	d003      	beq.n	8006e24 <__lo0bits+0x56>
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	4770      	bx	lr
 8006e20:	2000      	movs	r0, #0
 8006e22:	4770      	bx	lr
 8006e24:	2020      	movs	r0, #32
 8006e26:	4770      	bx	lr

08006e28 <__i2b>:
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	460c      	mov	r4, r1
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	f7ff ff07 	bl	8006c40 <_Balloc>
 8006e32:	4602      	mov	r2, r0
 8006e34:	b928      	cbnz	r0, 8006e42 <__i2b+0x1a>
 8006e36:	4b05      	ldr	r3, [pc, #20]	@ (8006e4c <__i2b+0x24>)
 8006e38:	4805      	ldr	r0, [pc, #20]	@ (8006e50 <__i2b+0x28>)
 8006e3a:	f240 1145 	movw	r1, #325	@ 0x145
 8006e3e:	f000 fb35 	bl	80074ac <__assert_func>
 8006e42:	2301      	movs	r3, #1
 8006e44:	6144      	str	r4, [r0, #20]
 8006e46:	6103      	str	r3, [r0, #16]
 8006e48:	bd10      	pop	{r4, pc}
 8006e4a:	bf00      	nop
 8006e4c:	08007ba8 	.word	0x08007ba8
 8006e50:	08007bb9 	.word	0x08007bb9

08006e54 <__multiply>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	4617      	mov	r7, r2
 8006e5a:	690a      	ldr	r2, [r1, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	bfa8      	it	ge
 8006e62:	463b      	movge	r3, r7
 8006e64:	4689      	mov	r9, r1
 8006e66:	bfa4      	itt	ge
 8006e68:	460f      	movge	r7, r1
 8006e6a:	4699      	movge	r9, r3
 8006e6c:	693d      	ldr	r5, [r7, #16]
 8006e6e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	eb05 060a 	add.w	r6, r5, sl
 8006e7a:	42b3      	cmp	r3, r6
 8006e7c:	b085      	sub	sp, #20
 8006e7e:	bfb8      	it	lt
 8006e80:	3101      	addlt	r1, #1
 8006e82:	f7ff fedd 	bl	8006c40 <_Balloc>
 8006e86:	b930      	cbnz	r0, 8006e96 <__multiply+0x42>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	4b41      	ldr	r3, [pc, #260]	@ (8006f90 <__multiply+0x13c>)
 8006e8c:	4841      	ldr	r0, [pc, #260]	@ (8006f94 <__multiply+0x140>)
 8006e8e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006e92:	f000 fb0b 	bl	80074ac <__assert_func>
 8006e96:	f100 0414 	add.w	r4, r0, #20
 8006e9a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006e9e:	4623      	mov	r3, r4
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4573      	cmp	r3, lr
 8006ea4:	d320      	bcc.n	8006ee8 <__multiply+0x94>
 8006ea6:	f107 0814 	add.w	r8, r7, #20
 8006eaa:	f109 0114 	add.w	r1, r9, #20
 8006eae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006eb2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006eb6:	9302      	str	r3, [sp, #8]
 8006eb8:	1beb      	subs	r3, r5, r7
 8006eba:	3b15      	subs	r3, #21
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	3304      	adds	r3, #4
 8006ec2:	3715      	adds	r7, #21
 8006ec4:	42bd      	cmp	r5, r7
 8006ec6:	bf38      	it	cc
 8006ec8:	2304      	movcc	r3, #4
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	9103      	str	r1, [sp, #12]
 8006ed0:	428b      	cmp	r3, r1
 8006ed2:	d80c      	bhi.n	8006eee <__multiply+0x9a>
 8006ed4:	2e00      	cmp	r6, #0
 8006ed6:	dd03      	ble.n	8006ee0 <__multiply+0x8c>
 8006ed8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d055      	beq.n	8006f8c <__multiply+0x138>
 8006ee0:	6106      	str	r6, [r0, #16]
 8006ee2:	b005      	add	sp, #20
 8006ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ee8:	f843 2b04 	str.w	r2, [r3], #4
 8006eec:	e7d9      	b.n	8006ea2 <__multiply+0x4e>
 8006eee:	f8b1 a000 	ldrh.w	sl, [r1]
 8006ef2:	f1ba 0f00 	cmp.w	sl, #0
 8006ef6:	d01f      	beq.n	8006f38 <__multiply+0xe4>
 8006ef8:	46c4      	mov	ip, r8
 8006efa:	46a1      	mov	r9, r4
 8006efc:	2700      	movs	r7, #0
 8006efe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006f02:	f8d9 3000 	ldr.w	r3, [r9]
 8006f06:	fa1f fb82 	uxth.w	fp, r2
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f10:	443b      	add	r3, r7
 8006f12:	f8d9 7000 	ldr.w	r7, [r9]
 8006f16:	0c12      	lsrs	r2, r2, #16
 8006f18:	0c3f      	lsrs	r7, r7, #16
 8006f1a:	fb0a 7202 	mla	r2, sl, r2, r7
 8006f1e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f28:	4565      	cmp	r5, ip
 8006f2a:	f849 3b04 	str.w	r3, [r9], #4
 8006f2e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006f32:	d8e4      	bhi.n	8006efe <__multiply+0xaa>
 8006f34:	9b01      	ldr	r3, [sp, #4]
 8006f36:	50e7      	str	r7, [r4, r3]
 8006f38:	9b03      	ldr	r3, [sp, #12]
 8006f3a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f3e:	3104      	adds	r1, #4
 8006f40:	f1b9 0f00 	cmp.w	r9, #0
 8006f44:	d020      	beq.n	8006f88 <__multiply+0x134>
 8006f46:	6823      	ldr	r3, [r4, #0]
 8006f48:	4647      	mov	r7, r8
 8006f4a:	46a4      	mov	ip, r4
 8006f4c:	f04f 0a00 	mov.w	sl, #0
 8006f50:	f8b7 b000 	ldrh.w	fp, [r7]
 8006f54:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006f58:	fb09 220b 	mla	r2, r9, fp, r2
 8006f5c:	4452      	add	r2, sl
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f64:	f84c 3b04 	str.w	r3, [ip], #4
 8006f68:	f857 3b04 	ldr.w	r3, [r7], #4
 8006f6c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f70:	f8bc 3000 	ldrh.w	r3, [ip]
 8006f74:	fb09 330a 	mla	r3, r9, sl, r3
 8006f78:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006f7c:	42bd      	cmp	r5, r7
 8006f7e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f82:	d8e5      	bhi.n	8006f50 <__multiply+0xfc>
 8006f84:	9a01      	ldr	r2, [sp, #4]
 8006f86:	50a3      	str	r3, [r4, r2]
 8006f88:	3404      	adds	r4, #4
 8006f8a:	e79f      	b.n	8006ecc <__multiply+0x78>
 8006f8c:	3e01      	subs	r6, #1
 8006f8e:	e7a1      	b.n	8006ed4 <__multiply+0x80>
 8006f90:	08007ba8 	.word	0x08007ba8
 8006f94:	08007bb9 	.word	0x08007bb9

08006f98 <__pow5mult>:
 8006f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f9c:	4615      	mov	r5, r2
 8006f9e:	f012 0203 	ands.w	r2, r2, #3
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	460e      	mov	r6, r1
 8006fa6:	d007      	beq.n	8006fb8 <__pow5mult+0x20>
 8006fa8:	4c25      	ldr	r4, [pc, #148]	@ (8007040 <__pow5mult+0xa8>)
 8006faa:	3a01      	subs	r2, #1
 8006fac:	2300      	movs	r3, #0
 8006fae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006fb2:	f7ff fea7 	bl	8006d04 <__multadd>
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	10ad      	asrs	r5, r5, #2
 8006fba:	d03d      	beq.n	8007038 <__pow5mult+0xa0>
 8006fbc:	69fc      	ldr	r4, [r7, #28]
 8006fbe:	b97c      	cbnz	r4, 8006fe0 <__pow5mult+0x48>
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f7ff fd87 	bl	8006ad4 <malloc>
 8006fc6:	4602      	mov	r2, r0
 8006fc8:	61f8      	str	r0, [r7, #28]
 8006fca:	b928      	cbnz	r0, 8006fd8 <__pow5mult+0x40>
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	@ (8007044 <__pow5mult+0xac>)
 8006fce:	481e      	ldr	r0, [pc, #120]	@ (8007048 <__pow5mult+0xb0>)
 8006fd0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006fd4:	f000 fa6a 	bl	80074ac <__assert_func>
 8006fd8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006fdc:	6004      	str	r4, [r0, #0]
 8006fde:	60c4      	str	r4, [r0, #12]
 8006fe0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006fe4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006fe8:	b94c      	cbnz	r4, 8006ffe <__pow5mult+0x66>
 8006fea:	f240 2171 	movw	r1, #625	@ 0x271
 8006fee:	4638      	mov	r0, r7
 8006ff0:	f7ff ff1a 	bl	8006e28 <__i2b>
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	6003      	str	r3, [r0, #0]
 8006ffe:	f04f 0900 	mov.w	r9, #0
 8007002:	07eb      	lsls	r3, r5, #31
 8007004:	d50a      	bpl.n	800701c <__pow5mult+0x84>
 8007006:	4631      	mov	r1, r6
 8007008:	4622      	mov	r2, r4
 800700a:	4638      	mov	r0, r7
 800700c:	f7ff ff22 	bl	8006e54 <__multiply>
 8007010:	4631      	mov	r1, r6
 8007012:	4680      	mov	r8, r0
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff fe53 	bl	8006cc0 <_Bfree>
 800701a:	4646      	mov	r6, r8
 800701c:	106d      	asrs	r5, r5, #1
 800701e:	d00b      	beq.n	8007038 <__pow5mult+0xa0>
 8007020:	6820      	ldr	r0, [r4, #0]
 8007022:	b938      	cbnz	r0, 8007034 <__pow5mult+0x9c>
 8007024:	4622      	mov	r2, r4
 8007026:	4621      	mov	r1, r4
 8007028:	4638      	mov	r0, r7
 800702a:	f7ff ff13 	bl	8006e54 <__multiply>
 800702e:	6020      	str	r0, [r4, #0]
 8007030:	f8c0 9000 	str.w	r9, [r0]
 8007034:	4604      	mov	r4, r0
 8007036:	e7e4      	b.n	8007002 <__pow5mult+0x6a>
 8007038:	4630      	mov	r0, r6
 800703a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800703e:	bf00      	nop
 8007040:	08007c6c 	.word	0x08007c6c
 8007044:	08007b39 	.word	0x08007b39
 8007048:	08007bb9 	.word	0x08007bb9

0800704c <__lshift>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	460c      	mov	r4, r1
 8007052:	6849      	ldr	r1, [r1, #4]
 8007054:	6923      	ldr	r3, [r4, #16]
 8007056:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800705a:	68a3      	ldr	r3, [r4, #8]
 800705c:	4607      	mov	r7, r0
 800705e:	4691      	mov	r9, r2
 8007060:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007064:	f108 0601 	add.w	r6, r8, #1
 8007068:	42b3      	cmp	r3, r6
 800706a:	db0b      	blt.n	8007084 <__lshift+0x38>
 800706c:	4638      	mov	r0, r7
 800706e:	f7ff fde7 	bl	8006c40 <_Balloc>
 8007072:	4605      	mov	r5, r0
 8007074:	b948      	cbnz	r0, 800708a <__lshift+0x3e>
 8007076:	4602      	mov	r2, r0
 8007078:	4b28      	ldr	r3, [pc, #160]	@ (800711c <__lshift+0xd0>)
 800707a:	4829      	ldr	r0, [pc, #164]	@ (8007120 <__lshift+0xd4>)
 800707c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007080:	f000 fa14 	bl	80074ac <__assert_func>
 8007084:	3101      	adds	r1, #1
 8007086:	005b      	lsls	r3, r3, #1
 8007088:	e7ee      	b.n	8007068 <__lshift+0x1c>
 800708a:	2300      	movs	r3, #0
 800708c:	f100 0114 	add.w	r1, r0, #20
 8007090:	f100 0210 	add.w	r2, r0, #16
 8007094:	4618      	mov	r0, r3
 8007096:	4553      	cmp	r3, sl
 8007098:	db33      	blt.n	8007102 <__lshift+0xb6>
 800709a:	6920      	ldr	r0, [r4, #16]
 800709c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070a0:	f104 0314 	add.w	r3, r4, #20
 80070a4:	f019 091f 	ands.w	r9, r9, #31
 80070a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80070ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80070b0:	d02b      	beq.n	800710a <__lshift+0xbe>
 80070b2:	f1c9 0e20 	rsb	lr, r9, #32
 80070b6:	468a      	mov	sl, r1
 80070b8:	2200      	movs	r2, #0
 80070ba:	6818      	ldr	r0, [r3, #0]
 80070bc:	fa00 f009 	lsl.w	r0, r0, r9
 80070c0:	4310      	orrs	r0, r2
 80070c2:	f84a 0b04 	str.w	r0, [sl], #4
 80070c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070ca:	459c      	cmp	ip, r3
 80070cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80070d0:	d8f3      	bhi.n	80070ba <__lshift+0x6e>
 80070d2:	ebac 0304 	sub.w	r3, ip, r4
 80070d6:	3b15      	subs	r3, #21
 80070d8:	f023 0303 	bic.w	r3, r3, #3
 80070dc:	3304      	adds	r3, #4
 80070de:	f104 0015 	add.w	r0, r4, #21
 80070e2:	4560      	cmp	r0, ip
 80070e4:	bf88      	it	hi
 80070e6:	2304      	movhi	r3, #4
 80070e8:	50ca      	str	r2, [r1, r3]
 80070ea:	b10a      	cbz	r2, 80070f0 <__lshift+0xa4>
 80070ec:	f108 0602 	add.w	r6, r8, #2
 80070f0:	3e01      	subs	r6, #1
 80070f2:	4638      	mov	r0, r7
 80070f4:	612e      	str	r6, [r5, #16]
 80070f6:	4621      	mov	r1, r4
 80070f8:	f7ff fde2 	bl	8006cc0 <_Bfree>
 80070fc:	4628      	mov	r0, r5
 80070fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007102:	f842 0f04 	str.w	r0, [r2, #4]!
 8007106:	3301      	adds	r3, #1
 8007108:	e7c5      	b.n	8007096 <__lshift+0x4a>
 800710a:	3904      	subs	r1, #4
 800710c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007110:	f841 2f04 	str.w	r2, [r1, #4]!
 8007114:	459c      	cmp	ip, r3
 8007116:	d8f9      	bhi.n	800710c <__lshift+0xc0>
 8007118:	e7ea      	b.n	80070f0 <__lshift+0xa4>
 800711a:	bf00      	nop
 800711c:	08007ba8 	.word	0x08007ba8
 8007120:	08007bb9 	.word	0x08007bb9

08007124 <__mcmp>:
 8007124:	690a      	ldr	r2, [r1, #16]
 8007126:	4603      	mov	r3, r0
 8007128:	6900      	ldr	r0, [r0, #16]
 800712a:	1a80      	subs	r0, r0, r2
 800712c:	b530      	push	{r4, r5, lr}
 800712e:	d10e      	bne.n	800714e <__mcmp+0x2a>
 8007130:	3314      	adds	r3, #20
 8007132:	3114      	adds	r1, #20
 8007134:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007138:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800713c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007140:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007144:	4295      	cmp	r5, r2
 8007146:	d003      	beq.n	8007150 <__mcmp+0x2c>
 8007148:	d205      	bcs.n	8007156 <__mcmp+0x32>
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	bd30      	pop	{r4, r5, pc}
 8007150:	42a3      	cmp	r3, r4
 8007152:	d3f3      	bcc.n	800713c <__mcmp+0x18>
 8007154:	e7fb      	b.n	800714e <__mcmp+0x2a>
 8007156:	2001      	movs	r0, #1
 8007158:	e7f9      	b.n	800714e <__mcmp+0x2a>
	...

0800715c <__mdiff>:
 800715c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007160:	4689      	mov	r9, r1
 8007162:	4606      	mov	r6, r0
 8007164:	4611      	mov	r1, r2
 8007166:	4648      	mov	r0, r9
 8007168:	4614      	mov	r4, r2
 800716a:	f7ff ffdb 	bl	8007124 <__mcmp>
 800716e:	1e05      	subs	r5, r0, #0
 8007170:	d112      	bne.n	8007198 <__mdiff+0x3c>
 8007172:	4629      	mov	r1, r5
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff fd63 	bl	8006c40 <_Balloc>
 800717a:	4602      	mov	r2, r0
 800717c:	b928      	cbnz	r0, 800718a <__mdiff+0x2e>
 800717e:	4b3f      	ldr	r3, [pc, #252]	@ (800727c <__mdiff+0x120>)
 8007180:	f240 2137 	movw	r1, #567	@ 0x237
 8007184:	483e      	ldr	r0, [pc, #248]	@ (8007280 <__mdiff+0x124>)
 8007186:	f000 f991 	bl	80074ac <__assert_func>
 800718a:	2301      	movs	r3, #1
 800718c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007190:	4610      	mov	r0, r2
 8007192:	b003      	add	sp, #12
 8007194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007198:	bfbc      	itt	lt
 800719a:	464b      	movlt	r3, r9
 800719c:	46a1      	movlt	r9, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80071a4:	bfba      	itte	lt
 80071a6:	461c      	movlt	r4, r3
 80071a8:	2501      	movlt	r5, #1
 80071aa:	2500      	movge	r5, #0
 80071ac:	f7ff fd48 	bl	8006c40 <_Balloc>
 80071b0:	4602      	mov	r2, r0
 80071b2:	b918      	cbnz	r0, 80071bc <__mdiff+0x60>
 80071b4:	4b31      	ldr	r3, [pc, #196]	@ (800727c <__mdiff+0x120>)
 80071b6:	f240 2145 	movw	r1, #581	@ 0x245
 80071ba:	e7e3      	b.n	8007184 <__mdiff+0x28>
 80071bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80071c0:	6926      	ldr	r6, [r4, #16]
 80071c2:	60c5      	str	r5, [r0, #12]
 80071c4:	f109 0310 	add.w	r3, r9, #16
 80071c8:	f109 0514 	add.w	r5, r9, #20
 80071cc:	f104 0e14 	add.w	lr, r4, #20
 80071d0:	f100 0b14 	add.w	fp, r0, #20
 80071d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80071d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	46d9      	mov	r9, fp
 80071e0:	f04f 0c00 	mov.w	ip, #0
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80071ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80071ee:	9301      	str	r3, [sp, #4]
 80071f0:	fa1f f38a 	uxth.w	r3, sl
 80071f4:	4619      	mov	r1, r3
 80071f6:	b283      	uxth	r3, r0
 80071f8:	1acb      	subs	r3, r1, r3
 80071fa:	0c00      	lsrs	r0, r0, #16
 80071fc:	4463      	add	r3, ip
 80071fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007202:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007206:	b29b      	uxth	r3, r3
 8007208:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800720c:	4576      	cmp	r6, lr
 800720e:	f849 3b04 	str.w	r3, [r9], #4
 8007212:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007216:	d8e5      	bhi.n	80071e4 <__mdiff+0x88>
 8007218:	1b33      	subs	r3, r6, r4
 800721a:	3b15      	subs	r3, #21
 800721c:	f023 0303 	bic.w	r3, r3, #3
 8007220:	3415      	adds	r4, #21
 8007222:	3304      	adds	r3, #4
 8007224:	42a6      	cmp	r6, r4
 8007226:	bf38      	it	cc
 8007228:	2304      	movcc	r3, #4
 800722a:	441d      	add	r5, r3
 800722c:	445b      	add	r3, fp
 800722e:	461e      	mov	r6, r3
 8007230:	462c      	mov	r4, r5
 8007232:	4544      	cmp	r4, r8
 8007234:	d30e      	bcc.n	8007254 <__mdiff+0xf8>
 8007236:	f108 0103 	add.w	r1, r8, #3
 800723a:	1b49      	subs	r1, r1, r5
 800723c:	f021 0103 	bic.w	r1, r1, #3
 8007240:	3d03      	subs	r5, #3
 8007242:	45a8      	cmp	r8, r5
 8007244:	bf38      	it	cc
 8007246:	2100      	movcc	r1, #0
 8007248:	440b      	add	r3, r1
 800724a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800724e:	b191      	cbz	r1, 8007276 <__mdiff+0x11a>
 8007250:	6117      	str	r7, [r2, #16]
 8007252:	e79d      	b.n	8007190 <__mdiff+0x34>
 8007254:	f854 1b04 	ldr.w	r1, [r4], #4
 8007258:	46e6      	mov	lr, ip
 800725a:	0c08      	lsrs	r0, r1, #16
 800725c:	fa1c fc81 	uxtah	ip, ip, r1
 8007260:	4471      	add	r1, lr
 8007262:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007266:	b289      	uxth	r1, r1
 8007268:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800726c:	f846 1b04 	str.w	r1, [r6], #4
 8007270:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007274:	e7dd      	b.n	8007232 <__mdiff+0xd6>
 8007276:	3f01      	subs	r7, #1
 8007278:	e7e7      	b.n	800724a <__mdiff+0xee>
 800727a:	bf00      	nop
 800727c:	08007ba8 	.word	0x08007ba8
 8007280:	08007bb9 	.word	0x08007bb9

08007284 <__d2b>:
 8007284:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007288:	460f      	mov	r7, r1
 800728a:	2101      	movs	r1, #1
 800728c:	ec59 8b10 	vmov	r8, r9, d0
 8007290:	4616      	mov	r6, r2
 8007292:	f7ff fcd5 	bl	8006c40 <_Balloc>
 8007296:	4604      	mov	r4, r0
 8007298:	b930      	cbnz	r0, 80072a8 <__d2b+0x24>
 800729a:	4602      	mov	r2, r0
 800729c:	4b23      	ldr	r3, [pc, #140]	@ (800732c <__d2b+0xa8>)
 800729e:	4824      	ldr	r0, [pc, #144]	@ (8007330 <__d2b+0xac>)
 80072a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80072a4:	f000 f902 	bl	80074ac <__assert_func>
 80072a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072b0:	b10d      	cbz	r5, 80072b6 <__d2b+0x32>
 80072b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072b6:	9301      	str	r3, [sp, #4]
 80072b8:	f1b8 0300 	subs.w	r3, r8, #0
 80072bc:	d023      	beq.n	8007306 <__d2b+0x82>
 80072be:	4668      	mov	r0, sp
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	f7ff fd84 	bl	8006dce <__lo0bits>
 80072c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072ca:	b1d0      	cbz	r0, 8007302 <__d2b+0x7e>
 80072cc:	f1c0 0320 	rsb	r3, r0, #32
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	430b      	orrs	r3, r1
 80072d6:	40c2      	lsrs	r2, r0
 80072d8:	6163      	str	r3, [r4, #20]
 80072da:	9201      	str	r2, [sp, #4]
 80072dc:	9b01      	ldr	r3, [sp, #4]
 80072de:	61a3      	str	r3, [r4, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	bf0c      	ite	eq
 80072e4:	2201      	moveq	r2, #1
 80072e6:	2202      	movne	r2, #2
 80072e8:	6122      	str	r2, [r4, #16]
 80072ea:	b1a5      	cbz	r5, 8007316 <__d2b+0x92>
 80072ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072f0:	4405      	add	r5, r0
 80072f2:	603d      	str	r5, [r7, #0]
 80072f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072f8:	6030      	str	r0, [r6, #0]
 80072fa:	4620      	mov	r0, r4
 80072fc:	b003      	add	sp, #12
 80072fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007302:	6161      	str	r1, [r4, #20]
 8007304:	e7ea      	b.n	80072dc <__d2b+0x58>
 8007306:	a801      	add	r0, sp, #4
 8007308:	f7ff fd61 	bl	8006dce <__lo0bits>
 800730c:	9b01      	ldr	r3, [sp, #4]
 800730e:	6163      	str	r3, [r4, #20]
 8007310:	3020      	adds	r0, #32
 8007312:	2201      	movs	r2, #1
 8007314:	e7e8      	b.n	80072e8 <__d2b+0x64>
 8007316:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800731a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800731e:	6038      	str	r0, [r7, #0]
 8007320:	6918      	ldr	r0, [r3, #16]
 8007322:	f7ff fd35 	bl	8006d90 <__hi0bits>
 8007326:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800732a:	e7e5      	b.n	80072f8 <__d2b+0x74>
 800732c:	08007ba8 	.word	0x08007ba8
 8007330:	08007bb9 	.word	0x08007bb9

08007334 <__sflush_r>:
 8007334:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800733c:	0716      	lsls	r6, r2, #28
 800733e:	4605      	mov	r5, r0
 8007340:	460c      	mov	r4, r1
 8007342:	d454      	bmi.n	80073ee <__sflush_r+0xba>
 8007344:	684b      	ldr	r3, [r1, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	dc02      	bgt.n	8007350 <__sflush_r+0x1c>
 800734a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	dd48      	ble.n	80073e2 <__sflush_r+0xae>
 8007350:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007352:	2e00      	cmp	r6, #0
 8007354:	d045      	beq.n	80073e2 <__sflush_r+0xae>
 8007356:	2300      	movs	r3, #0
 8007358:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800735c:	682f      	ldr	r7, [r5, #0]
 800735e:	6a21      	ldr	r1, [r4, #32]
 8007360:	602b      	str	r3, [r5, #0]
 8007362:	d030      	beq.n	80073c6 <__sflush_r+0x92>
 8007364:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	0759      	lsls	r1, r3, #29
 800736a:	d505      	bpl.n	8007378 <__sflush_r+0x44>
 800736c:	6863      	ldr	r3, [r4, #4]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007372:	b10b      	cbz	r3, 8007378 <__sflush_r+0x44>
 8007374:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007376:	1ad2      	subs	r2, r2, r3
 8007378:	2300      	movs	r3, #0
 800737a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800737c:	6a21      	ldr	r1, [r4, #32]
 800737e:	4628      	mov	r0, r5
 8007380:	47b0      	blx	r6
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	d106      	bne.n	8007396 <__sflush_r+0x62>
 8007388:	6829      	ldr	r1, [r5, #0]
 800738a:	291d      	cmp	r1, #29
 800738c:	d82b      	bhi.n	80073e6 <__sflush_r+0xb2>
 800738e:	4a2a      	ldr	r2, [pc, #168]	@ (8007438 <__sflush_r+0x104>)
 8007390:	40ca      	lsrs	r2, r1
 8007392:	07d6      	lsls	r6, r2, #31
 8007394:	d527      	bpl.n	80073e6 <__sflush_r+0xb2>
 8007396:	2200      	movs	r2, #0
 8007398:	6062      	str	r2, [r4, #4]
 800739a:	04d9      	lsls	r1, r3, #19
 800739c:	6922      	ldr	r2, [r4, #16]
 800739e:	6022      	str	r2, [r4, #0]
 80073a0:	d504      	bpl.n	80073ac <__sflush_r+0x78>
 80073a2:	1c42      	adds	r2, r0, #1
 80073a4:	d101      	bne.n	80073aa <__sflush_r+0x76>
 80073a6:	682b      	ldr	r3, [r5, #0]
 80073a8:	b903      	cbnz	r3, 80073ac <__sflush_r+0x78>
 80073aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80073ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80073ae:	602f      	str	r7, [r5, #0]
 80073b0:	b1b9      	cbz	r1, 80073e2 <__sflush_r+0xae>
 80073b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80073b6:	4299      	cmp	r1, r3
 80073b8:	d002      	beq.n	80073c0 <__sflush_r+0x8c>
 80073ba:	4628      	mov	r0, r5
 80073bc:	f7ff fb40 	bl	8006a40 <_free_r>
 80073c0:	2300      	movs	r3, #0
 80073c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80073c4:	e00d      	b.n	80073e2 <__sflush_r+0xae>
 80073c6:	2301      	movs	r3, #1
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b0      	blx	r6
 80073cc:	4602      	mov	r2, r0
 80073ce:	1c50      	adds	r0, r2, #1
 80073d0:	d1c9      	bne.n	8007366 <__sflush_r+0x32>
 80073d2:	682b      	ldr	r3, [r5, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d0c6      	beq.n	8007366 <__sflush_r+0x32>
 80073d8:	2b1d      	cmp	r3, #29
 80073da:	d001      	beq.n	80073e0 <__sflush_r+0xac>
 80073dc:	2b16      	cmp	r3, #22
 80073de:	d11e      	bne.n	800741e <__sflush_r+0xea>
 80073e0:	602f      	str	r7, [r5, #0]
 80073e2:	2000      	movs	r0, #0
 80073e4:	e022      	b.n	800742c <__sflush_r+0xf8>
 80073e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073ea:	b21b      	sxth	r3, r3
 80073ec:	e01b      	b.n	8007426 <__sflush_r+0xf2>
 80073ee:	690f      	ldr	r7, [r1, #16]
 80073f0:	2f00      	cmp	r7, #0
 80073f2:	d0f6      	beq.n	80073e2 <__sflush_r+0xae>
 80073f4:	0793      	lsls	r3, r2, #30
 80073f6:	680e      	ldr	r6, [r1, #0]
 80073f8:	bf08      	it	eq
 80073fa:	694b      	ldreq	r3, [r1, #20]
 80073fc:	600f      	str	r7, [r1, #0]
 80073fe:	bf18      	it	ne
 8007400:	2300      	movne	r3, #0
 8007402:	eba6 0807 	sub.w	r8, r6, r7
 8007406:	608b      	str	r3, [r1, #8]
 8007408:	f1b8 0f00 	cmp.w	r8, #0
 800740c:	dde9      	ble.n	80073e2 <__sflush_r+0xae>
 800740e:	6a21      	ldr	r1, [r4, #32]
 8007410:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007412:	4643      	mov	r3, r8
 8007414:	463a      	mov	r2, r7
 8007416:	4628      	mov	r0, r5
 8007418:	47b0      	blx	r6
 800741a:	2800      	cmp	r0, #0
 800741c:	dc08      	bgt.n	8007430 <__sflush_r+0xfc>
 800741e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007422:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007426:	81a3      	strh	r3, [r4, #12]
 8007428:	f04f 30ff 	mov.w	r0, #4294967295
 800742c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007430:	4407      	add	r7, r0
 8007432:	eba8 0800 	sub.w	r8, r8, r0
 8007436:	e7e7      	b.n	8007408 <__sflush_r+0xd4>
 8007438:	20400001 	.word	0x20400001

0800743c <_fflush_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	690b      	ldr	r3, [r1, #16]
 8007440:	4605      	mov	r5, r0
 8007442:	460c      	mov	r4, r1
 8007444:	b913      	cbnz	r3, 800744c <_fflush_r+0x10>
 8007446:	2500      	movs	r5, #0
 8007448:	4628      	mov	r0, r5
 800744a:	bd38      	pop	{r3, r4, r5, pc}
 800744c:	b118      	cbz	r0, 8007456 <_fflush_r+0x1a>
 800744e:	6a03      	ldr	r3, [r0, #32]
 8007450:	b90b      	cbnz	r3, 8007456 <_fflush_r+0x1a>
 8007452:	f7fe fb93 	bl	8005b7c <__sinit>
 8007456:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f3      	beq.n	8007446 <_fflush_r+0xa>
 800745e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007460:	07d0      	lsls	r0, r2, #31
 8007462:	d404      	bmi.n	800746e <_fflush_r+0x32>
 8007464:	0599      	lsls	r1, r3, #22
 8007466:	d402      	bmi.n	800746e <_fflush_r+0x32>
 8007468:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800746a:	f7fe fc7e 	bl	8005d6a <__retarget_lock_acquire_recursive>
 800746e:	4628      	mov	r0, r5
 8007470:	4621      	mov	r1, r4
 8007472:	f7ff ff5f 	bl	8007334 <__sflush_r>
 8007476:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007478:	07da      	lsls	r2, r3, #31
 800747a:	4605      	mov	r5, r0
 800747c:	d4e4      	bmi.n	8007448 <_fflush_r+0xc>
 800747e:	89a3      	ldrh	r3, [r4, #12]
 8007480:	059b      	lsls	r3, r3, #22
 8007482:	d4e1      	bmi.n	8007448 <_fflush_r+0xc>
 8007484:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007486:	f7fe fc71 	bl	8005d6c <__retarget_lock_release_recursive>
 800748a:	e7dd      	b.n	8007448 <_fflush_r+0xc>

0800748c <_sbrk_r>:
 800748c:	b538      	push	{r3, r4, r5, lr}
 800748e:	4d06      	ldr	r5, [pc, #24]	@ (80074a8 <_sbrk_r+0x1c>)
 8007490:	2300      	movs	r3, #0
 8007492:	4604      	mov	r4, r0
 8007494:	4608      	mov	r0, r1
 8007496:	602b      	str	r3, [r5, #0]
 8007498:	f7fa fd2a 	bl	8001ef0 <_sbrk>
 800749c:	1c43      	adds	r3, r0, #1
 800749e:	d102      	bne.n	80074a6 <_sbrk_r+0x1a>
 80074a0:	682b      	ldr	r3, [r5, #0]
 80074a2:	b103      	cbz	r3, 80074a6 <_sbrk_r+0x1a>
 80074a4:	6023      	str	r3, [r4, #0]
 80074a6:	bd38      	pop	{r3, r4, r5, pc}
 80074a8:	20000db4 	.word	0x20000db4

080074ac <__assert_func>:
 80074ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ae:	4614      	mov	r4, r2
 80074b0:	461a      	mov	r2, r3
 80074b2:	4b09      	ldr	r3, [pc, #36]	@ (80074d8 <__assert_func+0x2c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4605      	mov	r5, r0
 80074b8:	68d8      	ldr	r0, [r3, #12]
 80074ba:	b14c      	cbz	r4, 80074d0 <__assert_func+0x24>
 80074bc:	4b07      	ldr	r3, [pc, #28]	@ (80074dc <__assert_func+0x30>)
 80074be:	9100      	str	r1, [sp, #0]
 80074c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80074c4:	4906      	ldr	r1, [pc, #24]	@ (80074e0 <__assert_func+0x34>)
 80074c6:	462b      	mov	r3, r5
 80074c8:	f000 f842 	bl	8007550 <fiprintf>
 80074cc:	f000 f852 	bl	8007574 <abort>
 80074d0:	4b04      	ldr	r3, [pc, #16]	@ (80074e4 <__assert_func+0x38>)
 80074d2:	461c      	mov	r4, r3
 80074d4:	e7f3      	b.n	80074be <__assert_func+0x12>
 80074d6:	bf00      	nop
 80074d8:	2000005c 	.word	0x2000005c
 80074dc:	08007c1c 	.word	0x08007c1c
 80074e0:	08007c29 	.word	0x08007c29
 80074e4:	08007c57 	.word	0x08007c57

080074e8 <_calloc_r>:
 80074e8:	b570      	push	{r4, r5, r6, lr}
 80074ea:	fba1 5402 	umull	r5, r4, r1, r2
 80074ee:	b934      	cbnz	r4, 80074fe <_calloc_r+0x16>
 80074f0:	4629      	mov	r1, r5
 80074f2:	f7ff fb19 	bl	8006b28 <_malloc_r>
 80074f6:	4606      	mov	r6, r0
 80074f8:	b928      	cbnz	r0, 8007506 <_calloc_r+0x1e>
 80074fa:	4630      	mov	r0, r6
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	220c      	movs	r2, #12
 8007500:	6002      	str	r2, [r0, #0]
 8007502:	2600      	movs	r6, #0
 8007504:	e7f9      	b.n	80074fa <_calloc_r+0x12>
 8007506:	462a      	mov	r2, r5
 8007508:	4621      	mov	r1, r4
 800750a:	f7fe fbb0 	bl	8005c6e <memset>
 800750e:	e7f4      	b.n	80074fa <_calloc_r+0x12>

08007510 <__ascii_mbtowc>:
 8007510:	b082      	sub	sp, #8
 8007512:	b901      	cbnz	r1, 8007516 <__ascii_mbtowc+0x6>
 8007514:	a901      	add	r1, sp, #4
 8007516:	b142      	cbz	r2, 800752a <__ascii_mbtowc+0x1a>
 8007518:	b14b      	cbz	r3, 800752e <__ascii_mbtowc+0x1e>
 800751a:	7813      	ldrb	r3, [r2, #0]
 800751c:	600b      	str	r3, [r1, #0]
 800751e:	7812      	ldrb	r2, [r2, #0]
 8007520:	1e10      	subs	r0, r2, #0
 8007522:	bf18      	it	ne
 8007524:	2001      	movne	r0, #1
 8007526:	b002      	add	sp, #8
 8007528:	4770      	bx	lr
 800752a:	4610      	mov	r0, r2
 800752c:	e7fb      	b.n	8007526 <__ascii_mbtowc+0x16>
 800752e:	f06f 0001 	mvn.w	r0, #1
 8007532:	e7f8      	b.n	8007526 <__ascii_mbtowc+0x16>

08007534 <__ascii_wctomb>:
 8007534:	4603      	mov	r3, r0
 8007536:	4608      	mov	r0, r1
 8007538:	b141      	cbz	r1, 800754c <__ascii_wctomb+0x18>
 800753a:	2aff      	cmp	r2, #255	@ 0xff
 800753c:	d904      	bls.n	8007548 <__ascii_wctomb+0x14>
 800753e:	228a      	movs	r2, #138	@ 0x8a
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	f04f 30ff 	mov.w	r0, #4294967295
 8007546:	4770      	bx	lr
 8007548:	700a      	strb	r2, [r1, #0]
 800754a:	2001      	movs	r0, #1
 800754c:	4770      	bx	lr
	...

08007550 <fiprintf>:
 8007550:	b40e      	push	{r1, r2, r3}
 8007552:	b503      	push	{r0, r1, lr}
 8007554:	4601      	mov	r1, r0
 8007556:	ab03      	add	r3, sp, #12
 8007558:	4805      	ldr	r0, [pc, #20]	@ (8007570 <fiprintf+0x20>)
 800755a:	f853 2b04 	ldr.w	r2, [r3], #4
 800755e:	6800      	ldr	r0, [r0, #0]
 8007560:	9301      	str	r3, [sp, #4]
 8007562:	f000 f837 	bl	80075d4 <_vfiprintf_r>
 8007566:	b002      	add	sp, #8
 8007568:	f85d eb04 	ldr.w	lr, [sp], #4
 800756c:	b003      	add	sp, #12
 800756e:	4770      	bx	lr
 8007570:	2000005c 	.word	0x2000005c

08007574 <abort>:
 8007574:	b508      	push	{r3, lr}
 8007576:	2006      	movs	r0, #6
 8007578:	f000 fa00 	bl	800797c <raise>
 800757c:	2001      	movs	r0, #1
 800757e:	f7fa fc87 	bl	8001e90 <_exit>

08007582 <__sfputc_r>:
 8007582:	6893      	ldr	r3, [r2, #8]
 8007584:	3b01      	subs	r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	b410      	push	{r4}
 800758a:	6093      	str	r3, [r2, #8]
 800758c:	da08      	bge.n	80075a0 <__sfputc_r+0x1e>
 800758e:	6994      	ldr	r4, [r2, #24]
 8007590:	42a3      	cmp	r3, r4
 8007592:	db01      	blt.n	8007598 <__sfputc_r+0x16>
 8007594:	290a      	cmp	r1, #10
 8007596:	d103      	bne.n	80075a0 <__sfputc_r+0x1e>
 8007598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800759c:	f000 b932 	b.w	8007804 <__swbuf_r>
 80075a0:	6813      	ldr	r3, [r2, #0]
 80075a2:	1c58      	adds	r0, r3, #1
 80075a4:	6010      	str	r0, [r2, #0]
 80075a6:	7019      	strb	r1, [r3, #0]
 80075a8:	4608      	mov	r0, r1
 80075aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <__sfputs_r>:
 80075b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b2:	4606      	mov	r6, r0
 80075b4:	460f      	mov	r7, r1
 80075b6:	4614      	mov	r4, r2
 80075b8:	18d5      	adds	r5, r2, r3
 80075ba:	42ac      	cmp	r4, r5
 80075bc:	d101      	bne.n	80075c2 <__sfputs_r+0x12>
 80075be:	2000      	movs	r0, #0
 80075c0:	e007      	b.n	80075d2 <__sfputs_r+0x22>
 80075c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075c6:	463a      	mov	r2, r7
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffda 	bl	8007582 <__sfputc_r>
 80075ce:	1c43      	adds	r3, r0, #1
 80075d0:	d1f3      	bne.n	80075ba <__sfputs_r+0xa>
 80075d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080075d4 <_vfiprintf_r>:
 80075d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	460d      	mov	r5, r1
 80075da:	b09d      	sub	sp, #116	@ 0x74
 80075dc:	4614      	mov	r4, r2
 80075de:	4698      	mov	r8, r3
 80075e0:	4606      	mov	r6, r0
 80075e2:	b118      	cbz	r0, 80075ec <_vfiprintf_r+0x18>
 80075e4:	6a03      	ldr	r3, [r0, #32]
 80075e6:	b90b      	cbnz	r3, 80075ec <_vfiprintf_r+0x18>
 80075e8:	f7fe fac8 	bl	8005b7c <__sinit>
 80075ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x2a>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x2a>
 80075f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075fa:	f7fe fbb6 	bl	8005d6a <__retarget_lock_acquire_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	071b      	lsls	r3, r3, #28
 8007602:	d501      	bpl.n	8007608 <_vfiprintf_r+0x34>
 8007604:	692b      	ldr	r3, [r5, #16]
 8007606:	b99b      	cbnz	r3, 8007630 <_vfiprintf_r+0x5c>
 8007608:	4629      	mov	r1, r5
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f938 	bl	8007880 <__swsetup_r>
 8007610:	b170      	cbz	r0, 8007630 <_vfiprintf_r+0x5c>
 8007612:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007614:	07dc      	lsls	r4, r3, #31
 8007616:	d504      	bpl.n	8007622 <_vfiprintf_r+0x4e>
 8007618:	f04f 30ff 	mov.w	r0, #4294967295
 800761c:	b01d      	add	sp, #116	@ 0x74
 800761e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	0598      	lsls	r0, r3, #22
 8007626:	d4f7      	bmi.n	8007618 <_vfiprintf_r+0x44>
 8007628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800762a:	f7fe fb9f 	bl	8005d6c <__retarget_lock_release_recursive>
 800762e:	e7f3      	b.n	8007618 <_vfiprintf_r+0x44>
 8007630:	2300      	movs	r3, #0
 8007632:	9309      	str	r3, [sp, #36]	@ 0x24
 8007634:	2320      	movs	r3, #32
 8007636:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800763a:	f8cd 800c 	str.w	r8, [sp, #12]
 800763e:	2330      	movs	r3, #48	@ 0x30
 8007640:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80077f0 <_vfiprintf_r+0x21c>
 8007644:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007648:	f04f 0901 	mov.w	r9, #1
 800764c:	4623      	mov	r3, r4
 800764e:	469a      	mov	sl, r3
 8007650:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007654:	b10a      	cbz	r2, 800765a <_vfiprintf_r+0x86>
 8007656:	2a25      	cmp	r2, #37	@ 0x25
 8007658:	d1f9      	bne.n	800764e <_vfiprintf_r+0x7a>
 800765a:	ebba 0b04 	subs.w	fp, sl, r4
 800765e:	d00b      	beq.n	8007678 <_vfiprintf_r+0xa4>
 8007660:	465b      	mov	r3, fp
 8007662:	4622      	mov	r2, r4
 8007664:	4629      	mov	r1, r5
 8007666:	4630      	mov	r0, r6
 8007668:	f7ff ffa2 	bl	80075b0 <__sfputs_r>
 800766c:	3001      	adds	r0, #1
 800766e:	f000 80a7 	beq.w	80077c0 <_vfiprintf_r+0x1ec>
 8007672:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007674:	445a      	add	r2, fp
 8007676:	9209      	str	r2, [sp, #36]	@ 0x24
 8007678:	f89a 3000 	ldrb.w	r3, [sl]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 809f 	beq.w	80077c0 <_vfiprintf_r+0x1ec>
 8007682:	2300      	movs	r3, #0
 8007684:	f04f 32ff 	mov.w	r2, #4294967295
 8007688:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800768c:	f10a 0a01 	add.w	sl, sl, #1
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	9307      	str	r3, [sp, #28]
 8007694:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007698:	931a      	str	r3, [sp, #104]	@ 0x68
 800769a:	4654      	mov	r4, sl
 800769c:	2205      	movs	r2, #5
 800769e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076a2:	4853      	ldr	r0, [pc, #332]	@ (80077f0 <_vfiprintf_r+0x21c>)
 80076a4:	f7f8 fdb4 	bl	8000210 <memchr>
 80076a8:	9a04      	ldr	r2, [sp, #16]
 80076aa:	b9d8      	cbnz	r0, 80076e4 <_vfiprintf_r+0x110>
 80076ac:	06d1      	lsls	r1, r2, #27
 80076ae:	bf44      	itt	mi
 80076b0:	2320      	movmi	r3, #32
 80076b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076b6:	0713      	lsls	r3, r2, #28
 80076b8:	bf44      	itt	mi
 80076ba:	232b      	movmi	r3, #43	@ 0x2b
 80076bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076c0:	f89a 3000 	ldrb.w	r3, [sl]
 80076c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80076c6:	d015      	beq.n	80076f4 <_vfiprintf_r+0x120>
 80076c8:	9a07      	ldr	r2, [sp, #28]
 80076ca:	4654      	mov	r4, sl
 80076cc:	2000      	movs	r0, #0
 80076ce:	f04f 0c0a 	mov.w	ip, #10
 80076d2:	4621      	mov	r1, r4
 80076d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076d8:	3b30      	subs	r3, #48	@ 0x30
 80076da:	2b09      	cmp	r3, #9
 80076dc:	d94b      	bls.n	8007776 <_vfiprintf_r+0x1a2>
 80076de:	b1b0      	cbz	r0, 800770e <_vfiprintf_r+0x13a>
 80076e0:	9207      	str	r2, [sp, #28]
 80076e2:	e014      	b.n	800770e <_vfiprintf_r+0x13a>
 80076e4:	eba0 0308 	sub.w	r3, r0, r8
 80076e8:	fa09 f303 	lsl.w	r3, r9, r3
 80076ec:	4313      	orrs	r3, r2
 80076ee:	9304      	str	r3, [sp, #16]
 80076f0:	46a2      	mov	sl, r4
 80076f2:	e7d2      	b.n	800769a <_vfiprintf_r+0xc6>
 80076f4:	9b03      	ldr	r3, [sp, #12]
 80076f6:	1d19      	adds	r1, r3, #4
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	9103      	str	r1, [sp, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bfbb      	ittet	lt
 8007700:	425b      	neglt	r3, r3
 8007702:	f042 0202 	orrlt.w	r2, r2, #2
 8007706:	9307      	strge	r3, [sp, #28]
 8007708:	9307      	strlt	r3, [sp, #28]
 800770a:	bfb8      	it	lt
 800770c:	9204      	strlt	r2, [sp, #16]
 800770e:	7823      	ldrb	r3, [r4, #0]
 8007710:	2b2e      	cmp	r3, #46	@ 0x2e
 8007712:	d10a      	bne.n	800772a <_vfiprintf_r+0x156>
 8007714:	7863      	ldrb	r3, [r4, #1]
 8007716:	2b2a      	cmp	r3, #42	@ 0x2a
 8007718:	d132      	bne.n	8007780 <_vfiprintf_r+0x1ac>
 800771a:	9b03      	ldr	r3, [sp, #12]
 800771c:	1d1a      	adds	r2, r3, #4
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	9203      	str	r2, [sp, #12]
 8007722:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007726:	3402      	adds	r4, #2
 8007728:	9305      	str	r3, [sp, #20]
 800772a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007800 <_vfiprintf_r+0x22c>
 800772e:	7821      	ldrb	r1, [r4, #0]
 8007730:	2203      	movs	r2, #3
 8007732:	4650      	mov	r0, sl
 8007734:	f7f8 fd6c 	bl	8000210 <memchr>
 8007738:	b138      	cbz	r0, 800774a <_vfiprintf_r+0x176>
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	eba0 000a 	sub.w	r0, r0, sl
 8007740:	2240      	movs	r2, #64	@ 0x40
 8007742:	4082      	lsls	r2, r0
 8007744:	4313      	orrs	r3, r2
 8007746:	3401      	adds	r4, #1
 8007748:	9304      	str	r3, [sp, #16]
 800774a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800774e:	4829      	ldr	r0, [pc, #164]	@ (80077f4 <_vfiprintf_r+0x220>)
 8007750:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007754:	2206      	movs	r2, #6
 8007756:	f7f8 fd5b 	bl	8000210 <memchr>
 800775a:	2800      	cmp	r0, #0
 800775c:	d03f      	beq.n	80077de <_vfiprintf_r+0x20a>
 800775e:	4b26      	ldr	r3, [pc, #152]	@ (80077f8 <_vfiprintf_r+0x224>)
 8007760:	bb1b      	cbnz	r3, 80077aa <_vfiprintf_r+0x1d6>
 8007762:	9b03      	ldr	r3, [sp, #12]
 8007764:	3307      	adds	r3, #7
 8007766:	f023 0307 	bic.w	r3, r3, #7
 800776a:	3308      	adds	r3, #8
 800776c:	9303      	str	r3, [sp, #12]
 800776e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007770:	443b      	add	r3, r7
 8007772:	9309      	str	r3, [sp, #36]	@ 0x24
 8007774:	e76a      	b.n	800764c <_vfiprintf_r+0x78>
 8007776:	fb0c 3202 	mla	r2, ip, r2, r3
 800777a:	460c      	mov	r4, r1
 800777c:	2001      	movs	r0, #1
 800777e:	e7a8      	b.n	80076d2 <_vfiprintf_r+0xfe>
 8007780:	2300      	movs	r3, #0
 8007782:	3401      	adds	r4, #1
 8007784:	9305      	str	r3, [sp, #20]
 8007786:	4619      	mov	r1, r3
 8007788:	f04f 0c0a 	mov.w	ip, #10
 800778c:	4620      	mov	r0, r4
 800778e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007792:	3a30      	subs	r2, #48	@ 0x30
 8007794:	2a09      	cmp	r2, #9
 8007796:	d903      	bls.n	80077a0 <_vfiprintf_r+0x1cc>
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0c6      	beq.n	800772a <_vfiprintf_r+0x156>
 800779c:	9105      	str	r1, [sp, #20]
 800779e:	e7c4      	b.n	800772a <_vfiprintf_r+0x156>
 80077a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80077a4:	4604      	mov	r4, r0
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7f0      	b.n	800778c <_vfiprintf_r+0x1b8>
 80077aa:	ab03      	add	r3, sp, #12
 80077ac:	9300      	str	r3, [sp, #0]
 80077ae:	462a      	mov	r2, r5
 80077b0:	4b12      	ldr	r3, [pc, #72]	@ (80077fc <_vfiprintf_r+0x228>)
 80077b2:	a904      	add	r1, sp, #16
 80077b4:	4630      	mov	r0, r6
 80077b6:	f7fd fd9f 	bl	80052f8 <_printf_float>
 80077ba:	4607      	mov	r7, r0
 80077bc:	1c78      	adds	r0, r7, #1
 80077be:	d1d6      	bne.n	800776e <_vfiprintf_r+0x19a>
 80077c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	d405      	bmi.n	80077d2 <_vfiprintf_r+0x1fe>
 80077c6:	89ab      	ldrh	r3, [r5, #12]
 80077c8:	059a      	lsls	r2, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_vfiprintf_r+0x1fe>
 80077cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ce:	f7fe facd 	bl	8005d6c <__retarget_lock_release_recursive>
 80077d2:	89ab      	ldrh	r3, [r5, #12]
 80077d4:	065b      	lsls	r3, r3, #25
 80077d6:	f53f af1f 	bmi.w	8007618 <_vfiprintf_r+0x44>
 80077da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077dc:	e71e      	b.n	800761c <_vfiprintf_r+0x48>
 80077de:	ab03      	add	r3, sp, #12
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	462a      	mov	r2, r5
 80077e4:	4b05      	ldr	r3, [pc, #20]	@ (80077fc <_vfiprintf_r+0x228>)
 80077e6:	a904      	add	r1, sp, #16
 80077e8:	4630      	mov	r0, r6
 80077ea:	f7fe f81d 	bl	8005828 <_printf_i>
 80077ee:	e7e4      	b.n	80077ba <_vfiprintf_r+0x1e6>
 80077f0:	08007c58 	.word	0x08007c58
 80077f4:	08007c62 	.word	0x08007c62
 80077f8:	080052f9 	.word	0x080052f9
 80077fc:	080075b1 	.word	0x080075b1
 8007800:	08007c5e 	.word	0x08007c5e

08007804 <__swbuf_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	460e      	mov	r6, r1
 8007808:	4614      	mov	r4, r2
 800780a:	4605      	mov	r5, r0
 800780c:	b118      	cbz	r0, 8007816 <__swbuf_r+0x12>
 800780e:	6a03      	ldr	r3, [r0, #32]
 8007810:	b90b      	cbnz	r3, 8007816 <__swbuf_r+0x12>
 8007812:	f7fe f9b3 	bl	8005b7c <__sinit>
 8007816:	69a3      	ldr	r3, [r4, #24]
 8007818:	60a3      	str	r3, [r4, #8]
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	071a      	lsls	r2, r3, #28
 800781e:	d501      	bpl.n	8007824 <__swbuf_r+0x20>
 8007820:	6923      	ldr	r3, [r4, #16]
 8007822:	b943      	cbnz	r3, 8007836 <__swbuf_r+0x32>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f82a 	bl	8007880 <__swsetup_r>
 800782c:	b118      	cbz	r0, 8007836 <__swbuf_r+0x32>
 800782e:	f04f 37ff 	mov.w	r7, #4294967295
 8007832:	4638      	mov	r0, r7
 8007834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	6922      	ldr	r2, [r4, #16]
 800783a:	1a98      	subs	r0, r3, r2
 800783c:	6963      	ldr	r3, [r4, #20]
 800783e:	b2f6      	uxtb	r6, r6
 8007840:	4283      	cmp	r3, r0
 8007842:	4637      	mov	r7, r6
 8007844:	dc05      	bgt.n	8007852 <__swbuf_r+0x4e>
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f7ff fdf7 	bl	800743c <_fflush_r>
 800784e:	2800      	cmp	r0, #0
 8007850:	d1ed      	bne.n	800782e <__swbuf_r+0x2a>
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	3b01      	subs	r3, #1
 8007856:	60a3      	str	r3, [r4, #8]
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	6022      	str	r2, [r4, #0]
 800785e:	701e      	strb	r6, [r3, #0]
 8007860:	6962      	ldr	r2, [r4, #20]
 8007862:	1c43      	adds	r3, r0, #1
 8007864:	429a      	cmp	r2, r3
 8007866:	d004      	beq.n	8007872 <__swbuf_r+0x6e>
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	07db      	lsls	r3, r3, #31
 800786c:	d5e1      	bpl.n	8007832 <__swbuf_r+0x2e>
 800786e:	2e0a      	cmp	r6, #10
 8007870:	d1df      	bne.n	8007832 <__swbuf_r+0x2e>
 8007872:	4621      	mov	r1, r4
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff fde1 	bl	800743c <_fflush_r>
 800787a:	2800      	cmp	r0, #0
 800787c:	d0d9      	beq.n	8007832 <__swbuf_r+0x2e>
 800787e:	e7d6      	b.n	800782e <__swbuf_r+0x2a>

08007880 <__swsetup_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4b29      	ldr	r3, [pc, #164]	@ (8007928 <__swsetup_r+0xa8>)
 8007884:	4605      	mov	r5, r0
 8007886:	6818      	ldr	r0, [r3, #0]
 8007888:	460c      	mov	r4, r1
 800788a:	b118      	cbz	r0, 8007894 <__swsetup_r+0x14>
 800788c:	6a03      	ldr	r3, [r0, #32]
 800788e:	b90b      	cbnz	r3, 8007894 <__swsetup_r+0x14>
 8007890:	f7fe f974 	bl	8005b7c <__sinit>
 8007894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007898:	0719      	lsls	r1, r3, #28
 800789a:	d422      	bmi.n	80078e2 <__swsetup_r+0x62>
 800789c:	06da      	lsls	r2, r3, #27
 800789e:	d407      	bmi.n	80078b0 <__swsetup_r+0x30>
 80078a0:	2209      	movs	r2, #9
 80078a2:	602a      	str	r2, [r5, #0]
 80078a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078a8:	81a3      	strh	r3, [r4, #12]
 80078aa:	f04f 30ff 	mov.w	r0, #4294967295
 80078ae:	e033      	b.n	8007918 <__swsetup_r+0x98>
 80078b0:	0758      	lsls	r0, r3, #29
 80078b2:	d512      	bpl.n	80078da <__swsetup_r+0x5a>
 80078b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078b6:	b141      	cbz	r1, 80078ca <__swsetup_r+0x4a>
 80078b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078bc:	4299      	cmp	r1, r3
 80078be:	d002      	beq.n	80078c6 <__swsetup_r+0x46>
 80078c0:	4628      	mov	r0, r5
 80078c2:	f7ff f8bd 	bl	8006a40 <_free_r>
 80078c6:	2300      	movs	r3, #0
 80078c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ca:	89a3      	ldrh	r3, [r4, #12]
 80078cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	2300      	movs	r3, #0
 80078d4:	6063      	str	r3, [r4, #4]
 80078d6:	6923      	ldr	r3, [r4, #16]
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	f043 0308 	orr.w	r3, r3, #8
 80078e0:	81a3      	strh	r3, [r4, #12]
 80078e2:	6923      	ldr	r3, [r4, #16]
 80078e4:	b94b      	cbnz	r3, 80078fa <__swsetup_r+0x7a>
 80078e6:	89a3      	ldrh	r3, [r4, #12]
 80078e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078f0:	d003      	beq.n	80078fa <__swsetup_r+0x7a>
 80078f2:	4621      	mov	r1, r4
 80078f4:	4628      	mov	r0, r5
 80078f6:	f000 f883 	bl	8007a00 <__smakebuf_r>
 80078fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fe:	f013 0201 	ands.w	r2, r3, #1
 8007902:	d00a      	beq.n	800791a <__swsetup_r+0x9a>
 8007904:	2200      	movs	r2, #0
 8007906:	60a2      	str	r2, [r4, #8]
 8007908:	6962      	ldr	r2, [r4, #20]
 800790a:	4252      	negs	r2, r2
 800790c:	61a2      	str	r2, [r4, #24]
 800790e:	6922      	ldr	r2, [r4, #16]
 8007910:	b942      	cbnz	r2, 8007924 <__swsetup_r+0xa4>
 8007912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007916:	d1c5      	bne.n	80078a4 <__swsetup_r+0x24>
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	0799      	lsls	r1, r3, #30
 800791c:	bf58      	it	pl
 800791e:	6962      	ldrpl	r2, [r4, #20]
 8007920:	60a2      	str	r2, [r4, #8]
 8007922:	e7f4      	b.n	800790e <__swsetup_r+0x8e>
 8007924:	2000      	movs	r0, #0
 8007926:	e7f7      	b.n	8007918 <__swsetup_r+0x98>
 8007928:	2000005c 	.word	0x2000005c

0800792c <_raise_r>:
 800792c:	291f      	cmp	r1, #31
 800792e:	b538      	push	{r3, r4, r5, lr}
 8007930:	4605      	mov	r5, r0
 8007932:	460c      	mov	r4, r1
 8007934:	d904      	bls.n	8007940 <_raise_r+0x14>
 8007936:	2316      	movs	r3, #22
 8007938:	6003      	str	r3, [r0, #0]
 800793a:	f04f 30ff 	mov.w	r0, #4294967295
 800793e:	bd38      	pop	{r3, r4, r5, pc}
 8007940:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007942:	b112      	cbz	r2, 800794a <_raise_r+0x1e>
 8007944:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007948:	b94b      	cbnz	r3, 800795e <_raise_r+0x32>
 800794a:	4628      	mov	r0, r5
 800794c:	f000 f830 	bl	80079b0 <_getpid_r>
 8007950:	4622      	mov	r2, r4
 8007952:	4601      	mov	r1, r0
 8007954:	4628      	mov	r0, r5
 8007956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800795a:	f000 b817 	b.w	800798c <_kill_r>
 800795e:	2b01      	cmp	r3, #1
 8007960:	d00a      	beq.n	8007978 <_raise_r+0x4c>
 8007962:	1c59      	adds	r1, r3, #1
 8007964:	d103      	bne.n	800796e <_raise_r+0x42>
 8007966:	2316      	movs	r3, #22
 8007968:	6003      	str	r3, [r0, #0]
 800796a:	2001      	movs	r0, #1
 800796c:	e7e7      	b.n	800793e <_raise_r+0x12>
 800796e:	2100      	movs	r1, #0
 8007970:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007974:	4620      	mov	r0, r4
 8007976:	4798      	blx	r3
 8007978:	2000      	movs	r0, #0
 800797a:	e7e0      	b.n	800793e <_raise_r+0x12>

0800797c <raise>:
 800797c:	4b02      	ldr	r3, [pc, #8]	@ (8007988 <raise+0xc>)
 800797e:	4601      	mov	r1, r0
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	f7ff bfd3 	b.w	800792c <_raise_r>
 8007986:	bf00      	nop
 8007988:	2000005c 	.word	0x2000005c

0800798c <_kill_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d07      	ldr	r5, [pc, #28]	@ (80079ac <_kill_r+0x20>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	4611      	mov	r1, r2
 8007998:	602b      	str	r3, [r5, #0]
 800799a:	f7fa fa71 	bl	8001e80 <_kill>
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	d102      	bne.n	80079a8 <_kill_r+0x1c>
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	b103      	cbz	r3, 80079a8 <_kill_r+0x1c>
 80079a6:	6023      	str	r3, [r4, #0]
 80079a8:	bd38      	pop	{r3, r4, r5, pc}
 80079aa:	bf00      	nop
 80079ac:	20000db4 	.word	0x20000db4

080079b0 <_getpid_r>:
 80079b0:	f7fa ba64 	b.w	8001e7c <_getpid>

080079b4 <__swhatbuf_r>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	460c      	mov	r4, r1
 80079b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079bc:	2900      	cmp	r1, #0
 80079be:	b096      	sub	sp, #88	@ 0x58
 80079c0:	4615      	mov	r5, r2
 80079c2:	461e      	mov	r6, r3
 80079c4:	da0d      	bge.n	80079e2 <__swhatbuf_r+0x2e>
 80079c6:	89a3      	ldrh	r3, [r4, #12]
 80079c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079cc:	f04f 0100 	mov.w	r1, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2340      	movne	r3, #64	@ 0x40
 80079d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80079d8:	2000      	movs	r0, #0
 80079da:	6031      	str	r1, [r6, #0]
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	b016      	add	sp, #88	@ 0x58
 80079e0:	bd70      	pop	{r4, r5, r6, pc}
 80079e2:	466a      	mov	r2, sp
 80079e4:	f000 f848 	bl	8007a78 <_fstat_r>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	dbec      	blt.n	80079c6 <__swhatbuf_r+0x12>
 80079ec:	9901      	ldr	r1, [sp, #4]
 80079ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80079f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80079f6:	4259      	negs	r1, r3
 80079f8:	4159      	adcs	r1, r3
 80079fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079fe:	e7eb      	b.n	80079d8 <__swhatbuf_r+0x24>

08007a00 <__smakebuf_r>:
 8007a00:	898b      	ldrh	r3, [r1, #12]
 8007a02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a04:	079d      	lsls	r5, r3, #30
 8007a06:	4606      	mov	r6, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	d507      	bpl.n	8007a1c <__smakebuf_r+0x1c>
 8007a0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	2301      	movs	r3, #1
 8007a16:	6163      	str	r3, [r4, #20]
 8007a18:	b003      	add	sp, #12
 8007a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a1c:	ab01      	add	r3, sp, #4
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f7ff ffc8 	bl	80079b4 <__swhatbuf_r>
 8007a24:	9f00      	ldr	r7, [sp, #0]
 8007a26:	4605      	mov	r5, r0
 8007a28:	4639      	mov	r1, r7
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	f7ff f87c 	bl	8006b28 <_malloc_r>
 8007a30:	b948      	cbnz	r0, 8007a46 <__smakebuf_r+0x46>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	059a      	lsls	r2, r3, #22
 8007a38:	d4ee      	bmi.n	8007a18 <__smakebuf_r+0x18>
 8007a3a:	f023 0303 	bic.w	r3, r3, #3
 8007a3e:	f043 0302 	orr.w	r3, r3, #2
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	e7e2      	b.n	8007a0c <__smakebuf_r+0xc>
 8007a46:	89a3      	ldrh	r3, [r4, #12]
 8007a48:	6020      	str	r0, [r4, #0]
 8007a4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a4e:	81a3      	strh	r3, [r4, #12]
 8007a50:	9b01      	ldr	r3, [sp, #4]
 8007a52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a56:	b15b      	cbz	r3, 8007a70 <__smakebuf_r+0x70>
 8007a58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a5c:	4630      	mov	r0, r6
 8007a5e:	f000 f81d 	bl	8007a9c <_isatty_r>
 8007a62:	b128      	cbz	r0, 8007a70 <__smakebuf_r+0x70>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f023 0303 	bic.w	r3, r3, #3
 8007a6a:	f043 0301 	orr.w	r3, r3, #1
 8007a6e:	81a3      	strh	r3, [r4, #12]
 8007a70:	89a3      	ldrh	r3, [r4, #12]
 8007a72:	431d      	orrs	r5, r3
 8007a74:	81a5      	strh	r5, [r4, #12]
 8007a76:	e7cf      	b.n	8007a18 <__smakebuf_r+0x18>

08007a78 <_fstat_r>:
 8007a78:	b538      	push	{r3, r4, r5, lr}
 8007a7a:	4d07      	ldr	r5, [pc, #28]	@ (8007a98 <_fstat_r+0x20>)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	4604      	mov	r4, r0
 8007a80:	4608      	mov	r0, r1
 8007a82:	4611      	mov	r1, r2
 8007a84:	602b      	str	r3, [r5, #0]
 8007a86:	f7fa fa2a 	bl	8001ede <_fstat>
 8007a8a:	1c43      	adds	r3, r0, #1
 8007a8c:	d102      	bne.n	8007a94 <_fstat_r+0x1c>
 8007a8e:	682b      	ldr	r3, [r5, #0]
 8007a90:	b103      	cbz	r3, 8007a94 <_fstat_r+0x1c>
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	bd38      	pop	{r3, r4, r5, pc}
 8007a96:	bf00      	nop
 8007a98:	20000db4 	.word	0x20000db4

08007a9c <_isatty_r>:
 8007a9c:	b538      	push	{r3, r4, r5, lr}
 8007a9e:	4d06      	ldr	r5, [pc, #24]	@ (8007ab8 <_isatty_r+0x1c>)
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	4608      	mov	r0, r1
 8007aa6:	602b      	str	r3, [r5, #0]
 8007aa8:	f7fa fa1e 	bl	8001ee8 <_isatty>
 8007aac:	1c43      	adds	r3, r0, #1
 8007aae:	d102      	bne.n	8007ab6 <_isatty_r+0x1a>
 8007ab0:	682b      	ldr	r3, [r5, #0]
 8007ab2:	b103      	cbz	r3, 8007ab6 <_isatty_r+0x1a>
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	bd38      	pop	{r3, r4, r5, pc}
 8007ab8:	20000db4 	.word	0x20000db4

08007abc <_init>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr

08007ac8 <_fini>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr
